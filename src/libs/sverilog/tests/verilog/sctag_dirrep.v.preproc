module sctag_dirrep(
      dirrep_dir_wr_par_c4, dir_vld_c4_l, dc_rd_en_c4, dc_wr_en_c4, 
   inval_mask_dcd_c4, dc_rdwr_row_en_c4, dc_rdwr_panel_dec_c4, 
   dc_lkup_row_dec_c4, dc_lkup_panel_dec_c4, wr_dc_dir_entry_c4, 
   dc_dir_clear_c4, ic_rd_en_c4, ic_wr_en_c4, inval_mask_icd_c4, 
   ic_rdwr_row_en_c4, ic_rdwr_panel_dec_c4, ic_lkup_row_dec_c4, 
   ic_lkup_panel_dec_c4, wr_ic_dir_entry_c4, ic_dir_clear_c4, 
   lkup_addr8_c4, dir_error_c8, so, tagdp_lkup_addr11_c5, 
      ic_parity_out, dc_parity_out, arbdp_dir_wr_par_c3, 
   arbctl_dir_vld_c3_l, arbctl_ic_rd_en_c3, arbctl_dc_rd_en_c3, 
   arbctl_ic_wr_en_c3, arbctl_dc_wr_en_c3, arbctl_dir_panel_dcd_c3, 
   arbctl_dir_panel_icd_c3, arbctl_lkup_bank_ena_dcd_c3, 
   arbctl_lkup_bank_ena_icd_c3, arbctl_inval_mask_dcd_c3, 
   arbctl_inval_mask_icd_c3, arbctl_wr_dc_dir_entry_c3, 
   arbctl_wr_ic_dir_entry_c3, lkup_row_addr_dcd_c3, 
   lkup_row_addr_icd_c3, oneshot_dir_clear_c3, tagdp_lkup_addr11_c4, 
   sehold, rclk, si, se
   );


output  	dirrep_dir_wr_par_c4;
output		dir_vld_c4_l;


output		dc_rd_en_c4, dc_wr_en_c4 ;
output [7:0]   	inval_mask_dcd_c4;
output [3:0]	dc_rdwr_row_en_c4; output [3:0]	dc_rdwr_panel_dec_c4; output [3:0]	dc_lkup_row_dec_c4 ; 
output [3:0]   	dc_lkup_panel_dec_c4 ;output [5:0]   	wr_dc_dir_entry_c4 ; output	dc_dir_clear_c4; 					
output		ic_rd_en_c4, ic_wr_en_c4 ;
output [7:0]	inval_mask_icd_c4;
output [3:0]	ic_rdwr_row_en_c4; output [3:0]	ic_rdwr_panel_dec_c4; output [3:0]	ic_lkup_row_dec_c4 ; output [3:0]   	ic_lkup_panel_dec_c4 ;
output [5:0]   	wr_ic_dir_entry_c4 ; 					output	ic_dir_clear_c4; 
output		lkup_addr8_c4; 

output	dir_error_c8; 
output	so;

input	[3:0]	ic_parity_out; input	[3:0]	dc_parity_out; 
input   	arbdp_dir_wr_par_c3;
input		arbctl_dir_vld_c3_l;
input		arbctl_ic_rd_en_c3, arbctl_dc_rd_en_c3;
input		arbctl_ic_wr_en_c3, arbctl_dc_wr_en_c3;
input [4:0]   	arbctl_dir_panel_dcd_c3, arbctl_dir_panel_icd_c3 ; 
input [3:0]   	arbctl_lkup_bank_ena_dcd_c3, arbctl_lkup_bank_ena_icd_c3 ; input [7:0]   	arbctl_inval_mask_dcd_c3,arbctl_inval_mask_icd_c3;
input [4:0]   	arbctl_wr_dc_dir_entry_c3, arbctl_wr_ic_dir_entry_c3;
input [2:0]	lkup_row_addr_dcd_c3, lkup_row_addr_icd_c3 ; 							     
input		oneshot_dir_clear_c3;

input		tagdp_lkup_addr11_c4; input		sehold;	output		tagdp_lkup_addr11_c5; 
input		rclk;
input		si, se;

wire		;
wire	[4:0]	dir_panel_dcd_c4, dir_panel_icd_c4 ;
wire	[2:0]	lkup_row_addr_dcd_c4, lkup_row_addr_icd_c4;

// ------\/ Addition for directory macrotest \/------------
dffe_s   #(1) ff_tagdp_lkup_addr11_c5
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd;
wire	[4:0]	, dir_panel_icd_c4 ;
wire	[2:0]	lkup_row_addr_dcd_c4, lkup_row_addr_icd_c4;

// ------\/ Addition for directory macrotest \/------------
dffe_s   #(1) ff_tagdp_lkup_addr11_c5
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd,  ;
wire	[2:0]	lkup_row_addr_dcd_c4, lkup_row_addr_icd_c4;

// ------\/ Addition for directory macrotest \/------------
dffe_s   #(1) ff_tagdp_lkup_addr11_c5
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd ;
wire	[2:0]	, lkup_row_addr_icd_c4;

// ------\/ Addition for directory macrotest \/------------
dffe_s   #(1) ff_tagdp_lkup_addr11_c5
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd, ;

// ------\/ Addition for directory macrotest \/------------
dffe_s   #(1) ff_tagdp_lkup_addr11_c5
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd;

dffe_s   #(1) 
              (.q   (tagdp_lkup_addr11_c5),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (tagdp_lkup_addr11_c4),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
	       .en(~sehold),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
	       .en(~),
               .se(se), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

// ------\/ Addition for directory macrotest \/------------

assign	dir_error_c7 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;


assign	 = (|(ic_parity_out)) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd = (|()) | (|(dc_parity_out)) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd)) | (|()) ;

dff_s   #(1) ff_dir_error_c8
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd)) ;

dff_s   #(1) 
              (.q   (dir_error_c8),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (dir_error_c7),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_wr_par_c4
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(1) 
              (.q   (dirrep_dir_wr_par_c4),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbdp_dir_wr_par_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dir_vld_dcd_c4_l
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(1) 
              (.q   (dir_vld_c4_l),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbctl_dir_vld_c3_l),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_rd_en_c4
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;


dff_s   #(1) 
              (.q   (dc_rd_en_c4),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbctl_dc_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_rd_en_c4
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(1) 
              (.q   (ic_rd_en_c4),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbctl_ic_rd_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_dc_wr_en_c4
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(1) 
              (.q   (dc_wr_en_c4),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbctl_dc_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(1) ff_ic_wr_en_c4
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(1) 
              (.q   (ic_wr_en_c4),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   (),
               .din (arbctl_ic_wr_en_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;


dff_s   #(8) ff_inval_mask_dcd_c4
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;


dff_s   #(8) 
              (.q   (inval_mask_dcd_c4[7:0]),
               .din (arbctl_inval_mask_dcd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   ([7:0]),
               .din ([7:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

dff_s   #(8) ff_inval_mask_icd_c4
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;

dff_s   #(8) 
              (.q   (inval_mask_icd_c4[7:0]),
               .din (arbctl_inval_mask_icd_c3[7:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   ([7:0]),
               .din ([7:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// RD Write row and panel enables.
// Row is dtermined by the lower order bits of the 
// address.
// ie bits 5,4 for the I$
// ie bits 5,11 for the D$.
// Panel is determined by address bits 10,9
///////////////////////////////////////////////////////////

dff_s   #(4) ff_dir_panel_dcd_c4
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;



dff_s   #(4) 
              (.q   ({dir_panel_dcd_c4[4:3], dir_panel_dcd_c4[1:0]}),
               .din ({arbctl_dir_panel_dcd_c3[4:3],arbctl_dir_panel_dcd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd
              (.q   ({[4:3], [1:0]}),
               .din ({[4:3],[1:0]}),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd),
               .se(), .si  (), .so  ()
              ) ;

//assign	dc_rdwr_panel_dec_c4[0] = ( dir_panel_dcd_c4[4:3] == 2'd0 );
//assign	dc_rdwr_panel_dec_c4[1] = ( dir_panel_dcd_c4[4:3] == 2'd1 );
//assign	dc_rdwr_panel_dec_c4[2] = ( dir_panel_dcd_c4[4:3] == 2'd2 );
//assign	dc_rdwr_panel_dec_c4[3] = ( dir_panel_dcd_c4[4:3] == 2'd3 );

assign  dc_rdwr_panel_dec_c4[0] = ~dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[1] = ~dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[2] = dir_panel_dcd_c4[4] & ~dir_panel_dcd_c4[3] ;
assign  dc_rdwr_panel_dec_c4[3] = dir_panel_dcd_c4[4] & dir_panel_dcd_c4[3] ;

assign	dc_rdwr_row_en_c4[0] = (dir_panel_dcd_c4[1:0] == 2'd0 );
assign	dc_rdwr_row_en_c4[1] = (dir_panel_dcd_c4[1:0] == 2'd1 );
assign	dc_rdwr_row_en_c4[2] = (dir_panel_dcd_c4[1:0] == 2'd), .si  (), .so  ()
              ) ;


assign  [0] = ~[4] & ~[3] ;
assign  [1] = ~[4] & [3] ;
assign  [2] = [4] & ~[3] ;
assign  [3] = [4] & [3] ;

assign	[0] = ([1:0] == 2d0 );
assign	[1] = ([1:0] == 2d1 );
assign	[2] = ([1:0] == 2d2 );
assign	[3] = ([1:0] == 2d3 );

dff_s   #(4) 
              (.q   ({dir_panel_icd_c4[4:3],dir_panel_icd_c4[1:0]}),
               .din ({arbctl_dir_panel_icd_c3[4:3],arbctl_dir_panel_icd_c3[1:0]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	ic_rdwr_panel_dec_c4[0] = ( dir_panel_icd_c4[4:3] == 2'd0 );
assign	ic_rdwr_panel_dec_c4[1] = ( dir_panel_icd_c4[4:3] == 2'd1 );
assign	ic_rdwr_panel_dec_c4[2] = ( dir_panel_icd_c4[4:3] == 2'd2 );
assign	ic_rdwr_panel_dec_c4[3] = ( dir_panel_icd_c4[4:3] == 2'd3 );

assign	ic_rdwr_row_en_c4[0] = (dir_panel_icd_c4[1:0] == 2'd0 );
assign	ic_rdwr_row_en_c4[1] = (dir_panel_icd_c4[1:0] == 2'd1 );
assign	ic_rdwr_row_en_c4[2] = (dir_panel_icd_c4[1:0] == 2'd2 );
assign	ic_rdwr_row_en_c4[3] = (dir_panel_icd_c4[1:0] == 2'd3 );

///////////////////////////////////////////////////////////
// lkup  row and panel enables.
// Lkup row coming from tagdp corresponds to
// address bits <10:8> of the lkup address.
// The bits <10:9> actually go into determining
// the panel id within the directory. 
///////////////////////////////////////////////////////////

dff_s   #(3) ff_lkup_row_addr_dcd_c4
              (.q   (lkup_row_addr_dcd_c4[2:0]),
               .din (lkup_row_addr_dcd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ({[4:3],[1:0]}),
               .din ({[4:3],[1:0]}),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


assign	ic_rdwr_panel_dec_c4[0] = ( dir_panel_icd_c4[4:3] == 2'd0 );
assign	ic_rdwr_panel_dec_c4[1] = ( dir_panel_icd_c4[4:3] == 2'd1 );
assign	ic_rdwr_panel_dec_c4[2] = ( dir_panel_icd_c4[4:3] == 2'd2 );
assign	ic_rdwr_panel_dec_c4[3] = ( dir_panel_icd_c4[4:3] == 2'd3 );

assign	ic_rdwr_row_en_c4[0] = (dir_panel_icd_c4[1:0] == 2'd0 );
assign	ic_rdwr_row_en_c4[1] = (dir_panel_icd_c4[1:0] == 2'd1 );
assign	ic_rdwr_row_en_c4[2] = (dir_panel_icd_c4[1:0] == 2'd2 );
assign	ic_rdwr_row_en_c4[3] = (dir_panel_icd_c4[1:0] == 2'd3 );

///////////////////////////////////////////////////////////
// lkup  row and panel enables.
// Lkup row coming from tagdp corresponds to
// address bits <10:8> of the lkup address.
// The bits <10:9> actually go into determining
// the panel id within the directory. 
///////////////////////////////////////////////////////////

dff_s   #(3) ff_lkup_row_addr_dcd_c4
              (.q   (lkup_row_addr_dcd_c4[2:0]),
               .din (lkup_row_addr_dcd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


assign	ic_rdwr_panel_dec_c4[0] = ( dir_panel_icd_c4[4:3] == 2'd0 );
assign	ic_rdwr_panel_dec_c4[1] = ( dir_panel_icd_c4[4:3] == 2'd1 );
assign	ic_rdwr_panel_dec_c4[2] = ( dir_panel_icd_c4[4:3] == 2'd2 );
assign	ic_rdwr_panel_dec_c4[3] = ( dir_panel_icd_c4[4:3] == 2'd3 );

assign	ic_rdwr_row_en_c4[0] = (dir_panel_icd_c4[1:0] == 2'd0 );
assign	ic_rdwr_row_en_c4[1] = (dir_panel_icd_c4[1:0] == 2'd1 );
assign	ic_rdwr_row_en_c4[2] = (dir_panel_icd_c4[1:0] == 2'd2 );
assign	ic_rdwr_row_en_c4[3] = (dir_panel_icd_c4[1:0] == 2'd3 );

///////////////////////////////////////////////////////////
// lkup  row and panel enables.
// Lkup row coming from tagdp corresponds to
// address bits <10:8> of the lkup address.
// The bits <10:9> actually go into determining
// the panel id within the directory. 
///////////////////////////////////////////////////////////

dff_s   #(3) ff_lkup_row_addr_dcd_c4
              (.q   (lkup_row_addr_dcd_c4[2:0]),
               .din (lkup_row_addr_dcd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;


assign	[0] = ( [4:3] == 2d0 );
assign	[1] = ( [4:3] == 2d1 );
assign	[2] = ( [4:3] == 2d2 );
assign	[3] = ( [4:3] == 2d3 );

assign	[0] = ([1:0] == 2d0 );
assign	[1] = ([1:0] == 2d1 );
assign	[2] = ([1:0] == 2d2 );
assign	[3] = ([1:0] == 2d3 );


dff_s   #(3) 
              (.q   (lkup_row_addr_dcd_c4[2:0]),
               .din (lkup_row_addr_dcd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([2:0]),
               .din ([2:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;

assign	dc_lkup_panel_dec_c4[0] = ( lkup_row_addr_dcd_c4[2:1] == 2'd0 );
assign	dc_lkup_panel_dec_c4[1] = ( lkup_row_addr_dcd_c4[2:1] == 2'd1 );
assign	dc_lkup_panel_dec_c4[2] = ( lkup_row_addr_dcd_c4[2:1] == 2'd2 );
assign	dc_lkup_panel_dec_c4[3] = ( lkup_row_addr_dcd_c4[2:1] == 2'd3 );


dff_s   #(4) ff_lkup_bank_ena_dcd_c4
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;

assign	[0] = ( [2:1] == 2d0 );
assign	[1] = ( [2:1] == 2d1 );
assign	[2] = ( [2:1] == 2d2 );
assign	[3] = ( [2:1] == 2d3 );


dff_s   #(4) 
              (.q   (dc_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_dcd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([3:0]),
               .din ([3:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


dff_s   #(3) ff_lkup_row_addr_icd_c4
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;


dff_s   #(3) 
              (.q   (lkup_row_addr_icd_c4[2:0]),
               .din (lkup_row_addr_icd_c3[2:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([2:0]),
               .din ([2:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


assign	lkup_addr8_c4 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;


assign	 = lkup_row_addr_icd_c4[0];

assign	ic_lkup_panel_dec_c4[0] = ( lkup_row_addr_icd_c4[2:1] == 2'd0 );
assign	ic_lkup_panel_dec_c4[1] = ( lkup_row_addr_icd_c4[2:1] == 2'd1 );
assign	ic_lkup_panel_dec_c4[2] = ( lkup_row_addr_icd_c4[2:1] == 2'd2 );
assign	ic_lkup_panel_dec_c4[3] = ( lkup_row_addr_icd_c4[2:1] == 2'd3 );

dff_s   #(4) ff_lkup_bank_ena_icd_c4
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
 = [0];

assign	[0] = ( [2:1] == 2d0 );
assign	[1] = ( [2:1] == 2d1 );
assign	[2] = ( [2:1] == 2d2 );
assign	[3] = ( [2:1] == 2d3 );

dff_s   #(4) 
              (.q   (ic_lkup_row_dec_c4[3:0]),
               .din (arbctl_lkup_bank_ena_icd_c3[3:0]),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([3:0]),
               .din ([3:0]),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Wr or Rd entry.
// the LSB of the entry is address bit 2  of
// the panel id from arbctl.
// This translates to address<8> for both the I$ and D$.
///////////////////////////////////////////////////////////

dff_s   #(6) ff_wr_dc_dir_entry_c4
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;



dff_s   #(6) 
              (.q   (wr_dc_dir_entry_c4[5:0]),
               .din ({arbctl_wr_dc_dir_entry_c3[4:0],arbctl_dir_panel_dcd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([5:0]),
               .din ({[4:0],[2]}),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


dff_s   #(6) ff_wr_ic_dir_entry_c4
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;


dff_s   #(6) 
              (.q   (wr_ic_dir_entry_c4[5:0]),
               .din ({arbctl_wr_ic_dir_entry_c3[4:0],arbctl_dir_panel_icd_c3[2]}),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   ([5:0]),
               .din ({[4:0],[2]}),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


///////////////////////////////////////////////////////////
// Dir clear bits.
///////////////////////////////////////////////////////////

dff_s   #(1) ff_ic_dir_clear_c4
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;



dff_s   #(1) 
              (.q   (ic_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   (),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;


dff_s   #(1) ff_dc_dir_clear_c4
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;


dff_s   #(1) 
              (.q   (dc_dir_clear_c4),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule

              (.q   (),
               .din (oneshot_dir_clear_c3),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .din (),
               .clk (rclk),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .clk (),
               .se(se), .si  (), .so  ()
              ) ;




endmodule
),
               .se(), .si  (), .so  ()
              ) ;




endmodule
), .si  (), .so  ()
              ) ;




endmodule
