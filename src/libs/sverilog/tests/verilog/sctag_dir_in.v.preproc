module sctag_dir_in(
      lkup_wr_data_c5, rddata_out_c6, so, 
      lkup_wr_data_c4, rd_data1_out_c5, rd_data2_out_c5, rd_enable1_c5, 
   rclk, si, se, sehold
   );


output  [32:0]  lkup_wr_data_c5;	output	[31:0]	rddata_out_c6;
output		so;

input   [32:0] 	lkup_wr_data_c4;
input	[31:0]	rd_data1_out_c5; input	[31:0]	rd_data2_out_c5; input		rd_enable1_c5;	input		rclk;
input		si, se;
input		sehold;

wire	[31:0]	;
wire		clk_en;




// USE A MUX2 FLOP to replace sehold_mux & ff_lkup_wr_data_c5 
//mux2ds  #(33) sehold_mux(.dout (lkup_wr_data_c4_in[32:0]) ,
                //.in0(lkup_wr_data_c5[32:0]), .in1(lkup_wr_data_c4[32:0]),
                //.sel0(sehold), .sel1(~sehold));

clken_buf  clk_buf  (.clk(clk_en), .rclk(rclk), .enb_l(sehold), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
;
wire		;




// USE A MUX2 FLOP to replace sehold_mux & ff_lkup_wr_data_c5 
//mux2ds  #(33) sehold_mux(.dout (lkup_wr_data_c4_in[32:0]) ,
                //.in0(lkup_wr_data_c5[32:0]), .in1(lkup_wr_data_c4[32:0]),
                //.sel0(sehold), .sel1(~sehold));

clken_buf  clk_buf  (.clk(clk_en), .rclk(rclk), .enb_l(sehold), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
;




                                
clken_buf    (.clk(clk_en), .rclk(rclk), .enb_l(sehold), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
  (.clk(), .rclk(rclk), .enb_l(sehold), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
), .rclk(), .enb_l(sehold), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
), .enb_l(), .tmb_l(~se));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
), .tmb_l(~));

// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
dff_s   #(33) ff_lkup_wr_data_c5		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
));

dff_s   #(33) 		// Use an 8X flop. no buffer following the flop.
              (.q   (lkup_wr_data_c5[32:0]),
               .din (lkup_wr_data_c4[32:0]),
               .clk (clk_en),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
		              (.q   ([32:0]),
               .din ([32:0]),
               .clk (),
               .se  (se), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
),
               .se  (), .si  (), .so  ()
              ) ;



// bits {0,1,2 } {3,4,5}.... occupy the same bit pitches 
mux2ds  #(32) mux_rddata_out_c5(.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
), .si  (), .so  ()
              ) ;



mux2ds  #(32) (.dout (rddata_out_c5[31:0]) ,
                .in0(rd_data1_out_c5[31:0]), .in1(rd_data2_out_c5[31:0]),
                .sel0(rd_enable1_c5), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
(.dout ([31:0]) ,
                .in0([31:0]), .in1([31:0]),
                .sel0(), .sel1(~rd_enable1_c5));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
), .sel1(~));

dff_s   	#(32) ff_rddata_out_c6		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
));

dff_s   	#(32) 		// Use an 16X buffer following a 1X mx flop.
              (.q   (rddata_out_c6[31:0]),
               .din (rddata_out_c5[31:0]),
               .clk (rclk),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
		              (.q   ([31:0]),
               .din ([31:0]),
               .clk (),
               .se  (se), .si  (), .so  ()
              ) ;





endmodule
),
               .se  (), .si  (), .so  ()
              ) ;





endmodule
), .si  (), .so  ()
              ) ;





endmodule
