
     

module aurora_201_AURORA_LANE
(
        RX_DATA,
    RX_NOT_IN_TABLE,
    RX_DISP_ERR,
    RX_CHAR_IS_K,
    RX_CHAR_IS_COMMA,
    RX_STATUS,
    RX_BUF_ERR,
    TX_BUF_ERR,
    RX_REALIGN,
    RX_POLARITY,
    RX_RESET,
    TX_CHAR_IS_K,
    TX_DATA,
    TX_RESET,

        ENA_COMMA_ALIGN,

        GEN_SCP,
    GEN_ECP,
    GEN_PAD,
    TX_PE_DATA,
    TX_PE_DATA_V,
    GEN_CC,

        RX_PAD,
    RX_PE_DATA,
    RX_PE_DATA_V,
    RX_SCP,
    RX_ECP,

        GEN_A,
    GEN_K,
    GEN_R,
    GEN_V,
    LANE_UP,
    SOFT_ERROR,
    HARD_ERROR,
    CHANNEL_BOND_LOAD,
    GOT_A,
    GOT_V,

        USER_CLK,
    RESET
);



        input   [15:0]  RX_DATA;                    input   [1:0]   RX_NOT_IN_TABLE;            input   [1:0]   RX_DISP_ERR;                input   [1:0]   RX_CHAR_IS_K;               input   [1:0]   RX_CHAR_IS_COMMA;           input   [5:0]   RX_STATUS;                  input           RX_BUF_ERR;                 input           TX_BUF_ERR;                 input           RX_REALIGN;                 output          RX_POLARITY;                output          RX_RESET;                   output  [1:0]   TX_CHAR_IS_K;               output  [15:0]  TX_DATA;                    output          TX_RESET;               
        output          ENA_COMMA_ALIGN;        
        input           GEN_SCP;                    input           GEN_ECP;                    input           GEN_PAD;                    input   [0:15]  TX_PE_DATA;                 input           TX_PE_DATA_V;               input           GEN_CC;                 
        output          RX_PAD;                     output  [0:15]  RX_PE_DATA;                 output          RX_PE_DATA_V;               output          RX_SCP;                     output          RX_ECP;                 
        input           GEN_A;                      input   [0:1]   GEN_K;                      input   [0:1]   GEN_R;                      input   [0:1]   GEN_V;                      output          LANE_UP;                    output          SOFT_ERROR;                 output          HARD_ERROR;                 output          CHANNEL_BOND_LOAD;          output  [0:1]   GOT_A;                      output          GOT_V;                  

        input           USER_CLK;                   input           RESET;                  


    wire            ;
    wire    [0:1]   gen_sp_data_i;
    wire    [0:1]   gen_spa_data_i;
    wire            rx_sp_i;
    wire            rx_spa_i;
    wire            rx_neg_i;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire    [0:1]   ;
    wire    [0:1]   gen_spa_data_i;
    wire            rx_sp_i;
    wire            rx_spa_i;
    wire            rx_neg_i;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire    [0:1]   ;
    wire            rx_sp_i;
    wire            rx_spa_i;
    wire            rx_neg_i;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;
    wire            rx_spa_i;
    wire            rx_neg_i;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;
    wire            rx_neg_i;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;
    wire            enable_error_detect_i;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;
    wire            do_word_align_i;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;
    wire            hard_error_reset_i;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;
    wire            ;

//*********************************Main Body of Code**********************************

    // Lane Initialization state machine
    aurora_201_LANE_INIT_SM lane_init_sm_i
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA;


        aurora_201_LANE_INIT_SM 
    (
        // GTP Interface
        .RX_NOT_IN_TABLE(RX_NOT_IN_TABLE),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA
    (
                .RX_NOT_IN_TABLE(),
        .RX_DISP_ERR(RX_DISP_ERR),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_DISP_ERR(),
        .RX_CHAR_IS_COMMA(RX_CHAR_IS_COMMA),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_CHAR_IS_COMMA(),
        .RX_REALIGN(RX_REALIGN),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_REALIGN(),

        .RX_RESET(RX_RESET),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

        .RX_RESET(),
        .TX_RESET(TX_RESET),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .TX_RESET(),
        .RX_POLARITY(RX_POLARITY),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_POLARITY(),

        // Comma Detect Phase Alignment Interface
        .ENA_COMMA_ALIGN(ENA_COMMA_ALIGN),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .ENA_COMMA_ALIGN(),

        // Symbol Generator Interface
        .GEN_K(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .GEN_K(),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .GEN_SP_DATA(),
        .GEN_SPA_DATA(gen_spa_data_i),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .GEN_SPA_DATA(),

        // Symbol Decoder Interface
        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .RX_SP(),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_SPA(),
        .RX_NEG(rx_neg_i),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RX_NEG(),

        .DO_WORD_ALIGN(do_word_align_i),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

        .DO_WORD_ALIGN(),

        // Error Detection Logic Interface
        .HARD_ERROR_RESET(hard_error_reset_i),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .HARD_ERROR_RESET(),

        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

        .ENABLE_ERROR_DETECT(),

        // Global Logic Interface
        .LANE_UP(LANE_UP),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .LANE_UP(),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),

                .USER_CLK(),
        .RESET(RESET)

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .RESET()

    );


    // Channel Bonding Count Decode module
    aurora_201_CHBOND_COUNT_DEC chbond_count_dec_i
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA)

    );


        aurora_201_CHBOND_COUNT_DEC 
    (
        .RX_STATUS(RX_STATUS),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA
    (
        .RX_STATUS(),
        .CHANNEL_BOND_LOAD(CHANNEL_BOND_LOAD),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .CHANNEL_BOND_LOAD(),
        .USER_CLK(USER_CLK)
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .USER_CLK()
    );


    // Symbol Generation module
    aurora_201_SYM_GEN sym_gen_i
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA)
    );


        aurora_201_SYM_GEN 
    (
        // TX_LL Interface
        .GEN_SCP(GEN_SCP),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA
    (
                .GEN_SCP(),
        .GEN_ECP(GEN_ECP),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .GEN_ECP(),
        .GEN_PAD(GEN_PAD),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .GEN_PAD(),
        .TX_PE_DATA(TX_PE_DATA),
        .TX_PE_DA),
        .TX_PE_DATA(),
        .TX_PE_DA),
        .TX_PE_DATA_V(),
        .GEN_CC(GEN_CC),

        // Global Logic Interface
        .GEN_A(GEN_A),
        .GEN_K(GEN_K),
        .GEN_R(GEN_R),
        .GEN_V(GEN_V),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_CC(),

        // Global Logic Interface
        .GEN_A(GEN_A),
        .GEN_K(GEN_K),
        .GEN_R(GEN_R),
        .GEN_V(GEN_V),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .GEN_A(),
        .GEN_K(GEN_K),
        .GEN_R(GEN_R),
        .GEN_V(GEN_V),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_K(),
        .GEN_R(GEN_R),
        .GEN_V(GEN_V),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_R(),
        .GEN_V(GEN_V),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_V(),

        // Lane Init SM Interface
        .GEN_K_FSM(gen_k_i),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .GEN_K_FSM(),
        .GEN_SP_DATA(gen_sp_data_i),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_SP_DATA(),
        .GEN_SPA_DATA(gen_spa_data_i),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GEN_SPA_DATA(),

        // GTP Interface
        .TX_CHAR_IS_K({TX_CHAR_IS_K[0],TX_CHAR_IS_K[1]}),
        .TX_DATA({TX_DATA[7:0],TX_DATA[15:8]}),

        // System Interface
        .USER_CLK(USER_CLK)
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .TX_CHAR_IS_K({[0],[1]}),
        .TX_DATA({[7:0],[15:8]}),

                .USER_CLK()
    );


    // Symbol Decode module
    aurora_201_SYM_DEC sym_dec_i
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
)
    );


        aurora_201_SYM_DEC 
    (
        // RX_LL Interface
        .RX_PAD(RX_PAD),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule

    (
                .RX_PAD(),
        .RX_PE_DATA(RX_PE_DATA),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_PE_DATA(),
        .RX_PE_DATA_V(RX_PE_DATA_V),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_PE_DATA_V(),
        .RX_SCP(RX_SCP),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_SCP(),
        .RX_ECP(RX_ECP),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_ECP(),

        // Lane Init SM Interface
        .DO_WORD_ALIGN(do_word_align_i),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .DO_WORD_ALIGN(),

        .RX_SP(rx_sp_i),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

        .RX_SP(),
        .RX_SPA(rx_spa_i),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_SPA(),
        .RX_NEG(rx_neg_i),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_NEG(),

        // Global Logic Interface
        .GOT_A(GOT_A),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .GOT_A(),
        .GOT_V(GOT_V),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .GOT_V(),

        // GTP Interface
        .RX_DATA({RX_DATA[7:0],RX_DATA[15:8]}),
        .RX_CHAR_IS_K({RX_CHAR_IS_K[0],RX_CHAR_IS_K[1]}),
        .RX_CHAR_IS_COMMA({RX_CHAR_IS_COMMA[0],RX_CHAR_IS_COMMA[1]}),

        // System Interface
        .USER_CLK(USER_CLK),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .RX_DATA({[7:0],[15:8]}),
        .RX_CHAR_IS_K({[0],[1]}),
        .RX_CHAR_IS_COMMA({[0],[1]}),

                .USER_CLK(),
        .RESET(RESET)
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RESET()
    );


    // Error Detection module
    aurora_201_ERROR_DETECT error_detect_i
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
)
    );


        aurora_201_ERROR_DETECT 
    (
        // Lane Init SM Interface
        .ENABLE_ERROR_DETECT(enable_error_detect_i),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule

    (
                .ENABLE_ERROR_DETECT(),

        .HARD_ERROR_RESET(hard_error_reset_i),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

        .HARD_ERROR_RESET(),

        // Global Logic Interface
        .SOFT_ERROR(SOFT_ERROR),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .SOFT_ERROR(),
        .HARD_ERROR(HARD_ERROR),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .HARD_ERROR(),

        // GTP Interface
        .RX_BUF_ERR(RX_BUF_ERR),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .RX_BUF_ERR(),
        .RX_DISP_ERR({RX_DISP_ERR[0],RX_DISP_ERR[1]}),
        .RX_NOT_IN_TABLE({RX_NOT_IN_TABLE[0],RX_NOT_IN_TABLE[1]}),
        .TX_BUF_ERR(TX_BUF_ERR),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_DISP_ERR({[0],[1]}),
        .RX_NOT_IN_TABLE({[0],[1]}),
        .TX_BUF_ERR(),
        .RX_REALIGN(RX_REALIGN),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),
        .RX_REALIGN(),

        // System Interface
        .USER_CLK(USER_CLK)
    );

endmodule
),

                .USER_CLK()
    );

endmodule
)
    );

endmodule
