	


module sctag_snpdp (
      so, snpq_arbdp_addr_px2, snpq_arbdp_inst_px2, snpq_arbdp_data_px2, 
   snpdp_rq_winv_s1, rdmatag_wr_addr_s2, 
      rclk, si, se, jbi_req_buf, snp_hdr1_wen0_s0, snp_hdr2_wen0_s1, 
   snp_data1_wen0_s2, snp_data2_wen0_s3, snp_hdr1_wen1_s0, 
   snp_hdr2_wen1_s1, snp_data1_wen1_s2, snp_data2_wen1_s3, 
   snpctl_wr_ptr, snpctl_rd_ptr, rdmad_wr_entry_s2
   );

output	so;

output [39:0]			snpq_arbdp_addr_px2;
output [-1:0]	snpq_arbdp_inst_px2; output [63:0]			snpq_arbdp_data_px2;

output		snpdp_rq_winv_s1; 
output	[39:6]	rdmatag_wr_addr_s2 ;

input	rclk, si, se;

input	[31:0]	jbi_req_buf;

 input   snp_hdr1_wen0_s0, snp_hdr2_wen0_s1, snp_data1_wen0_s2, snp_data2_wen0_s3 ;
input   snp_hdr1_wen1_s0, snp_hdr2_wen1_s1, snp_data1_wen1_s2, snp_data2_wen1_s3 ;
input	snpctl_wr_ptr;
input	snpctl_rd_ptr;
input	[1:0]	rdmad_wr_entry_s2;

wire	[-1:0]	; 
wire	[`JBI_HDR_SZ-1:0]	instr1; 
wire	[39:0]	addr0; 
wire	[39:0]	addr1; 
wire	[63:0]	data0;
wire	[63:0]	data1;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_; 
wire	[-1:0]	; 
wire	[39:0]	addr0; 
wire	[39:0]	addr1; 
wire	[63:0]	data0;
wire	[63:0]	data1;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_; 
wire	[39:0]	; 
wire	[39:0]	addr1; 
wire	[63:0]	data0;
wire	[63:0]	data1;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_; 
wire	[39:0]	; 
wire	[63:0]	data0;
wire	[63:0]	data1;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_; 
wire	[63:0]	;
wire	[63:0]	data1;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_;
wire	[63:0]	;

wire	snpctl_rd_ptr_d1, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_;

wire	, snpctl_rd_ptr_d1_1, snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_, , snpctl_rd_ptr_d1_2, snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_, , snpctl_rd_ptr_d1_3 ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_,  ;

wire	snpctl_rd_ptr_d1_4;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_ ;

wire	;

//  data path is 92 bits wide.
//  address = 40 bits
//  header  = 20 bits
//  data    = 64 bits/2 

// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-4:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_1  (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_;



clken_buf    (.clk(clk_1), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_  (.clk(), .rclk(rclk), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_), .rclk(), .enb_l(~snp_hdr1_wen0_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_), .enb_l(~), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_), .tmb_l(~));
dff_s   #(`JBI_HDR_SZ-3) ff_instr0    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_));
dff_s   #(-3)     (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_1),
                	.q(instr0[`JBI_HDR_SZ-4:0]), 
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_2  (.clk(clk_2), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr0_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_2),
			.q(instr0[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());


// dffe   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(instr0[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr0_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_1),
			.q(instr0[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen0_s0), .q(addr0[39:32]), 
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr0_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_1),
                	.q(addr0[39:32]), 
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen0_s1), .q(addr0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_4  (.clk(clk_4), .rclk(rclk), .enb_l(~snp_hdr2_wen0_s1), .tmb_l(~se));
dff_s   #(32) ff_addr0_2    (.din(jbi_req_buf[31:0]), .clk(clk_4),
                	.q(addr0[31:0]), 
			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen0_s2), .q(data0[63:32]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_5  (.clk(clk_5), .rclk(rclk), .enb_l(~snp_data1_wen0_s2), .tmb_l(~se));
dff_s   #(32) ff_data0_1    (.din(jbi_req_buf[31:0]), .clk(clk_5),
                	.q(data0[63:32]), 
			.se(se), .si(), .so());


// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen0_s3), .q(data0[31:0]), 
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_6  (.clk(clk_6), .rclk(rclk), .enb_l(~snp_data2_wen0_s3), .tmb_l(~se));
dff_s   #(32) ff_data0_2    (.din(jbi_req_buf[31:0]), .clk(clk_6),
                	.q(data0[31:0]), 
			.se(se), .si(), .so());


// In cycle 1 write 19 bits of header and 8 bits of address.
// Header = wr64 wr8 rd CTAG<11:0> RSVD SZ<2:0> 
// cycle s1

// dffe   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-4:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_7  (.clk(clk_7), .rclk(rclk), .enb_l(~snp_hdr1_wen1_s0), .tmb_l(~se));
dff_s   #(`JBI_HDR_SZ-3) ff_instr1    (.din(jbi_req_buf[`JBI_RQ_WR64:`JBI_SZ_LO]), .clk(clk_7),
                	.q(instr1[`JBI_HDR_SZ-4:0]),
			.se(se), .si(), .so());

// dffe   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_8  (.clk(clk_8), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(2)		ff_instr1_entry ( .din(rdmad_wr_entry_s2[1:0]), .clk(clk_8),
			.q(instr1[`JBI_HDR_SZ-2:`JBI_HDR_SZ-3]),
                        .se(se), .si(), .so());

// dffe   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(instr1[`JBI_HDR_SZ-1]),
// 			   .se(se), .si(), .so());
dff_s   #(1)		ff_instr1_poison ( .din(jbi_req_buf[`JBI_RQ_POISON]), .clk(clk_7),
			.q(instr1[`JBI_HDR_SZ-1]),
                        .se(se), .si(), .so());


// dffe   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(rclk),
// 			   .en(snp_hdr1_wen1_s0), .q(addr1[39:32]),
// 			   .se(se), .si(), .so());
dff_s   #(8)  ff_addr1_1    (.din(jbi_req_buf[`JBI_ADDR_HI:`JBI_ADDR_LO]), .clk(clk_7),
                	.q(addr1[39:32]),
			.se(se), .si(), .so());

// 32 bits of addr <31:0>
// cycle s2
// dffe   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_hdr2_wen1_s1), .q(addr1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_10  (.clk(clk_10), .rclk(rclk), .enb_l(~snp_hdr2_wen1_s1), .tmb_l(~se));
dff_s   #(32) ff_addr1_2    (.din(jbi_req_buf[31:0]), .clk(clk_10),
                        .q(addr1[31:0]),
 			.se(se), .si(), .so());

// 32 bits of data <63:32>
// cycle s3
// dffe   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data1_wen1_s2), .q(data1[63:32]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_11  (.clk(clk_11), .rclk(rclk), .enb_l(~snp_data1_wen1_s2), .tmb_l(~se));
dff_s   #(32) ff_data1_1    (.din(jbi_req_buf[31:0]), .clk(clk_11),
                        .q(data1[63:32]),
                        .se(se), .si(), .so());

// 32 bits of data <31:0>
// cycle s4
// dffe   #(32) ff_data1_2    (.din(jbi_req_buf[31:0]), .clk(rclk),
// 			   .en(snp_data2_wen1_s3), .q(data1[31:0]),
// 			   .se(se), .si(), .so());
clken_buf  ckbuf_12  (.clk(clk_12), .rclk(rclk), .enb_l(~snp_data2_wen1_s3), .tmb_l(~se));
dff_    (.din(