
module sync_pulse_synchronizer (
      sync_out, so, 
      async_in, gclk, rclk, si, se
   );

   output sync_out;
   output so;
   
   input  async_in;
   input  gclk;
   input  rclk;
   input  si;
   input  se;

   wire   ;
   wire   so_rptr;
   wire   so_lockup;

   // Flop drive strengths to be adjusted as necessary
   
   bw_u1_soff_8x repeater (
                           .q (pre_sync_out),
                           .so (so_rptr),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
;
   wire   ;
   wire   so_lockup;

   // Flop drive strengths to be adjusted as necessary
   
   bw_u1_soff_8x repeater (
                           .q (pre_sync_out),
                           .so (so_rptr),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
;
   wire   ;

   // Flop drive strengths to be adjusted as necessary
   
   bw_u1_soff_8x repeater (
                           .q (pre_sync_out),
                           .so (so_rptr),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
;

      
   bw_u1_soff_8x  (
                           .q (pre_sync_out),
                           .so (so_rptr),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
 (
                           .q (),
                           .so (so_rptr),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                           .so (),
                           .ck (gclk),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                           .ck (),
                           .d (async_in),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                           .d (),	
                           .se (se),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),	
                           .se (),
                           .sd (si)
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                           .sd ()
			   );

   bw_u1_scanl_2x lockup (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
)
			   );

   bw_u1_scanl_2x  (
			   .so (so_lockup),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
 (
			   .so (),
			   .sd (so_rptr),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
			   .sd (),
			   .ck (gclk)
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
			   .ck ()
			   );

   bw_u1_soff_8x syncff (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
)
			   );

   bw_u1_soff_8x  (
                         .q (sync_out),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
 (
                         .q (),
                         .so (so),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                         .so (),
                         .ck (rclk),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                         .ck (),
                         .d (pre_sync_out),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                         .d (),
                         .se (se),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                         .se (),
                         .sd (so_lockup)
			 );

endmodule // sync_pulse_synchronizer
),
                         .sd ()
			 );

endmodule // sync_pulse_synchronizer
)
			 );

endmodule 