
	 			


module iobdg_1r1w_rf32 (
      dout, 
      rd_clk, wr_clk, rd_a, wr_a, din, wen_l
   );

   parameter REG_WIDTH = 64;

   
   input                     rd_clk;
   input                     wr_clk;
   
   input [4:0] 		     rd_a;
   input [4:0] 		     wr_a;
   input [REG_WIDTH-1:0]     din;
   input 		     wen_l;
   
   output [REG_WIDTH-1:0]    dout;

   wire [4:0] 		     ;
   wire [REG_WIDTH-1:0]      din_d1;
   wire 		     wen_l_d1;
   wire [31:0] 		     wr_a_dec_d1;
   wire [31:0] 		     wen_dec_d1;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      din_d1;
   wire 		     wen_l_d1;
   wire [31:0] 		     wr_a_dec_d1;
   wire [31:0] 		     wen_dec_d1;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire 		     wen_l_d1;
   wire [31:0] 		     wr_a_dec_d1;
   wire [31:0] 		     wen_dec_d1;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire 		     ;
   wire [31:0] 		     wr_a_dec_d1;
   wire [31:0] 		     wen_dec_d1;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [31:0] 		     ;
   wire [31:0] 		     wen_dec_d1;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [31:0] 		     ;
   wire [REG_WIDTH-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line0;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line1;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line2;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line3;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line4;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line5;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line6;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line7;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line8;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line9;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line10;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line11;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line12;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line13;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line14;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line15;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line16;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line17;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line18;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line19;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line20;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line21;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line22;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line23;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line24;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line25;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line26;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line27;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line28;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line29;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line30;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [REG_WIDTH-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [-1:0]      line31;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l-1:0]      ;
   wire [4:0] 		     rd_a_d1;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   wire [4:0] 		     ;
   reg [REG_WIDTH-1:0] 	     dout;
   
   
////////////////////////////////////////////////////////////////////////
// Code starts here
////////////////////////////////////////////////////////////////////////
   // Flop write address, write data and write enable
   dff_ns #(5) wr_a_d1_ff (.din(wr_a),
			   .clk(wr_clk),
			   .q(wr_a_d1));

   dff_ns #(REG_WIDTH) din_d1_ff (.din(din),
				  .clk(wr_clk),
				  .q(din_d1));

   dff_ns #(1) wen_l_d1_ff (.din(wen_l),
			    .clk(wr_clk),
			    .q(wen_l_d1));

   assign 	     wr_a_dec_d1 = 1'b1 << wr_a_d1;
   
   assign 	     wen_dec_d1 = {32{~wen_l_d1}} & wr_a_dec_d1;

   
   // FF's for storage
   dffe_ns #(REG_WIDTH) line0_ff (.din(din_d1),.en(wen_dec_d1[0]),.clk(wr_clk),.q(line0));
   dffe_ns #(REG_WIDTH) line1_ff (.din(din_d1),.en(wen_dec_d1[1]),.clk(wr_clk),.q(line1));
   dffe_ns #(REG_WIDTH) line2_ff (.din(din_d1),.en(wen_dec_d1[2]),.clk(wr_clk),.q(line2));
   dffe_ns #(REG_WIDTH) line3_ff (.din(din_d1),.en(wen_dec_d1[3]),.clk(wr_clk),.q(line3));
   dffe_ns #(REG_WIDTH) line4_ff (.din(din_d1),.en(wen_dec_d1[4]),.clk(wr_clk),.q(line4));
   dffe_ns #(REG_WIDTH) line5_ff (.din(din_d1),.en(wen_dec_d1[5]),.clk(wr_clk),.q(line5));
   dffe_ns #(REG_WIDTH) line6_ff (.din(din_d1),.en(wen_dec_d1[6]),.clk(wr_clk),.q(line6));
   dffe_ns #(REG_WIDTH) line7_ff (.din(din_d1),.en(wen_dec_d1[7]),.clk(wr_clk),.q(line7));
   dffe_ns #(REG_WIDTH) line8_ff (.din(din_d1),.en(wen_dec_d1[8]),.clk(wr_clk),.q(line8));
   dffe_ns #(REG_WIDTH) line9_ff (.din(din_d1),.en(wen_dec_d1[9]),.clk(wr_clk),.q(line9));
   dffe_ns #(REG_WIDTH) line10_ff (.din(din_d1),.en(wen_dec_d1[10]),.clk(wr_clk),.q(line10));
   dffe_ns #(REG_WIDTH) line11_ff (.din(din_d1),.en(wen_dec_d1[11]),.clk(wr_clk),.q(line11));
   dffe_ns #(REG_WIDTH) line12_ff (.din(din_d1),.en(wen_dec_d1[12]),.clk(wr_clk),.q(line12));
   dffe_ns #(REG_WIDTH) line13_ff (.din(din_d1),.en(wen_dec_d1[13]),.clk(wr_clk),.q(line13));
   dffe_ns #(REG_WIDTH) line14_ff (.din(din_d1),.en(wen_dec_d1[14]),.clk(wr_clk),.q(line14));
   dffe_ns #(REG_WIDTH) line15_ff (.din(din_d1),.en(wen_dec_d1[15]),.clk(wr_clk),.q(line15));
   dffe_ns #(REG_WIDTH) line16_ff (.din(din_d1),.en(wen_dec_d1[16]),.clk(wr_clk),.q(line16));
   dffe_ns #(REG_WIDTH) line17_ff (.din(din_d1),.en(wen_dec_d1[17]),.clk(wr_clk),.q(line17));
   dffe_ns #(REG_WIDTH) line18_ff (.din(din_d1),.en(wen_dec_d1[18]),.clk(wr_clk),.q(line18));
   dffe_ns #(REG_WIDTH) line19_ff (.din(din_d1),.en(wen_dec_d1[19]),.clk(wr_clk),.q(line19));
   dffe_ns #(REG_WIDTH) line20_ff (.din(din_d1),.en(wen_dec_d1[20]),.clk(wr_clk),.q(line20));
   dffe_ns #(REG_WIDTH) line21_ff (.din(din_d1),.en(wen_dec_d1[21]),.clk(wr_clk),.q(line21));
   dffe_ns #(REG_WIDTH) line22_ff (.din(din_d1),.en(wen_dec_d1[22]),.clk(wr_clk),.q(line22));
   dffe_ns #(REG_WIDTH) line23_ff (.din(din_d1),.en(wen_dec_d1[23]),.clk(wr_clk),.q(line23));
   dffe_ns #(REG_WIDTH) line24_ff (.din(din_d1),.en(wen_dec_d1[24]),.clk(wr_clk),.q(line24));
   dffe_ns #(REG_WIDTH) line25_ff (.din(din_d1),.en(wen_dec_d1[25]),.clk(wr_clk),.q(line25));
   dffe_ns #(REG_WIDTH) line26_ff (.din(din_d1),.en(wen_dec_d1[26]),.clk(wr_clk),.q(line26));
   dffe_ns #(REG_WIDTH) line27_ff (.din(din_d1),.en(wen_dec_d1[27]),.clk(wr_clk),.q(line27));
   dffe_ns #(REG_WIDTH) line28_ff (.din(din_d1),.en(wen_dec_d1[28]),.clk(wr_clk),.q(line28));
   dffe_ns #(REG_WIDTH) line29_ff (.din(din_d1),.en(wen_dec_d1[29]),.clk(wr_clk),.q(line29));
   dffe_ns #(REG_WIDTH) line30_ff (.din(din_d1),.en(wen_dec_d1[30]),.clk(wr_clk),.q(line30));
   dffe_ns #(REG_WIDTH) line31_ff (.din(din_d1),.en(wen_dec_d1[31]),.clk(wr_clk),.q(line31));

   // Flop read address
   dff_ns #(5) rd_a_d1_ff (.din(rd_a),
			   .clk(rd_clk),
			   .q(rd_a_d1));

   // Mux out read data
   always @(/*AUTOSENSE*/line0 or line1 or line10 or line11 or line12
	    or line13 or line14 or line15 or line16 or line17
	    or line18 or line19 or line2 or line20 or line21 or line22
	    or line23 or line24 or line25 or line26 or line27
	    or line28 or line29 or line3 or line30 or line31 or line4
	    or line5 or line6 or line7 or line8 or line9 or rd_a_d1) begin
      case (rd_a_d1)
	5'd0: dout = line0;
	5'd1: dout = line1;
	5'd2: dout = line2;
	5'd3: dout = line3;
	5'd4: dout = line4;
	5'd5: dout = line5;
	5'd6: dout = line6;
	5'd7: dout = line7;
	5'd8: dout = line8;
	5'd9: dout = line9;
	5'd10: dout = line10;
	5'd11: dout = line11;
	5'd12: dout = line12;
	5'd13: dout = l;
   reg