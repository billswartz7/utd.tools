module scdata_efuse_hdr (
      so, scdata_efc_fuse_data, fuse_red_data, fuse_red_subbank0_dshift, 
   fuse_red_subbank1_dshift, fuse_red_subbank2_dshift, 
   fuse_red_subbank3_dshift, fuse_red_rid, fuse_red_read_shift, 
      rclk, se, si, efc_scdata_fuse_clk1, efc_scdata_fuse_clk2, 
   efc_scdata_fuse_ashift, efc_scdata_fuse_dshift, 
   efc_scdata_fuse_data, red_fuse_data, arst_l, testmode_l
   );


   input           rclk, se, si;
   output          so;
      input           efc_scdata_fuse_clk1;
   input           efc_scdata_fuse_clk2;
   input           efc_scdata_fuse_ashift;
   input           efc_scdata_fuse_dshift;
   input           efc_scdata_fuse_data;   
      input           red_fuse_data;    input           arst_l;                         input           testmode_l;          
      output          scdata_efc_fuse_data;    output          fuse_red_data;    output [5:0]    fuse_red_subbank0_dshift;    output [5:0]    fuse_red_subbank1_dshift;    output [5:0]    fuse_red_subbank2_dshift;    output [5:0]    fuse_red_subbank3_dshift;    output [2:0]    fuse_red_rid;    output          fuse_red_read_shift;     
         
            wire            ;
   wire            int_clk2;
   wire            int_scanin;  // !! hook up to 1st flop in scan chain !!

   assign          int_clk1 = testmode_l ? efc_scdata_fuse_clk1 : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            int_scanin;  // !! hook up to 1st flop in scan chain !!

   assign          int_clk1 = testmode_l ? efc_scdata_fuse_clk1 : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;  // !! hook up to 1st flop in scan chain !!

   assign          int_clk1 = testmode_l ? efc_scdata_fuse_clk1 : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;  
   assign           = testmode_l ? efc_scdata_fuse_clk1 : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 =  ? efc_scdata_fuse_clk1 : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 ?  : rclk;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 : ;
   assign          int_clk2 = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   assign           = testmode_l ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 =  ? efc_scdata_fuse_clk2 : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 ?  : rclk;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 : ;

   bw_u1_scanlg_2x si_lockup(.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;

   bw_u1_scanlg_2x (.so(int_scanin), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
(.so(), .sd(si), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .sd(), .ck(rclk), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .ck(), .se(se));

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se());

   //------------------------------------------------------------------------
   //  Shift registers
   //------------------------------------------------------------------------
   wire [8:0]      addr_shft_nxt;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
));

            wire [8:0]      ;
   wire [8:0]      addr_shft_ff;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [8:0]      ;
   wire            addr_shft_en;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            wren_bit;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            fuse_datain_ph1;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            fuse_dataout_ph2;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;

   dff_s #(9) addr_shft_reg (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;

   dff_s #(9)  (.din(addr_shft_nxt),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(),
                           .q(addr_shft_ff), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
),
                           .q(), .clk(ashft_clk1),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(),
                           .se(se), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
),
                           .se(), .si(), .so());
   clken_buf  ashft_clk1_buf  (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   clken_buf    (.clk(ashft_clk1), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
  (.clk(), .rclk(int_clk1), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .rclk(), .enb_l(~addr_shft_en), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .enb_l(~), .tmb_l(testmode_l));
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .tmb_l());
   
   dff_s  #(3) rid_reg       (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
));
   
   dff_s  #(3)        (.din(addr_shft_ff[3:1]), .q(fuse_red_rid[2:0]), 
                            .clk(int_clk2), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
       (.din([3:1]), .q([2:0]), 
                            .clk(), .se(se), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());

   assign          wren_bit = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());

   assign           = addr_shft_ff[0];
   dff_s #(1) datain_dly1_reg (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 = [0];
   dff_s #(1)  (.din(efc_scdata_fuse_data), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(fuse_datain_ph1), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                            .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                            .clk(), .se(se), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dff_s #(1) datain_dly2_reg (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dff_s #(1)  (.din(fuse_datain_ph1), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(fuse_red_data), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                            .clk(int_clk2), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                            .clk(), .se(se), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   
   dff_s #(1) dataout_dly1_reg (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   
   dff_s #(1)  (.din(red_fuse_data), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(fuse_dataout_ph2), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                             .clk(int_clk1), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                             .clk(), .se(se), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dff_s #(1) dataout_dly2_reg (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dff_s #(1)  (.din(fuse_dataout_ph2), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(scdata_efc_fuse_data), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                             .clk(int_clk1), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                             .clk(), .se(se), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   
   //------------------------------------------------------------------------
   //  Shift control
   //------------------------------------------------------------------------
   wire            dshift_dly1_ff;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   
            wire            ;
   wire            dshift_dly3_ff;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            wren_ph1;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire            rden_ph1;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire            ;
   wire [5:0]      wren0;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire [5:0]      wren1;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire [5:0]      wren2;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire [5:0]      wren3;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;   
   wire [5:0]      subbank0_dshift_ff;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;   
   wire [5:0]      ;
   wire [5:0]      subbank1_dshift_ff;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire [5:0]      subbank2_dshift_ff;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire [5:0]      subbank3_dshift_ff;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire [5:0]      ;
   wire 	   read_shift_ff;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   wire 	   ;
   assign          addr_shft_en = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   assign           = efc_scdata_fuse_ashift;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 = ;
   assign          addr_shft_nxt = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   assign           = {addr_shft_ff[7:0], efc_scdata_fuse_data};
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 = {[7:0], };
   
   dffrl_async #(1) dshift_dly1_reg (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
};
   
   dffrl_async #(1)  (.din(efc_scdata_fuse_dshift), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(dshift_dly1_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                             .rst_l(), .clk(int_clk1), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dffrl_async #(1) dshift_dly3_reg (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dffrl_async #(1)  (.din(dshift_dly1_ff), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(dshift_dly3_ff), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(), 
                             .rst_l(arst_l), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), 
                             .rst_l(), .clk(int_clk1), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   assign wren_ph1 = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   assign  = (dshift_dly1_ff || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 = ( || dshift_dly3_ff)
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 || )
                              && wren_bit;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
)
                              && ;
   assign rden_ph1 = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   assign  = dshift_dly1_ff && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 =  && !wren_bit;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 && !;

   dffrl_async #(6) wren0_reg (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;

   dffrl_async #(6)  (.din(wren0[5:0]), .q(subbank0_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din([5:0]), .q([5:0]), 
                       .rst_l(), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dffrl_async #(6) wren1_reg (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dffrl_async #(6)  (.din(wren1[5:0]), .q(subbank1_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din([5:0]), .q([5:0]), 
                       .rst_l(), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dffrl_async #(6) wren2_reg (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dffrl_async #(6)  (.din(wren2[5:0]), .q(subbank2_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din([5:0]), .q([5:0]), 
                       .rst_l(), .clk(int_clk2), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   dffrl_async #(6) wren3_reg (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   dffrl_async #(6)  (.din(wren3[5:0]), .q(subbank3_dshift_ff[5:0]), 
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din([5:0]), .q([5:0]), 
                       .rst_l(), .clk(int_clk2), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());

   dffrl_async #(1) rden_reg (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());

   dffrl_async #(1)  (.din(rden_ph1), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 (.din(), .q(read_shift_ff),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .q(),
                       .rst_l(arst_l), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
),
                       .rst_l(), .clk(int_clk2), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .clk(), .se(se), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .se(), .si(), .so());
   
   assign fuse_red_subbank0_dshift[5:0] = subbank0_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
), .si(), .so());
   
   assign [5:0] = [5:0] & {6{}};
   assign fuse_red_subbank1_dshift[5:0] = subbank1_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
}};
   assign [5:0] = [5:0] & {6{}};
   assign fuse_red_subbank2_dshift[5:0] = subbank2_dshift_ff[5:0] & {6{testmode_l}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
}};
   assign [5:0] = [5:0] & {6{}};
   assign fuse_red_subbank3_dshift[5:0] = subbank3_dshift_ff[5:0] & {6{testmode_l}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
}};
   assign [5:0] = [5:0] & {6{}};

   assign fuse_red_read_shift = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
}};

   assign  = read_shift_ff & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 =  & testmode_l;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
 & ;

   //------------------------------------------------------------------------
   //  Subbank decode
   //------------------------------------------------------------------------

   wire [3:0] subbank;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;

         
   wire [3:0] ;
   
   assign     subbank[0] = ~addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[1] = ~addr_shft_ff[8] && addr_shft_ff[7];
   assign     subbank[2] = addr_shft_ff[8] && ~addr_shft_ff[7];
   assign     subbank[3] = addr_shft_ff[8] && addr_shft_ff[7];

   //------------------------------------------------------------------------
   //  RID decode
   //------------------------------------------------------------------------
   
   wire [5:0] rid;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   
   assign     [0] = ~[8] && ~[7];
   assign     [1] = ~[8] && [7];
   assign     [2] = [8] && ~[7];
   assign     [3] = [8] && [7];

            
   wire [5:0] ;
   
   assign     rid[0] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[1] = ~addr_shft_ff[6] && ~addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[2] = ~addr_shft_ff[6] && addr_shft_ff[5] && ~addr_shft_ff[4];
   assign     rid[3] = ~addr_shft_ff[6] && addr_shft_ff[5] && addr_shft_ff[4];
   assign     rid[4] = addr_shft_ff[6] && ~addr_shft_ff[5] && ~addr_shft_ff[4];
;
   
   assign     [0] = ~[6] && ~[5] && ~[4];
   assign     [1] = ~[6] && ~[5] && [4];
   assign     [2] = ~[6] && [5] && ~[4];
   assign     [3] = ~[6] && [5] && [4];
   assign     [4] = [6] && ~[5] && ~[4];
   assign     [5] = [6] && ~[5] && [4];

         
   assign     [0] =  && subbank[0] && rid[0];
   assign     wren0[1] = wren_ph1 && subbank[0] && rid[1];
   assign     wren0[2] = wren_ph1 && subbank[0] && rid[2];
   assign     wren0[3] = wren_ph1 && subbank[0] && rid[3];
   assign     wren0[4] = wren_ph1 && subbank[0] && rid[4];
   assign     wren0[5] = wren_ph1 && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [0];
   assign     [1] =  && subbank[0] && rid[1];
   assign     wren0[2] = wren_ph1 && subbank[0] && rid[2];
   assign     wren0[3] = wren_ph1 && subbank[0] && rid[3];
   assign     wren0[4] = wren_ph1 && subbank[0] && rid[4];
   assign     wren0[5] = wren_ph1 && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [1];
   assign     [2] =  && subbank[0] && rid[2];
   assign     wren0[3] = wren_ph1 && subbank[0] && rid[3];
   assign     wren0[4] = wren_ph1 && subbank[0] && rid[4];
   assign     wren0[5] = wren_ph1 && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [2];
   assign     [3] =  && subbank[0] && rid[3];
   assign     wren0[4] = wren_ph1 && subbank[0] && rid[4];
   assign     wren0[5] = wren_ph1 && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [3];
   assign     [4] =  && subbank[0] && rid[4];
   assign     wren0[5] = wren_ph1 && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [4];
   assign     [5] =  && subbank[0] && rid[5];

   assign     wren1[0] = wren_ph1 && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [0] && [5];

   assign     [0] =  && subbank[1] && rid[0];
   assign     wren1[1] = wren_ph1 && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [0];
   assign     [1] =  && subbank[1] && rid[1];
   assign     wren1[2] = wren_ph1 && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [1];
   assign     [2] =  && subbank[1] && rid[2];
   assign     wren1[3] = wren_ph1 && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [2];
   assign     [3] =  && subbank[1] && rid[3];
   assign     wren1[4] = wren_ph1 && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [3];
   assign     [4] =  && subbank[1] && rid[4];
   assign     wren1[5] = wren_ph1 && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [4];
   assign     [5] =  && subbank[1] && rid[5];

   assign     wren2[0] = wren_ph1 && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [1] && [5];

   assign     [0] =  && subbank[2] && rid[0];
   assign     wren2[1] = wren_ph1 && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [0];
   assign     [1] =  && subbank[2] && rid[1];
   assign     wren2[2] = wren_ph1 && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [1];
   assign     [2] =  && subbank[2] && rid[2];
   assign     wren2[3] = wren_ph1 && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [2];
   assign     [3] =  && subbank[2] && rid[3];
   assign     wren2[4] = wren_ph1 && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [3];
   assign     [4] =  && subbank[2] && rid[4];
   assign     wren2[5] = wren_ph1 && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [4];
   assign     [5] =  && subbank[2] && rid[5];

   assign     wren3[0] = wren_ph1 && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [2] && [5];

   assign     [0] =  && subbank[3] && rid[0];
   assign     wren3[1] = wren_ph1 && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [0];
   assign     [1] =  && subbank[3] && rid[1];
   assign     wren3[2] = wren_ph1 && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [1];
   assign     [2] =  && subbank[3] && rid[2];
   assign     wren3[3] = wren_ph1 && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [2];
   assign     [3] =  && subbank[3] && rid[3];
   assign     wren3[4] = wren_ph1 && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [3];
   assign     [4] =  && subbank[3] && rid[4];
   assign     wren3[5] = wren_ph1 && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [4];
   assign     [5] =  && subbank[3] && rid[5];
   
endmodule // scdata_efuse_hdr
 && [3] && [5];
   
endmodule 