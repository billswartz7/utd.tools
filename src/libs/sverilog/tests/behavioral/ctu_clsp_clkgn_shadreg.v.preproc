 
 

module ctu_clsp_clkgn_shadreg (
jsync_shadreg_rx2, jsync_shadreg_rx1, jsync_shadreg_rx0, 
jsync_shadreg_tx2, jsync_shadreg_tx1, jsync_shadreg_tx0, 
jsync_shadreg_period, jsync_shadreg_init, dsync_shadreg_rx2, 
dsync_shadreg_rx1, dsync_shadreg_rx0, dsync_shadreg_tx2, 
dsync_shadreg_tx1, dsync_shadreg_tx0, dsync_shadreg_period, 
dsync_shadreg_init, shadreg_cdiv_vec, shadreg_cdiv_0, 
shadreg_ddiv_vec, shadreg_ddiv_0, shadreg_jdiv_vec, shadreg_jdiv_0, 
cmp_grst_cl_l, cmp_dbginit_cl_l, a_grst_dl, a_dbginit_dl, 
de_grst_dsync_edge_dl, de_grst_jsync_edge, de_dbginit_dsync_edge_dl, 
de_dbginit_jsync_edge, coin_cnt_en, coin_cnt_ld, coin_edge, 
shadreg_div_jmult, shadreg_div_dmult, shadreg_div_cmult, 
io_pwron_rst_l, se, start_clk_early_jl, start_clk_cl, cmp_clk, 
jbus_tx_sync, ctu_dram_tx_sync_early, a_dbginit_cl, de_dbginit_cl, 
de_grst_cl, a_grst_cl, dram_a_grst_cl, update_shadow_cl, 
jtag_ctu_bypass_mode, jsync_reg_rx2, jsync_reg_rx1, jsync_reg_rx0, 
jsync_reg_tx2, jsync_reg_tx1, jsync_reg_tx0, jsync_reg_period, 
jsync_reg_init, dsync_reg_rx2, dsync_reg_rx1, dsync_reg_rx0, 
dsync_reg_tx2, dsync_reg_tx1, dsync_reg_tx0, dsync_reg_period, 
dsync_reg_init, reg_div_cmult, reg_div_jmult, reg_div_dmult, 
reg_cdiv_0, reg_cdiv_vec, reg_ddiv_0, reg_ddiv_vec, reg_jdiv_0, 
reg_jdiv_vec
);

      input io_pwron_rst_l;
   input se;
   input start_clk_early_jl;
   input start_clk_cl;    
   input cmp_clk;

   input jbus_tx_sync;    
   input  ctu_dram_tx_sync_early;    

      input a_dbginit_cl;
   input de_dbginit_cl;
   input de_grst_cl;
   input a_grst_cl;
   input dram_a_grst_cl;
   input update_shadow_cl;
   input jtag_ctu_bypass_mode;

      input [1:0] jsync_reg_rx2;
   input [1:0] jsync_reg_rx1;
   input [1:0] jsync_reg_rx0;
   input [4:0] jsync_reg_tx2;
   input [4:0] jsync_reg_tx1;
   input [4:0] jsync_reg_tx0;
   input [4:0] jsync_reg_period;
   input [4:0] jsync_reg_init;

   input [1:0] dsync_reg_rx2;
   input [1:0] dsync_reg_rx1;
   input [1:0] dsync_reg_rx0;
   input [4:0] dsync_reg_tx2;
   input [4:0] dsync_reg_tx1;
   input [4:0] dsync_reg_tx0;
   input [4:0] dsync_reg_period;
   input [4:0] dsync_reg_init;

   input [13:0]  reg_div_cmult;
   input [9:0]  reg_div_jmult;
   input [9:0]  reg_div_dmult;


   input  reg_cdiv_0;
   input  [14:0] reg_cdiv_vec;
   input  reg_ddiv_0;
   input  [14:0] reg_ddiv_vec;
   input  reg_jdiv_0;
   input  [14:0] reg_jdiv_vec;

   
   output [1:0] jsync_shadreg_rx2;
   output [1:0] jsync_shadreg_rx1;
   output [1:0] jsync_shadreg_rx0;
   output [4:0] jsync_shadreg_tx2;
   output [4:0] jsync_shadreg_tx1;
   output [4:0] jsync_shadreg_tx0;
   output [4:0] jsync_shadreg_period;
   output [4:0] jsync_shadreg_init;

   output [1:0] dsync_shadreg_rx2;
   output [1:0] dsync_shadreg_rx1;
   output [1:0] dsync_shadreg_rx0;
   output [4:0] dsync_shadreg_tx2;
   output [4:0] dsync_shadreg_tx1;
   output [4:0] dsync_shadreg_tx0;
   output [4:0] dsync_shadreg_period;
   output [4:0] dsync_shadreg_init;

   output [14:0] shadreg_cdiv_vec;
   output shadreg_cdiv_0;
   output [14:0] shadreg_ddiv_vec;
   output shadreg_ddiv_0;
   output [14:0] shadreg_jdiv_vec;
   output shadreg_jdiv_0;

       output cmp_grst_cl_l;
   output cmp_dbginit_cl_l;

   output a_grst_dl;
   output a_dbginit_dl;
   output de_grst_dsync_edge_dl;
   output de_grst_jsync_edge;
   output de_dbginit_dsync_edge_dl;
   output de_dbginit_jsync_edge;

  
   output      coin_cnt_en;
   output      coin_cnt_ld;
   output      coin_edge;

   output [9:0] shadreg_div_jmult;
   output [9:0] shadreg_div_dmult;
   output [13:0] shadreg_div_cmult;


   wire ;
   // rx & tx sync pulse

   wire coin_cnt_1st_en;
   wire coin_cnt_en;
   wire coin_cnt_ld;


   // lcm logic

   wire cnt_ld;
   wire [13:0] lcm_cnt_minus_1;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   
   wire ;
   wire coin_cnt_en;
   wire coin_cnt_ld;


   // lcm logic

   wire cnt_ld;
   wire [13:0] lcm_cnt_minus_1;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire coin_cnt_ld;


   // lcm logic

   wire cnt_ld;
   wire [13:0] lcm_cnt_minus_1;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;


   // lcm logic

   wire cnt_ld;
   wire [13:0] lcm_cnt_minus_1;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;


   
   wire ;
   wire [13:0] lcm_cnt_minus_1;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [13:0] ;
   wire [13:0] lcm_cnt_nxt;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [13:0] ;
   wire [13:0] lcm_cnt;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [13:0] ;
   wire lcm_cnt_zero;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire grst_en_window_nxt;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire grst_en_window;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire cmp_grst_cl_l_nxt;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire dbginit_en_window_nxt;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire dbginit_en_window;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire cmp_dbginit_cl_l_nxt;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;


   // shadow registers

   wire jsync_update_shadow_cl;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;


   
   wire ;
   wire dsync_update_shadow_cl;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire [1:0] jsync_shadreg_rx2_nxt;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [1:0] jsync_shadreg_rx1_nxt;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [1:0] jsync_shadreg_rx0_nxt;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [4:0] jsync_shadreg_tx2_nxt;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] jsync_shadreg_tx1_nxt;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] jsync_shadreg_tx0_nxt;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] jsync_shadreg_period_nxt;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] jsync_shadreg_init_nxt;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [1:0] dsync_shadreg_rx2_nxt;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [1:0] dsync_shadreg_rx1_nxt;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [1:0] dsync_shadreg_rx0_nxt;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [1:0] ;
   wire [4:0] dsync_shadreg_tx2_nxt;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] dsync_shadreg_tx1_nxt;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] dsync_shadreg_tx0_nxt;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] dsync_shadreg_period_nxt;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;
   wire [4:0] dsync_shadreg_init_nxt;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [4:0] ;

   wire update_shadow_1sht;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;

   wire ;
   wire update_shadow_cl_dly_l;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire mult_update_shadow_cl;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire [13:0] shadreg_div_cmult_nxt;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [13:0] ;
   wire [13:0] shadreg_div_cmult;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [13:0] ;
   wire [9:0] shadreg_div_dmult_nxt;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [9:0] ;
   wire [9:0] shadreg_div_jmult_nxt;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [9:0] ;
   wire [9:0] shadreg_div_jmult;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [9:0] ;
   wire [9:0] shadreg_div_dmult;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [9:0] ;

   wire div_update_shadow_cl;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;

   wire ;
   wire shadreg_cdiv_0_nxt;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire shadreg_cdiv_0;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire shadreg_jdiv_0_nxt;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire shadreg_jdiv_0;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire shadreg_ddiv_0_nxt;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire shadreg_ddiv_0;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;

   wire [14:0] shadreg_cdiv_vec_nxt;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;

   wire [14:0] ;
   wire [14:0] shadreg_cdiv_vec;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_cdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_jdiv_vec_nxt;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_jdiv_vec;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_jdiv_vec_pre;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_jdiv_vec_byp;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_jdiv_vec_byp_nxt;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_ddiv_vec_nxt;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_ddiv_vec;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_ddiv_vec_pre;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_ddiv_vec_byp;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;
   wire [14:0] shadreg_ddiv_vec_byp_nxt;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire [14:0] ;

   wire  ctu_dram_tx_sync_early;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;

   wire  ;
   wire coin_edge_nxt;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire de_grst_jsync_edge_nxt;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire de_grst_dsync_edge_dl_nxt;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire a_grst_dl_nxt;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire a_dbginit_dl_nxt;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire de_dbginit_jsync_edge_nxt;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;
   wire de_dbginit_dsync_edge_dl_nxt;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;
   wire ;



   // -----------------------------------------------
   // 
   //  Register input
   // 
   // -----------------------------------------------

    dff_ns  u_update_shadow_cl_dly_l(
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------;



               
    dff_ns  (
         .din (~update_shadow_cl),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------(
         .din (~),
         .clk (cmp_clk),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------),
         .clk (),
         .q(update_shadow_cl_dly_l));

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------),
         .q());

   //assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l & start_clk_cl;
   assign update_shadow_1sht = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------));

      assign  = update_shadow_cl & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------ =  & update_shadow_cl_dly_l  ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------ &   ;

    dffrl_async_ns #(4)  u_update_shadow_cl(
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------  ;

    dffrl_async_ns #(4)  (
         .din ({4{update_shadow_1sht}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------(
         .din ({4{}}),
         .clk (cmp_clk),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------}}),
         .clk (),
         .rst_l (io_pwron_rst_l),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------),
         .rst_l (),
         .q   ({jsync_update_shadow_cl,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------),
         .q   ({,
                dsync_update_shadow_cl,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------,
                ,
                mult_update_shadow_cl,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------,
                ,
                div_update_shadow_cl}));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------,
                }));

// -----------------------------------------
// 
//  Rx Tx sync pulse enable
// 
// ------------------------------}));


   
dffrl_async_ns (
		   .din (1'b1),
		   .clk (cmp_clk),
                   //.rst_l (io_pwron_rst_l),
                   .rst_l (start_clk_early_jl),
                   .q(coin_cnt_1st_en));

dffrl_async_ns u_coin_cnt_en_ff(
                  .din(coin_cnt_1st_en), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( (
		   .din (1bb),
		   .clk (),
                   //.rst_l (io_pwron_rst_l),
                   .rst_l (start_clk_early_jl),
                   .q(coin_cnt_1st_en));

dffrl_async_ns u_coin_cnt_en_ff(
                  .din(coin_cnt_1st_en), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                                      .rst_l (),
                   .q(coin_cnt_1st_en));

dffrl_async_ns u_coin_cnt_en_ff(
                  .din(coin_cnt_1st_en), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                   .q());

dffrl_async_ns u_coin_cnt_en_ff(
                  .din(coin_cnt_1st_en), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ));

dffrl_async_ns (
                  .din(coin_cnt_1st_en), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( (
                  .din(), 
                  .clk(cmp_clk),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ), 
                  .clk(),
                  .rst_l (start_clk_early_jl),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                  .rst_l (),
                  //.rst_l (io_pwron_rst_l),
                  .q(coin_cnt_en));

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                                    .q());

assign coin_cnt_ld = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ));

assign  = coin_cnt_1st_en & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  =  & ~coin_cnt_en;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  & ~;

dffsl_async_ns  u_cnt_ld(
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ;

dffsl_async_ns  (
                   .din (1'b0),
                   .clk (cmp_clk),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( (
                   .din (1bb),
                   .clk (),
                   .set_l (start_clk_early_jl),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                   .set_l (),
                   .q(cnt_ld));


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                   .q());


assign lcm_cnt_minus_1 = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ));


assign  = lcm_cnt - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  =  - 14'h0001;

assign lcm_cnt_nxt =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  - 14hh;

assign  =  cnt_ld? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  =  ? shadreg_div_cmult[13:0]:
                      (|(lcm_cnt[13:1])) ?   lcm_cnt_minus_1  :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ? [13:0]:
                      (|([13:1])) ?     :
                      shadreg_div_cmult[13:0];

dffrl_async_ns #(14) u_lcm_ff (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (   :
                      [13:0];

dffrl_async_ns #(14)  (
		   .din (lcm_cnt_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  (
		   .din (),
		   .clk (cmp_clk),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
		   .clk (),
                   .rst_l (start_clk_early_jl), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ),
                   .rst_l (), 
                   .q(lcm_cnt));

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ), 
                   .q());

assign lcm_cnt_zero =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async ( ));

assign  =  ~(|(lcm_cnt[13:1]));
assign coin_edge_nxt =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  =  ~(|([13:1]));
assign  =  (lcm_cnt == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  =  ( == `COIN_EDGE_LATENCY) & start_clk_cl;
dffrl_async_ns u_coin_edge( .din (coin_edge_nxt),
		   .clk (cmp_clk),
                   .rst_l (io_pwron_rst_l),
                   .q(coin_edge));

// -----------------------------------------
// 
//  sync edges align (LCM) for generating grst
// 
// -----------------------------------------

// -----------------------------------------
// 
//  de_grst_dsync_edge_dl open enable window in dram_gclk domain
//  de_grst_jsync_edge opens enable window in jbus_clk domain
//  same for dbginit signals
// 
// -----------------------------------------

assign de_grst_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early ? de_grst_cl: de_grst_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_grst_dsync_edge_dl (.din (de_grst_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_dsync_edge_dl));

assign de_grst_jsync_edge_nxt = (jbus_tx_sync ? de_grst_cl: de_grst_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_grst_jsync_edge (.din (de_grst_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_grst_jsync_edge));

assign de_dbginit_dsync_edge_dl_nxt = ( ctu_dram_tx_sync_early? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_dsync_edge_dl) & start_clk_cl;

dffrl_async_ns u_de_dbginit_dsync_edge_dl (.din (de_dbginit_dsync_edge_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_dsync_edge_dl));

assign de_dbginit_jsync_edge_nxt = (jbus_tx_sync? de_grst_cl | de_dbginit_cl:
                                                  de_dbginit_jsync_edge) & start_clk_cl;
dffrl_async_ns u_de_dbginit_jsync_edge (.din (de_dbginit_jsync_edge_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(de_dbginit_jsync_edge));


// -----------------------------------------
// 
//  grst_l signal only allow to de-assert when grst_en_window is 1
// 
// -----------------------------------------

assign grst_en_window_nxt = de_grst_dsync_edge_dl & de_grst_jsync_edge & lcm_cnt_zero ? 1'b1:
                            lcm_cnt_zero &  grst_en_window ? 1'b0:
                            grst_en_window;

dffrl_ns u_grst_en_window( .din (grst_en_window_nxt),
		   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(grst_en_window));

// -----------------------------------------
// 
//  cmp_grst_cl_l is set when the pipeline latency is reached and enable window is 1
//  cmp_grst_cl_l is reset by a_grst_cl 
// 
// -----------------------------------------


assign cmp_grst_cl_l_nxt  = (lcm_cnt == `CMP_GLOBAL_LATENCY) & grst_en_window ? 1'b1:
                        a_grst_cl ? 1'b0:
                        cmp_grst_cl_l;

dffrl_ns u_cmp_grst_cl_l(
		   .din (cmp_grst_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_grst_cl_l));
// ----------------------------------------------------------------------
// 
//  dbginit_l signal only allow to de-assert when dbginit_en_window is 1
//  (i.e. when  de_grst_cl | de_dbginit_cl is asserted) 
//  dbginit_l signal is reset by a_grst_cl | a_dbginit_cl signal
// 
// ---------------------------------------------------------------------

assign dbginit_en_window_nxt = de_dbginit_dsync_edge_dl & de_dbginit_jsync_edge &  lcm_cnt_zero  ? 1'b1:
                            lcm_cnt_zero  &  dbginit_en_window ? 1'b0:
                            dbginit_en_window;

dffrl_ns u_dbginit_en_window( .din (dbginit_en_window_nxt),
                   .clk (cmp_clk),
                   .rst_l (start_clk_cl),
                   .q(dbginit_en_window));

assign cmp_dbginit_cl_l_nxt  = 
                        a_grst_cl | a_dbginit_cl ? 1'b0:
                        (lcm_cnt == `CMP_GLOBAL_LATENCY) & dbginit_en_window ? 1'b1:
                        cmp_dbginit_cl_l;

dffrl_ns u_cmp_dbginit_cl_l(
		   .din (cmp_dbginit_cl_l_nxt),
		   .clk (cmp_clk),
                   .rst_l(start_clk_cl),
                   .q(cmp_dbginit_cl_l));

//---------------------------------------------------------------------------
//
// assert signal synchronize in cmp clock domain
//
//---------------------------------------------------------------------------

assign a_grst_dl_nxt = ( ctu_dram_tx_sync_early ? dram_a_grst_cl: a_grst_dl) & start_clk_cl;

dffrl_async_ns u_a_grst_dl (.din (a_grst_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_grst_dl));

assign a_dbginit_dl_nxt =  ( ctu_dram_tx_sync_early ? a_dbginit_cl : a_dbginit_dl) & start_clk_cl;
dffrl_async_ns u_a_dbginit_dl (.din (a_dbginit_dl_nxt),
                       .rst_l (io_pwron_rst_l),
                       .clk(cmp_clk),
                       .q(a_dbginit_dl));

//---------------------------------------------------------------------------
//
// Register : jbus  sync pulse (cmp_clk)
//
//---------------------------------------------------------------------------

// JSYNC_TRN2 36:32  (default 1)
// JSYNC_RCV1 28:24  (default 2)
// JSYNC_TRN1 23:22  (default 1)
// JSYNC_RCV0 20:16  (default 2)
// JSYNC_TRN0 15:13  (default 1)
// JSYNC_INIT 12:8   (default 5)
// JSYNC_PERIOD 4:0  (default 3)


assign    jsync_shadreg_rx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx2
                           :    jsync_shadreg_rx2;

dffrl_async_ns  u_jsync_shadreg_rx2_1_ff_async ( .din(jsync_shadreg_rx2_nxt[1]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[1])
                               );

dffsl_async_ns  u_jsync_shadreg_rx2_0_ff_async ( .din(jsync_shadreg_rx2_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx2[0])
                               );

assign    jsync_shadreg_tx2_nxt  =  jsync_update_shadow_cl ? jsync_reg_tx2
                           :    jsync_shadreg_tx2;

dffrl_async_ns  #(5) u_jsync_shadreg_tx2_4_0_ff_async ( .din(jsync_shadreg_tx2_nxt[4:0]), 
                                 .clk(cmp_clk),
                                 .rst_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_tx2[4:0])
                               );

assign    jsync_shadreg_rx1_nxt  =  jsync_update_shadow_cl ? jsync_reg_rx1
                           :    jsync_shadreg_rx1;

dffsl_async_ns  u_jsync_shadreg_rx1_0_ff_async ( .din(jsync_shadreg_rx1_nxt[0]), 
                                 .clk(cmp_clk),
                                 .set_l ( io_pwron_rst_l), 
                                 .q (jsync_shadreg_rx1[0])
                               );

dffrl_async_ns  u_jsync_shadreg_rx1_1_ff_async (  == )