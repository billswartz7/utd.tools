 
 

module efc_stdc (
      efc_ctu_data_out, efc_spc1357_fuse_clk1, efc_spc1357_fuse_clk2, 
   efc_spc0246_fuse_clk1, efc_spc0246_fuse_clk2, 
   efc_spc1357_fuse_data, efc_spc0246_fuse_data, 
   efc_spc7_ifuse_ashift, efc_spc7_ifuse_dshift, 
   efc_spc7_dfuse_ashift, efc_spc7_dfuse_dshift, 
   efc_spc6_ifuse_ashift, efc_spc6_ifuse_dshift, 
   efc_spc6_dfuse_ashift, efc_spc6_dfuse_dshift, 
   efc_spc5_ifuse_ashift, efc_spc5_ifuse_dshift, 
   efc_spc5_dfuse_ashift, efc_spc5_dfuse_dshift, 
   efc_spc4_ifuse_ashift, efc_spc4_ifuse_dshift, 
   efc_spc4_dfuse_ashift, efc_spc4_dfuse_dshift, 
   efc_spc3_ifuse_ashift, efc_spc3_ifuse_dshift, 
   efc_spc3_dfuse_ashift, efc_spc3_dfuse_dshift, 
   efc_spc2_ifuse_ashift, efc_spc2_ifuse_dshift, 
   efc_spc2_dfuse_ashift, efc_spc2_dfuse_dshift, 
   efc_spc1_ifuse_ashift, efc_spc1_ifuse_dshift, 
   efc_spc1_dfuse_ashift, efc_spc1_dfuse_dshift, 
   efc_spc0_ifuse_ashift, efc_spc0_ifuse_dshift, 
   efc_spc0_dfuse_ashift, efc_spc0_dfuse_dshift, 
   efc_sctag02_fuse_clk1, efc_sctag02_fuse_clk2, 
   efc_sctag02_fuse_data, efc_sctag13_fuse_clk1, 
   efc_sctag13_fuse_clk2, efc_sctag13_fuse_data, 
   efc_sctag3_fuse_ashift, efc_sctag3_fuse_dshift, 
   efc_sctag2_fuse_ashift, efc_sctag2_fuse_dshift, 
   efc_sctag1_fuse_ashift, efc_sctag1_fuse_dshift, 
   efc_sctag0_fuse_ashift, efc_sctag0_fuse_dshift, 
   efc_scdata02_fuse_clk1, efc_scdata02_fuse_clk2, 
   efc_scdata02_fuse_data, efc_scdata13_fuse_clk1, 
   efc_scdata13_fuse_clk2, efc_scdata13_fuse_data, 
   efc_scdata3_fuse_ashift, efc_scdata3_fuse_dshift, 
   efc_scdata2_fuse_ashift, efc_scdata2_fuse_dshift, 
   efc_scdata1_fuse_ashift, efc_scdata1_fuse_dshift, 
   efc_scdata0_fuse_ashift, efc_scdata0_fuse_dshift, 
   efc_iob_fuse_clk1, efc_iob_fuse_data, efc_iob_sernum0_dshift, 
   efc_iob_sernum1_dshift, efc_iob_sernum2_dshift, 
   efc_iob_fusestat_dshift, efc_iob_coreavail_dshift, 
   sbc_efa_read_en, sbc_efa_word_addr, sbc_efa_bit_addr, 
   sbc_efa_margin0_rd, sbc_efa_margin1_rd, pwr_ok, por_n, 
   sbc_efa_sup_det_rd, sbc_efa_power_down, 
      clk, efc_rst_l, jbus_arst_l, testmode_l, ctu_efc_rowaddr, 
   ctu_efc_coladdr, ctu_efc_read_en, ctu_efc_read_mode, 
   ctu_efc_read_start, ctu_efc_fuse_bypass, ctu_efc_dest_sample, 
   ctu_efc_data_in, ctu_efc_updatedr, ctu_efc_shiftdr, 
   ctu_efc_capturedr, tck, spc7_efc_ifuse_data, spc7_efc_dfuse_data, 
   spc6_efc_ifuse_data, spc6_efc_dfuse_data, spc5_efc_ifuse_data, 
   spc5_efc_dfuse_data, spc4_efc_ifuse_data, spc4_efc_dfuse_data, 
   spc3_efc_ifuse_data, spc3_efc_dfuse_data, spc2_efc_ifuse_data, 
   spc2_efc_dfuse_data, spc1_efc_ifuse_data, spc1_efc_dfuse_data, 
   spc0_efc_ifuse_data, spc0_efc_dfuse_data, sctag3_efc_fuse_data, 
   sctag2_efc_fuse_data, sctag1_efc_fuse_data, sctag0_efc_fuse_data, 
   scdata3_efc_fuse_data, scdata2_efc_fuse_data, 
   scdata1_efc_fuse_data, scdata0_efc_fuse_data, efa_sbc_data
   );

input   clk;
input	efc_rst_l;
input	jbus_arst_l;		input	testmode_l;


input [6:0]   ctu_efc_rowaddr;
input [4:0]   ctu_efc_coladdr;

input         ctu_efc_read_en;	input [2:0]   ctu_efc_read_mode; input         ctu_efc_read_start; input         ctu_efc_fuse_bypass; input         ctu_efc_dest_sample; 
input           ctu_efc_data_in;        output          efc_ctu_data_out;       input           ctu_efc_updatedr;       input           ctu_efc_shiftdr;        input           ctu_efc_capturedr;      input           tck;                    
output		efc_spc1357_fuse_clk1;
output		efc_spc1357_fuse_clk2;
output		efc_spc0246_fuse_clk1;
output		efc_spc0246_fuse_clk2;
output		efc_spc1357_fuse_data;
output		efc_spc0246_fuse_data;

output		efc_spc7_ifuse_ashift;
output		efc_spc7_ifuse_dshift;
output		efc_spc7_dfuse_ashift;
output		efc_spc7_dfuse_dshift;
input		spc7_efc_ifuse_data;
input		spc7_efc_dfuse_data;

output		efc_spc6_ifuse_ashift;
output		efc_spc6_ifuse_dshift;
output		efc_spc6_dfuse_ashift;
output		efc_spc6_dfuse_dshift;
input		spc6_efc_ifuse_data;
input		spc6_efc_dfuse_data;

output		efc_spc5_ifuse_ashift;
output		efc_spc5_ifuse_dshift;
output		efc_spc5_dfuse_ashift;
output		efc_spc5_dfuse_dshift;
input		spc5_efc_ifuse_data;
input		spc5_efc_dfuse_data;

output		efc_spc4_ifuse_ashift;
output		efc_spc4_ifuse_dshift;
output		efc_spc4_dfuse_ashift;
output		efc_spc4_dfuse_dshift;
input		spc4_efc_ifuse_data;
input		spc4_efc_dfuse_data;

output		efc_spc3_ifuse_ashift;
output		efc_spc3_ifuse_dshift;
output		efc_spc3_dfuse_ashift;
output		efc_spc3_dfuse_dshift;
input		spc3_efc_ifuse_data;
input		spc3_efc_dfuse_data;

output		efc_spc2_ifuse_ashift;
output		efc_spc2_ifuse_dshift;
output		efc_spc2_dfuse_ashift;
output		efc_spc2_dfuse_dshift;
input		spc2_efc_ifuse_data;
input		spc2_efc_dfuse_data;

output		efc_spc1_ifuse_ashift;
output		efc_spc1_ifuse_dshift;
output		efc_spc1_dfuse_ashift;
output		efc_spc1_dfuse_dshift;
input		spc1_efc_ifuse_data;
input		spc1_efc_dfuse_data;

output		efc_spc0_ifuse_ashift;
output		efc_spc0_ifuse_dshift;
output		efc_spc0_dfuse_ashift;
output		efc_spc0_dfuse_dshift;
input		spc0_efc_ifuse_data;
input		spc0_efc_dfuse_data;

output		efc_sctag02_fuse_clk1;
output		efc_sctag02_fuse_clk2;
output		efc_sctag02_fuse_data;
output		efc_sctag13_fuse_clk1;
output		efc_sctag13_fuse_clk2;
output		efc_sctag13_fuse_data;

output		efc_sctag3_fuse_ashift;
output		efc_sctag3_fuse_dshift;
input		sctag3_efc_fuse_data;

output		efc_sctag2_fuse_ashift;
output		efc_sctag2_fuse_dshift;
input		sctag2_efc_fuse_data;

output		efc_sctag1_fuse_ashift;
output		efc_sctag1_fuse_dshift;
input		sctag1_efc_fuse_data;

output		efc_sctag0_fuse_ashift;
output		efc_sctag0_fuse_dshift;
input		sctag0_efc_fuse_data;

output		efc_scdata02_fuse_clk1;
output		efc_scdata02_fuse_clk2;
output		efc_scdata02_fuse_data;
output		efc_scdata13_fuse_clk1;
output		efc_scdata13_fuse_clk2;
output		efc_scdata13_fuse_data;

output		efc_scdata3_fuse_ashift;
output		efc_scdata3_fuse_dshift;
input		scdata3_efc_fuse_data;

output		efc_scdata2_fuse_ashift;
output		efc_scdata2_fuse_dshift;
input		scdata2_efc_fuse_data;

output		efc_scdata1_fuse_ashift;
output		efc_scdata1_fuse_dshift;
input		scdata1_efc_fuse_data;

output		efc_scdata0_fuse_ashift;
output		efc_scdata0_fuse_dshift;
input		scdata0_efc_fuse_data;

output		efc_iob_fuse_clk1;
output		efc_iob_fuse_data;

output		efc_iob_sernum0_dshift;
output		efc_iob_sernum1_dshift;
output		efc_iob_sernum2_dshift;
output		efc_iob_fusestat_dshift;
output		efc_iob_coreavail_dshift;


input  [31:0]    efa_sbc_data;
output           sbc_efa_read_en; 
output	[5:0]    sbc_efa_word_addr;
output  [4:0]    sbc_efa_bit_addr;
output           sbc_efa_margin0_rd; 
output           sbc_efa_margin1_rd;

output		 pwr_ok;
output		 por_n;
output		 sbc_efa_sup_det_rd;
output		 sbc_efa_power_down;


wire [31:0]		;	// From efctck of efc_tck.v
// End of automatics
wire  [31:0]    efa_out_data;

wire		efc_spc7_ifuse_ashift;
wire		efc_spc7_ifuse_dshift;
wire		efc_spc7_dfuse_ashift;
wire		efc_spc7_dfuse_dshift;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';	wire  [31:0]    ;

wire		efc_spc7_ifuse_ashift;
wire		efc_spc7_ifuse_dshift;
wire		efc_spc7_dfuse_ashift;
wire		efc_spc7_dfuse_dshift;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc7_ifuse_dshift;
wire		efc_spc7_dfuse_ashift;
wire		efc_spc7_dfuse_dshift;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc7_dfuse_ashift;
wire		efc_spc7_dfuse_dshift;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc7_dfuse_dshift;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc6_ifuse_ashift;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc6_ifuse_dshift;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc6_dfuse_ashift;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc6_dfuse_dshift;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc5_ifuse_ashift;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc5_ifuse_dshift;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc5_dfuse_ashift;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc5_dfuse_dshift;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc4_ifuse_ashift;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc4_ifuse_dshift;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc4_dfuse_ashift;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc4_dfuse_dshift;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc3_ifuse_ashift;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc3_ifuse_dshift;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc3_dfuse_ashift;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc3_dfuse_dshift;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc2_ifuse_ashift;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc2_ifuse_dshift;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc2_dfuse_ashift;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc2_dfuse_dshift;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc1_ifuse_ashift;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc1_ifuse_dshift;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc1_dfuse_ashift;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc1_dfuse_dshift;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_spc0_ifuse_ashift;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_spc0_ifuse_dshift;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc0_dfuse_ashift;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_spc0_dfuse_dshift;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_sctag3_fuse_ashift;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_sctag3_fuse_dshift;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag2_fuse_ashift;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag2_fuse_dshift;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag1_fuse_ashift;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag1_fuse_dshift;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag0_fuse_ashift;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_sctag0_fuse_dshift;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_scdata3_fuse_ashift;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_scdata3_fuse_dshift;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata2_fuse_ashift;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata2_fuse_dshift;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata1_fuse_ashift;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata1_fuse_dshift;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata0_fuse_ashift;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_scdata0_fuse_dshift;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_iob_fuse_clk1;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_iob_fuse_data;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		efc_iob_sernum0_dshift;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire		efc_iob_sernum1_dshift;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_iob_sernum2_dshift;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_iob_fusestat_dshift;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		efc_iob_coreavail_dshift;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;

wire		local_efc_read_start;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';

wire		;
wire [6:0]	addr_cnt_nxt;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire [6:0]	;
wire		addr_cnt_en;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire [6:0]	addr_cnt_ff;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire [6:0]	;
wire [5:0]	addr_cnt_inc1;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire [5:0]	;
wire		addr_cnt_max;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		shift_done;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		mrd_cnt_done;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		rd_array_done;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		recover_done;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		;
wire		local_fuse_bypass; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire		; //ctu_efc_fuse_bypass 
wire		local_dest_sample; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4'; wire		; //ctu_efc_fuse_bypass 
wire		local_read_en; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4'; wire		; //ctu_efc_fuse_bypass 
wire		read_data_en;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4'; wire		;
wire  [31:0]	read_data_nxt;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire  [31:0]	;
wire  [31:0]    read_data_ff;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
wire  [31:0]    ;
reg  [3:0]	seq_state_nxt;
reg		enter_rsltshft;
wire [3:0]	seq_state_ff;
wire		seq_state_idle;
wire		seq_state_dump;
wire		seq_state_sglrd;
//wire		seq_state_bypass;
wire		seq_state_dest_smpl;
wire		seq_state_l2rr_smpl;
wire		seq_state_rsltshft;
wire		spc0_ifuse_dec;
wire		spc0_dfuse_dec;
wire		spc1_ifuse_dec;
wire		spc1_dfuse_dec;
wire		spc2_ifuse_dec;
wire		spc2_dfuse_dec;
wire		spc3_ifuse_dec;
wire		spc3_dfuse_dec;
wire		spc4_ifuse_dec;
wire		spc4_dfuse_dec;
wire		spc5_ifuse_dec;
wire		spc5_dfuse_dec;
wire		spc6_ifuse_dec;
wire		spc6_dfuse_dec;
wire		spc7_ifuse_dec;
wire		spc7_dfuse_dec;
wire		sctag0_fuse_dec;
wire		sctag1_fuse_dec;
wire		sctag2_fuse_dec;
wire		sctag3_fuse_dec;
wire		scdata_fuse_dec;
wire		scdata0_fuse_dec;
wire		scdata1_fuse_dec;
wire		scdata2_fuse_dec;
wire		scdata3_fuse_dec;
wire		iob_coreavail_dec;
wire		iob_sernum0_dec;
wire		iob_sernum1_dec;
wire		iob_sernum2_dec;
wire		iob_fusestat_dec;

wire		scdata0_read_dec;
wire		scdata1_read_dec;
wire		scdata2_read_dec;
wire		scdata3_read_dec;

wire		inhibit_power_down_snc_l;
wire		inhibit_power_down_l;
wire		efa_read_en_lt;
wire		enable_efa_por_nxt_l;
wire		enable_efa_por_ff_l;
wire		efa_array_power_down_ff;
wire		efa_array_power_down_nxt;
//-----------------------------------------------------------------------------
//  Misc signals
//-----------------------------------------------------------------------------
assign pwr_ok = jbus_arst_l;
assign por_n  = jbus_arst_l;

//-----------------------------------------------------------------------------
//  tck
//-----------------------------------------------------------------------------
efc_tck efctck(/*AUTOINST*/
	       // Outputs
	       .tck_shft_data_ff	(tck_shft_data_ff[31:0]),
	       .efc_ctu_data_out	(efc_ctu_data_out),
	       // Inputs
	       .read_data_ff		(read_data_ff[31:0]),
	       .ctu_efc_data_in		(ctu_efc_data_in),
	       .ctu_efc_shiftdr		(ctu_efc_shiftdr),
	       .ctu_efc_capturedr	(ctu_efc_capturedr),
	       .tck			(tck));

//-----------------------------------------------------------------------------
//  Synchronizers and Edge Detectors
//-----------------------------------------------------------------------------
wire		update_dr_jbus;
efc_saed updtdr(
	      .rise_det			(update_dr_jbus),
	      .fall_det			(),
	      .async_in			(ctu_efc_updatedr),
	      .clk			(clk));
efc_saed read_en(
	      .rise_det			(local_read_en),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_en),
	      .clk			(clk));
efc_saed read_start(
	      .rise_det			(local_efc_read_start),
	      .fall_det			(),
	      .async_in			(ctu_efc_read_start),
	      .clk			(clk));
efc_saed fuse_bypass(
	      .rise_det			(local_fuse_bypass),
	      .fall_det			(),
	      .async_in			(ctu_efc_fuse_bypass),
	      .clk			(clk));
efc_saed dest_sample(
	      .rise_det			(local_dest_sample),
	      .fall_det			(),
	      .async_in			(ctu_efc_dest_sample),
	      .clk			(clk));

wire [6:0]	snc1_rowaddr;
bw_u1_syncff_4x snc1_rowaddr_reg6 ( .so(), .q (snc1_rowaddr[6]),
		  .ck (clk), .d (ctu_efc_rowaddr[6]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg5 ( .so(), .q (snc1_rowaddr[5]),
		  .ck (clk), .d (ctu_efc_rowaddr[5]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg4 ( .so(), .q (snc1_rowaddr[4]),
		  .ck (clk), .d (ctu_efc_rowaddr[4]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg3 ( .so(), .q (snc1_rowaddr[3]),
		  .ck (clk), .d (ctu_efc_rowaddr[3]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg2 ( .so(), .q (snc1_rowaddr[2]),
		  .ck (clk), .d (ctu_efc_rowaddr[2]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg1 ( .so(), .q (snc1_rowaddr[1]),
		  .ck (clk), .d (ctu_efc_rowaddr[1]), .sd(), .se(1'b0));
bw_u1_syncff_4x snc1_rowaddr_reg0 ( .so(), .q (snc1_rowaddr[0]),
		  .ck (clk), .d (ctu_efc_rowaddr[0]), .sd(), .se(1'b0));

bw_u1_syncff_4x inhbpwrdn_snc1_reg ( .so(), .q (inhibit_power_down_snc_l),
		  .ck (clk), .d (!ctu_efc_read_mode[2]), .sd(), .se(1'b0));
dff_ns #(1)  inhbpwrdn_snc2_reg (.din(inhibit_power_down_snc_l), 
		   .q(inhibit_power_down_l), .clk(clk));
//-----------------------------------------------------------------------------
//  Power down control
//-----------------------------------------------------------------------------

assign enable_efa_por_nxt_l = seq_state_rsltshft || enable_efa_por_ff_l;
dffrl_async_ns #(1)  enable_efa_por_reg(
	.din(enable_efa_por_nxt_l), 
	.q(enable_efa_por_ff_l), .clk(clk), .rst_l(jbus_arst_l));

assign efa_array_power_down_nxt 
	= seq_state_idle && !(local_efc_read_start || local_fuse_bypass
			      || local_read_en || local_dest_sample)
	  && enable_efa_por_ff_l && inhibit_power_down_l;
dff_ns #(1)  efa_array_power_down_reg(.din(efa_array_power_down_nxt), 
		   .q(efa_array_power_down_ff), .clk(clk));

//-----------------------------------------------------------------------------
//  Read whole array sequencer
//-----------------------------------------------------------------------------
/* Note| State encodings are chosen so the outputs are equal to signle
         state bits.  Changing state encodings will change outputs! */
/* Bit[3] is used to indicate idle/not idle.  */
parameter      		MSEQ_IDLE	= 4'b0000,
			MSEQ_DUMP    	= 4'b1001,
			MSEQ_RSLTSHFT  	= 4';
reg