			
 	

 	


module sctag_oqctl(
      so, sctag_cpx_req_cq, sctag_cpx_atom_cq, oqctl_diag_acc_c8, 
   oqctl_rqtyp_rtn_c7, oqctl_cerr_ack_c7, oqctl_uerr_ack_c7, 
   str_ld_hit_c7, fwd_req_ret_c7, atm_inst_ack_c7, strst_ack_c7, 
   oqctl_int_ack_c7, oqctl_imiss_hit_c8, oqctl_pf_ack_c7, 
   oqctl_rmo_st_c7, oqctl_l2_miss_c7, mux1_sel_data_c7, 
   mux_csr_sel_c7, sel_inval_c7, out_mux1_sel_c7, out_mux2_sel_c7, 
   sel_array_out_l, sel_mux1_c6, sel_mux2_c6, sel_mux3_c6, 
   mux_vec_sel_c6, oqarray_wr_en, oqarray_rd_en, oqarray_wr_ptr, 
   oqarray_rd_ptr, oqctl_arbctl_full_px2, oqctl_st_complete_c7, 
      arbdp_cpuid_c5, arbdp_int_bcast_c5, decdp_strld_inst_c6, 
   decdp_atm_inst_c6, decdp_pf_inst_c5, arbctl_evict_c5, 
   dirdp_req_vec_c6, tagctl_imiss_hit_c5, tagctl_ld_hit_c5, 
   tagctl_nonmem_comp_c6, tagctl_st_ack_c5, tagctl_strst_ack_c5, 
   tagctl_uerr_ack_c5, tagctl_cerr_ack_c5, tagctl_int_ack_c5, 
   tagctl_st_req_c5, tagctl_fwd_req_ret_c5, sel_rdma_inval_vec_c5, 
   tagctl_rdma_wr_comp_c4, tagctl_store_inst_c5, 
   tagctl_fwd_req_ld_c6, tagctl_rmo_st_ack_c5, tagctl_inst_mb_c5, 
   tagctl_hit_c5, arbctl_inst_l2data_vld_c6, 
   arbctl_inst_l2tag_vld_c6, arbctl_inst_l2vuad_vld_c6, 
   arbctl_csr_rd_en_c7, lkup_bank_ena_dcd_c4, lkup_bank_ena_icd_c4, 
   rst_tri_en, sehold, cpx_sctag_grant_cx, arst_l, grst_l, si, se, 
   rclk
   );


input	[2:0]	arbdp_cpuid_c5; input		arbdp_int_bcast_c5;
input		decdp_strld_inst_c6;
input		decdp_atm_inst_c6;
input	decdp_pf_inst_c5; 
input		arbctl_evict_c5;



input	[7:0]	dirdp_req_vec_c6;

input	tagctl_imiss_hit_c5;
input	tagctl_ld_hit_c5;
input	tagctl_nonmem_comp_c6;
input	tagctl_st_ack_c5; 
input	tagctl_strst_ack_c5;
input	tagctl_uerr_ack_c5;
input	tagctl_cerr_ack_c5;
input	tagctl_int_ack_c5;
input	tagctl_st_req_c5;
input	tagctl_fwd_req_ret_c5; input	sel_rdma_inval_vec_c5;
input	tagctl_rdma_wr_comp_c4;
input	tagctl_store_inst_c5;
input	tagctl_fwd_req_ld_c6;
input	tagctl_rmo_st_ack_c5; input	tagctl_inst_mb_c5; input	tagctl_hit_c5; 
input   arbctl_inst_l2data_vld_c6;
input   arbctl_inst_l2tag_vld_c6;
input   arbctl_inst_l2vuad_vld_c6;
input	arbctl_csr_rd_en_c7;

input	[3:0]	lkup_bank_ena_dcd_c4;
input	[3:0]	lkup_bank_ena_icd_c4;

input	rst_tri_en;

input   sehold ; 
input	[7:0]	cpx_sctag_grant_cx;

input		arst_l, grst_l;
input		si, se;
input		rclk;

output		so;

output	[7:0]	sctag_cpx_req_cq ;
output		sctag_cpx_atom_cq;

output		oqctl_diag_acc_c8;
output	[3:0]	oqctl_rqtyp_rtn_c7;
output		oqctl_cerr_ack_c7 ;
output		oqctl_uerr_ack_c7 ;
output		str_ld_hit_c7;
output		fwd_req_ret_c7;
output		atm_inst_ack_c7;
output		strst_ack_c7;
output		oqctl_int_ack_c7;
output		oqctl_imiss_hit_c8;
output		oqctl_pf_ack_c7; output		oqctl_rmo_st_c7; output		oqctl_l2_miss_c7; 

output  [3:0]   mux1_sel_data_c7;
output          mux_csr_sel_c7;
output          sel_inval_c7;
output  [2:0]   out_mux1_sel_c7; output  [2:0]   out_mux2_sel_c7; output		sel_array_out_l; 
output  [3:0]   sel_mux1_c6;
output  [3:0]   sel_mux2_c6;
output          sel_mux3_c6;
output  [3:0]   mux_vec_sel_c6;



output		oqarray_wr_en;
output		oqarray_rd_en;
output	[3:0]	oqarray_wr_ptr;
output	[3:0]	oqarray_rd_ptr;

output		oqctl_arbctl_full_px2;

output		oqctl_st_complete_c7;


wire	, int_bcast_c6;
wire	[7:0]	dec_cpu_c5, dec_cpu_c6, dec_cpu_c7;
wire	sel_stinv_req_c5, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	dec_cpu_c5, dec_cpu_c6, dec_cpu_c7;
wire	sel_stinv_req_c5, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, dec_cpu_c6, dec_cpu_c7;
wire	sel_stinv_req_c5, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , dec_cpu_c7;
wire	sel_stinv_req_c5, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	sel_stinv_req_c5, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, sel_stinv_req_c6;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	sel_inv_vec_c5, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, sel_inv_vec_c6 ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	sel_dec_vec_c5, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, sel_dec_vec_c5_d1;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	sel_dec_vec_c6, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, sel_dec_vec_c6_d1;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	inval_vec_c6;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	;
wire	[3:0]	sel_req_out_c6;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[3:0]	;
wire	[7:0]   req_out_c6, req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]   , req_out_c7;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	imiss1_out_c6, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, imiss1_out_c7, imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , imiss1_out_c8;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	imiss2_out_c6, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, imiss2_out_c7;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	imiss2_req_vec_c6, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, imiss2_req_vec_c7;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	c6_req_vld, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, c7_req_vld;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	sel_c7_req, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, sel_c7_req_d1 ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	old_req_vld_d1, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, oq_count_nonzero_d1;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	mux1_sel_c7_req, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, mux1_sel_dec_vec_c6;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	mux1_sel_def_c6, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, mux1_sel_dec_vec_c7;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	imiss1_to_xbar_tmp_c6; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	; 
wire	[7:0]	imiss2_to_xbar_tmp_c6;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_; 
wire	[7:0]	;

wire	mux2_sel_inv_vec_c6;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	;
wire	oq_count_nonzero;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;
wire	mux3_sel_oq_req;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;
wire	imiss1_oq_or_pipe;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;
wire	sel_old_req;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;
wire	imiss1_to_xbarq_c6, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, imiss1_to_xbarq_c7;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;


wire	[7:0]	imiss2_from_oq, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;


wire	[7:0]	, imiss2_oq_or_pipe;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	req_to_xbarq_c6, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, req_to_xbarq_c7;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	imiss2_to_xbarq_c6, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, imiss2_to_xbarq_c7;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	mux2_req_vec_c6, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, mux3_req_vec_c6;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	mux1_req_vec_c6;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	;

wire	[4:0]	oq_count_p;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	[4:0]	;

wire	[7:0]	bcast_st_req_c6, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	[7:0]	, bcast_inval_req_c6;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire		bcast_req_c6,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		,bcast_req_c7 ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire		bcast_req_pipe;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire		;
wire		bcast_req_oq_or_pipe, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		, bcast_to_xbar_c6, bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , bcast_to_xbar_c7;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[7:0]	bcast_req_xbarqfull_c6, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[7:0]	, req_to_que_in_xbarq_c7;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire		allow_new_req_bcast, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		, allow_old_req_bcast ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire		allow_req_c6, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire		, allow_req_c7 ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	[7:0]	que_in_xbarq_c7;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	[7:0]	;
wire		old_req_vld ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		 ;

wire	[3:0]	load_ret, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;

wire	[3:0]	, stack_ret, imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , imiss_err_or_int_rqtyp_c7 ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	st_req_c6, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, st_req_c7, int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , int_req_sel_c7 ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	fwd_req_ret_c6 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	 ;
wire	int_ack_c6, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, int_ack_c7 ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	ld_hit_c6, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, ld_hit_c7 ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	strld_inst_c7;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	;
wire	atm_inst_c7;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;
wire	strst_ack_c6 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	 ;
wire	uerr_ack_c6, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, uerr_ack_c7 ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	cerr_ack_c6, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, cerr_ack_c7 ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	imiss_req_sel_c7, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	, err_req_sel_c7 ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	sel_evict_vec_c7;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	;
wire	imiss_err_or_int_sel_c7, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, sel_st_ack_c7, sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , sel_ld_ret_c7;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[3:0]	rqtyp_rtn_c7;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[3:0]	;

wire	inc_wr_ptr, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	, inc_wr_ptr_d1, inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , inc_rd_ptr, inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , inc_rd_ptr_d1;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[15:0]	wr_word_line, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[15:0]	, rd_word_line;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[3:0]	enc_wr_ptr, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[3:0]	, enc_rd_ptr;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[3:0]   enc_wr_ptr_d1, enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[3:0]   , enc_rd_ptr_d1;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[15:0]	wr_ptr, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[15:0]	, wr_ptr_d1, wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , wr_ptr_lsby1;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire		wr_ptr0_n, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		, wr_ptr0_n_d1 ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	[15:0]	rd_ptr, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	[15:0]	, rd_ptr_d1, rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , rd_ptr_lsby1;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire		rd_ptr0_n, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire		, rd_ptr0_n_d1 ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;

wire	sel_count_inc, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;

wire	, sel_count_dec, sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , sel_count_def;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[4:0]	oq_count_plus_1,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[4:0]	,oq_count_minus_1, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,, oq_count_reset_p ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_,  ;
wire	[4:0]	oq_count_d1, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_ ;
wire	[4:0]	, oq_count_plus_1_d1, oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , oq_count_minus_1_d1;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	oqctl_full_px1;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;


wire    [11:0]   oq0_out;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;


wire    [11:0]   ;
wire    [11:0]   oq1_out;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq2_out;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq3_out;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq4_out;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq5_out;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq6_out;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq7_out;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq8_out;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq9_out;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq10_out;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq11_out;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq12_out;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq13_out;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq14_out;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;
wire    [11:0]   oq15_out;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire    [11:0]   ;

wire	[7:0]	oq_rd_out;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	[7:0]	;
wire	imiss1_rd_out, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	, imiss2_rd_out;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	oq_bcast_out;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	;

wire	[1:0]	xbar0_cnt, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;

wire	[1:0]	, xbar0_cnt_p, xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , xbar0_cnt_plus1, xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , xbar0_cnt_minus1;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, ;
wire	[1:0]	xbar1_cnt, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_;
wire	[1:0]	, xbar1_cnt_p, xbar1_cnt_plus1, xbar1_, , xbar1_cnt_plus1, xbar1_, , xbar1_, ;
wire	[1:0]	xbar2_cnt, xbar2_cnt_p, xbar2_cnt_plus1, xbar2_cnt_minus1;
wire	[1:0]	xbar3_cnt, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar2_cnt_p, xbar2_cnt_plus1, xbar2_cnt_minus1;
wire	[1:0]	xbar3_cnt, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar2_cnt_plus1, xbar2_cnt_minus1;
wire	[1:0]	xbar3_cnt, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar2_cnt_minus1;
wire	[1:0]	xbar3_cnt, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[1:0]	xbar3_cnt, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar3_cnt_p, xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar3_cnt_plus1, xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar3_cnt_minus1;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[1:0]	xbar4_cnt, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar4_cnt_p, xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar4_cnt_plus1, xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar4_cnt_minus1;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[1:0]	xbar5_cnt, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar5_cnt_p, xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar5_cnt_plus1, xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar5_cnt_minus1;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[1:0]	xbar6_cnt, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar6_cnt_p, xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar6_cnt_plus1, xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar6_cnt_minus1;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[1:0]	xbar7_cnt, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[1:0]	, xbar7_cnt_p, xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar7_cnt_plus1, xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , xbar7_cnt_minus1;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	[7:0]	xbarq_full, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	[7:0]	, xbarq_cnt1;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;

wire    [7:0]   inc_xbar_cnt;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire    [7:0]   ;
wire    [7:0]   dec_xbar_cnt;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [7:0]   ;
wire    [7:0]   nochange_xbar_cnt;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [7:0]   ;
wire    [7:0]   change_xbar_cnt;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [7:0]   ;


wire    [15:0]  oq_out_bit7,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;


wire    [15:0]  ,oq_out_bit6,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,,oq_out_bit5,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,,oq_out_bit4;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,;
wire    [15:0]  oq_out_bit3,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [15:0]  ,oq_out_bit2,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,,oq_out_bit1,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,,oq_out_bit0;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,;
wire    [15:0]  imiss1_oq_out;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [15:0]  ;
wire    [15:0]  imiss2_oq_out;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [15:0]  ;
wire    [15:0]  bcast_oq_out ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [15:0]   ;
wire	[7:0]	evict_inv_vec;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	[7:0]	;

wire	[15:0]	rdma_oq_out;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire	[15:0]	;
wire	oq_rdma_out;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;
wire	rdma_inv_c6, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	, rdma_inv_c7;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	rdma_to_xbar_tmp_c6, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	, rdma_oq_or_pipe;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	rdma_to_xbarq_c6, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	, rdma_to_xbarq_c7 ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;

wire	rdma_wr_comp_c5;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;

wire	;
wire	dir_hit_c6 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	 ;
wire	ack_idle_state_in_l, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	, ack_idle_state_l ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;
wire	oqctl_st_complete_c6 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	 ;
wire	[2:0]	rdma_state_in, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	[2:0]	, rdma_state;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	rdma_req_sent_c7;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;

wire	oqctl_prev_data_c7;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire	;
wire	oqctl_sel_oq_c7;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;
wire	oqctl_sel_old_req_c7;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;
wire	oqctl_sel_inval_c6;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;

wire            store_inst_c6;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;
wire            store_inst_c7;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;

wire            diag_data_sel_c7;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;
wire            diag_tag_sel_c7;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_vuad_sel_c7;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_lddata_sel_c7;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_ldtag_sel_c7;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_ldvuad_sel_c7;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_lddata_sel_c8;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_ldtag_sel_c8;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_ldvuad_sel_c8;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_def_sel_c7;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;
wire            diag_def_sel_c8;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire            ;

wire            fwd_req_vld_ld_c7;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;

wire            oqctl_sel_inval_c7;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;

wire            csr_reg_rd_en_c8;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;


wire            sel_old_data_c7;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;


wire            ;


wire    [2:0]   cpuid_c5;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;


wire    [2:0]   ;
wire    [2:0]   inst_cpuid_c6;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [2:0]   ;
wire    [6:0]   dec_cpuid_c6 ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [6:0]    ;
wire    [6:0]   dec_cpuid_c5;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire    [6:0]   ;

wire    [3:0]   lkup_bank_ena_dcd_c5;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire    [3:0]   ;
wire    [3:0]   lkup_bank_ena_icd_c5;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [3:0]   ;

wire    [3:0]   mux_vec_sel_c5;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire    [3:0]   ;
wire    [3:0]   mux_vec_sel_c6_unqual ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire    [3:0]    ;
wire	pf_inst_c6, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	, pf_inst_c7 ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;
wire	rmo_st_c6, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	, rmo_st_c7 ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;
wire	l2_miss_c5, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire	, l2_miss_c6, l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , , l2_miss_c7 ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;


wire	[3:0]	enc_wr_ptr_d2 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;


wire	[3:0]	 ;
wire		inc_wr_ptr_d2;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
wire		;

wire            dbb_rst_l;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

wire            ;
wire		inc_rd_ptr_d1_1, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire		, inc_rd_ptr_d1_2;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	 inc_wr_ptr_d1_1, inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	 , inc_wr_ptr_d1_2;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	st_ack_c6, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	, st_ack_c7;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 , ;
wire	oq_count_15_p,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	,  oq_count_15_d1;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;
wire	oq_count_16_p,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	,  oq_count_16_d1;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ,  ;
wire	wr_wl_disable;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
wire	;

///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

  
 dffrl_async    #(1)          (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6       (.q(),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                                        .clk(),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                                        .rst_l(),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                                        .din(),
                                        .se(se), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                                        .se(), .si(), .so());



///////////////////////////////////////////////////////////////////////////
// Request vector generation.
// The CPUs need to be either invalidated or acknowledged for actions that
// happen in the L2 $. Most of these actions are caused by cpu requests to 
// the L2. However, evictions and disrupting errors are independent of 
// requests coming from the CPU and form a portion of the requests going
// to the CPUs
//
// All requests are sent to the CPUs in C7 except requests in response
// to diagnostic accesses which are sent a cycle later.
//
// Request can be generated from an instruction in the pipe or an older
// request.  The request vector is generated in C6 The request vector is generated in C6.
// The 4 sources of requests in the following logic are as follows:
// * Request in pipe
// * delayed ( 1cycle ) Request in pipe
// * Request from the OQ.
// * Request that was selected from the above  3 sources but
//   was not able to send to the xbar because of a xbar fulll condition
//
///////////////////////////////////////////////////////////////////////////




assign	int_bcast_c5 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());







assign	 = tagctl_int_ack_c5 & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  =  & arbdp_int_bcast_c5 ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  &  ;

dff_s   #(1)  ff_int_bcast_c6    ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;

dff_s   #(1)      ( .din(int_bcast_c5), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    .q(int_bcast_c6), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q(), .se(se), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());


///////////////
// FWD req responses are now forwarded to the 
// cpu that made the request.
//////////
//
//mux2ds  #(3) mux_cpuid_c5 (.dout(cpu_c5[2:0]),
//                       	.in0(arbdp_cpuid_c5[2:0]), // instr cpu id 
//				.in1(3'b0), // fwd req response alwaya to cpu0
//                       	.sel0(~tagctl_fwd_req_in_c5), // no fwd req
//				.sel1(tagctl_fwd_req_in_c5)); // fwd req
//////////////

assign  dec_cpu_c5[0] = ( arbdp_cpuid_c5[2:0] == 3'd0 ) | int_bcast_c5 ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());



assign  [0] = ( [2:0] == 3d0 ) |  ;
assign  dec_cpu_c5[1] = ( arbdp_cpuid_c5[2:0] == 3'd1 ) | int_bcast_c5 ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [1] = ( [2:0] == 3d1 ) |  ;
assign  dec_cpu_c5[2] = ( arbdp_cpuid_c5[2:0] == 3'd2 ) | int_bcast_c5 ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [2] = ( [2:0] == 3d2 ) |  ;
assign  dec_cpu_c5[3] = ( arbdp_cpuid_c5[2:0] == 3'd3 ) | int_bcast_c5 ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [3] = ( [2:0] == 3d3 ) |  ;
assign  dec_cpu_c5[4] = ( arbdp_cpuid_c5[2:0] == 3'd4 ) | int_bcast_c5 ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [4] = ( [2:0] == 3d4 ) |  ;
assign  dec_cpu_c5[5] = ( arbdp_cpuid_c5[2:0] == 3'd5 ) | int_bcast_c5 ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [5] = ( [2:0] == 3d5 ) |  ;
assign  dec_cpu_c5[6] = ( arbdp_cpuid_c5[2:0] == 3'd6 ) | int_bcast_c5 ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [6] = ( [2:0] == 3d6 ) |  ;
assign  dec_cpu_c5[7] = ( arbdp_cpuid_c5[2:0] == 3'd7 ) | int_bcast_c5 ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign  [7] = ( [2:0] == 3d7 ) |  ;

dff_s   #(8)  ff_dec_cpu_c6    ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;

dff_s   #(8)      ( .din(dec_cpu_c5[7:0]), .clk(rclk),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din([7:0]), .clk(),
                    .q(dec_cpu_c6[7:0]), .se(se), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q([7:0]), .se(), .si(), .so());
dff_s   #(8)  ff_dec_cpu_c7    ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());
dff_s   #(8)      ( .din(dec_cpu_c6[7:0]), .clk(rclk),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din([7:0]), .clk(),
                    .q(dec_cpu_c7[7:0]), .se(se), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q([7:0]), .se(), .si(), .so());


// select the req vec for the instruction in C6 for a diagnostic
// access or a CSR instruction store completion.

assign	sel_dec_vec_c6 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());



assign	 = tagctl_nonmem_comp_c6;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = ;

dff_s   #(1)  ff_sel_dec_vec_c7    ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;

dff_s   #(1)      ( .din(sel_dec_vec_c6), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    	.q(sel_dec_vec_c6_d1), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    	.q(), .se(se), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

dff_s   #(1)  ff_diag_acc_c8    ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

dff_s   #(1)      ( .din(sel_dec_vec_c6_d1), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
         		.q(oqctl_diag_acc_c8), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
         		.q(), .se(se), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());



assign	sel_stinv_req_c5 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());



assign	 = ( tagctl_st_ack_c5 
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = (  
			| tagctl_strst_ack_c5 )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  
			|  )   ;

dff_s   #(1)  ff_sel_stinv_req_c6    ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  )   ;

dff_s   #(1)      ( .din(sel_stinv_req_c5), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    .q(sel_stinv_req_c6), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q(), .se(se), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

assign	sel_inv_vec_c5 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

assign	 =  ( arbctl_evict_c5 | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  =  (  | sel_rdma_inval_vec_c5 ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |  ) ;

dff_s   #(1)  ff_sel_inv_vec_c6    ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ) ;

dff_s   #(1)      ( .din(sel_inv_vec_c5), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    .q(sel_inv_vec_c6), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q(), .se(se), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

assign	sel_dec_vec_c5 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

assign	 = ( tagctl_imiss_hit_c5 | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = (  | 
			tagctl_ld_hit_c5 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  | 
			 |
			tagctl_uerr_ack_c5 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
			 |
			tagctl_cerr_ack_c5 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
			 |
			tagctl_int_ack_c5 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
			 )  ;

dff_s   #(1)  ff_sel_dec_vec_c5_d1    ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  )  ;

dff_s   #(1)      ( .din(sel_dec_vec_c5), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    .q(sel_dec_vec_c5_d1), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q(), .se(se), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());


// invalidate/stack vector
assign	inval_vec_c6 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());


assign	 = ( dirdp_req_vec_c6 |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = (  |
                ( dec_cpu_c6 & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
                (  & 
		{8{sel_stinv_req_c6}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  & 
		{8{}} ) ) ;


assign	sel_req_out_c6[0] = sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 }} ) ) ;


assign	[0] =  ;
assign	sel_req_out_c6[1] = sel_dec_vec_c6_d1 & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign	[1] =  & ~sel_dec_vec_c5_d1 ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  & ~ ;
assign	sel_req_out_c6[2] = ( sel_stinv_req_c6 | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign	[2] = (  | sel_inv_vec_c6 )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |  )  & ~sel_dec_vec_c5_d1 &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  )  & ~ &
				~sel_dec_vec_c6_d1 ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  &
				~ ;
assign	sel_req_out_c6[3] = ~( sel_stinv_req_c6 | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;
assign	[3] = ~(  | 
				sel_inv_vec_c6 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  | 
				 |
				sel_dec_vec_c5_d1 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
				 |
				sel_dec_vec_c6_d1 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  |
				 ) ;


// pipeline request C6
mux4ds #(8) mux_req_out_c6 ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ) ;


mux4ds #(8)  ( .dout (req_out_c6[7:0]),
                  	.in0(dec_cpu_c6[7:0]), 
			.in1(dec_cpu_c7[7:0]),
                  	.in2(inval_vec_c6[7:0]), 
			.in3(8'b0),
                  	.sel0(sel_req_out_c6[0]), 
			.sel1(sel_req_out_c6[1]),
                  	.sel2(sel_req_out_c6[2]), 
			.sel3(sel_req_out_c6[3]));

dff_s   #(8)  ff_req_out_c7 ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ( .dout ([7:0]),
                  	.in0([7:0]), 
			.in1([7:0]),
                  	.in2([7:0]), 
			.in3(8bb),
                  	.sel0([0]), 
			.sel1([1]),
                  	.sel2([2]), 
			.sel3([3]));

dff_s   #(8)   ( .din(req_out_c6[7:0]), .clk(rclk),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ( .din([7:0]), .clk(),
           	.q(req_out_c7[7:0]), .se(se), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
           	.q([7:0]), .se(), .si(), .so());


// imiss 1 request C6.

dff_s   #(1)  ff_imiss1_out_c6    ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());



dff_s   #(1)      ( .din(tagctl_imiss_hit_c5), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                    .q(imiss1_out_c6), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                    .q(), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c7    ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

dff_s   #(1)      ( .din(imiss1_out_c6), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                 .q(imiss1_out_c7), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                 .q(), .se(se), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

dff_s   #(1)  ff_imiss1_out_c8    ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

dff_s   #(1)      ( .din(imiss1_out_c7), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6     ( .din(), .clk(rclk),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .clk(),
                 .q(imiss1_out_c8), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ),
                 .q(), .se(se), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .se(), .si(), .so());

assign	oqctl_imiss_hit_c8 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ), .si(), .so());

assign	 = imiss1_out_c8 ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  =  ;

assign	imiss2_out_c6 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  ;

assign	 = imiss1_out_c7;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = ;
assign	imiss2_out_c7 = imiss1_out_c8;

assign  imiss2_req_vec_c6 ;
assign	 = imiss1_out_c8;

assign  imiss2_req_vec_c6  = ;

assign  imiss2_req_vec_c6 ;

assign    = {8{}} & req_out_c7 ;

dff_s   #(8)  ff_imiss2_req_vec_c7( .din(imiss2_req_vec_c6[7:0]), .clk(rclk),
               .q(imiss2_req_vec_c7[7:0]), .se(se), .si(), .so());


//////////////////////
// A request in the pipe is valid under the following conditions.
//  -dir inval vec is non-zero for an eviction
//  -an imiss 2nd packet is in C7
//  -all conditions that cause assertion of sel_dec_vec_c5_d1
//  -all conditions that cause the assertion of sel_dec_vec_c6_d1
//
// A delayed pipe( by 1 cycle ) request is selected 
// over an incomping pipe request in Cycle T
// if the pipe request is cycle T-1 was overruled due
// to higher priority requests.
//////////////////////

assign	evict_inv_vec = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/}} &  ;

dff_s   #(8)  ff_imiss2_req_vec_c7( .din(imiss2_req_vec_c6[7:0]), .clk(rclk),
               .q(imiss2_req_vec_c7[7:0]), .se(se), .si(), .so());


//////////////////////
// A request in the pipe is valid under the following conditions.
//  -dir inval vec is non-zero for an eviction
//  -an imiss 2nd packet is in C7
//  -all conditions that cause assertion of sel_dec_vec_c5_d1
//  -all conditions that cause the assertion of sel_dec_vec_c6_d1
//
// A delayed pipe( by 1 cycle ) request is selected 
// over an incomping pipe request in Cycle T
// if the pipe request is cycle T-1 was overruled due
// to higher priority requests.
//////////////////////

assign	evict_inv_vec = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ;

dff_s   #(8)  ( .din(imiss2_req_vec_c6[7:0]), .clk(rclk),
               .q(imiss2_req_vec_c7[7:0]), .se(se), .si(), .so());


//////////////////////
// A request in the pipe is valid under the following conditions.
//  -dir inval vec is non-zero for an eviction
//  -an imiss 2nd packet is in C7
//  -all conditions that cause assertion of sel_dec_vec_c5_d1
//  -all conditions that cause the assertion of sel_dec_vec_c6_d1
//
// A delayed pipe( by 1 cycle ) request is selected 
// over an incomping pipe request in Cycle T
// if the pipe request is cycle T-1 was overruled due
// to higher priority requests.
//////////////////////

assign	evict_inv_vec = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/( .din([7:0]), .clk(),
               .q(imiss2_req_vec_c7[7:0]), .se(se), .si(), .so());


//////////////////////
// A request in the pipe is valid under the following conditions.
//  -dir inval vec is non-zero for an eviction
//  -an imiss 2nd packet is in C7
//  -all conditions that cause assertion of sel_dec_vec_c5_d1
//  -all conditions that cause the assertion of sel_dec_vec_c6_d1
//
// A delayed pipe( by 1 cycle ) request is selected 
// over an incomping pipe request in Cycle T
// if the pipe request is cycle T-1 was overruled due
// to higher priority requests.
//////////////////////

assign	evict_inv_vec = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
               .q([7:0]), .se(), .si(), .so());


//////////////////////
// A request in the pipe is valid under the following conditions.
//  -dir inval vec is non-zero for an eviction
//  -an imiss 2nd packet is in C7
//  -all conditions that cause assertion of sel_dec_vec_c5_d1
//  -all conditions that cause the assertion of sel_dec_vec_c6_d1
//
// A delayed pipe( by 1 cycle ) request is selected 
// over an incomping pipe request in Cycle T
// if the pipe request is cycle T-1 was overruled due
// to higher priority requests.
//////////////////////

assign	evict_inv_vec = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .si(), .so());



assign	 = {8{sel_inv_vec_c6}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ = {8{}} & dirdp_req_vec_c6 ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/}} &  ;

assign	c6_req_vld  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ;

assign	  = |( evict_inv_vec | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/  = |(  | imiss2_req_vec_c6 ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ |  ) |
			sel_dec_vec_c5_d1 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ) |
			 | 
			sel_stinv_req_c6 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ | 
			 | 
			sel_dec_vec_c6_d1 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ | 
			 ;
				
dff_s   #(1)  ff_c6_req_vld    ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ;
				
dff_s   #(1)      ( .din(c6_req_vld), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/    ( .din(), .clk(rclk),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .clk(),
                 .q(c7_req_vld), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
                 .q(), .se(se), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .se(), .si(), .so());

assign  sel_c7_req = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .si(), .so());

assign   = c7_req_vld & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ =  & ( sel_c7_req_d1 |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ & (  |// selected delayed pipe req
                old_req_vld_d1 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ |                 | 	// selected existing req to xbar
		oq_count_nonzero_d1) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ | 			) ; // selected from OQ.

dff_s   #(1)  ff_sel_c7_req_d1   (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/) ; 
dff_s   #(1)     (.din(sel_c7_req), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/   (.din(), .clk(rclk),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .clk(),
                .q(sel_c7_req_d1), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
                .q(), .se(se), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .se(), .si(), .so());




//////////////////////////
// request Mux1.
// Select between the following
// request sources -
// - delayed pipe req
// - c6 pipe req
// - c7 pipe req
// - default.
//
// A delayed pipe request has the
// highest priority.
//////////////////////////
assign mux1_sel_c7_req = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), .si(), .so());




assign  = sel_c7_req  ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ =   ;

assign mux1_sel_dec_vec_c6 =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/  ;

assign  =  sel_dec_vec_c5_d1  & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ =    & ~sel_c7_req;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/  & ~;
assign mux1_sel_dec_vec_c7 =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/;
assign  =  sel_dec_vec_c6_d1 &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ =   &
				~sel_dec_vec_c5_d1 &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ &
				~ &
				~sel_c7_req ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ &
				~ ;

assign	mux1_sel_def_c6 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ;

assign	 = ~( sel_dec_vec_c5_d1 |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ = ~(  |
			  sel_dec_vec_c6_d1 ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ |
			   ) &
			  ~sel_c7_req ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ) &
			  ~ ;
				

mux4ds #(8) mux_mux1_req_vec_c6 ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ;
				

mux4ds #(8)  ( .dout (mux1_req_vec_c6[7:0]),
             		.in0(req_out_c7[7:0]), 
			.in1(dec_cpu_c6[7:0]),
               		.in2(dec_cpu_c7[7:0]), 
			.in3(8'b0),
               		.sel0(mux1_sel_c7_req), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ ( .dout ([7:0]),
             		.in0([7:0]), 
			.in1([7:0]),
               		.in2([7:0]), 
			.in3(8bb),
               		.sel0(), 
			.sel1(mux1_sel_dec_vec_c6),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), 
			.sel1(),
               		.sel2(mux1_sel_dec_vec_c7), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
               		.sel2(), 
			.sel3(mux1_sel_def_c6));


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/), 
			.sel3());


mux2ds  #(1) mux_mux1_imiss1_c6 (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/));


mux2ds  #(1)  (.dout(imiss1_to_xbar_tmp_c6),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ (.dout(),
                       	.in0(imiss1_out_c6),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
                       	.in0(),
			.in1(imiss1_out_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
			.in1(),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
                       	.sel0(~),
			.sel1(sel_c7_req));

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
			.sel1());

mux2ds  #(8) mux_mux1_imiss2_c6 (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/));

mux2ds  #(8)  (.dout(imiss2_to_xbar_tmp_c6[7:0]),
                       	.in0(imiss2_req_vec_c6[7:0]),
			.in1(imiss2_req_vec_c7[7:0]),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ (.dout([7:0]),
                       	.in0([7:0]),
			.in1([7:0]),
                       	.sel0(~),
			.sel1(sel_c7_req));

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/),
			.sel1());

assign	rdma_inv_c6 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/));

assign	 = rdma_state[`ACK_WAIT] &  |( dirdp_req_vec_c6 );

dff_s   #(1)  ff_rdma_inv_c7 ( .din(rdma_inv_c6), .clk(rclk),
                   .q(rdma_inv_c7), .se(se), .si(),.so());

mux2ds  #(1) mux_mux1_rdma_c6 (.dout(rdma_to_xbar_tmp_c6),
                       	.in0(rdma_inv_c6),
			.in1(rdma_inv_c7),
                       	.sel0(~sel_c7_req),
			.sel1(sel_c7_req));

//////////////////////////
// request Mux2.
// Select between the following
// - Mux1 request
// - invalidation/ack vector.
//////////////////////////



assign	mux2_sel_inv_vec_c6 = mux1_sel_def_c6 & 
			( sel_stinv_req_c6 | sel_inv_vec_c6 );
				

mux2ds #(8) mux_mux2_req_c6 ( .dout (mux2_req_vec_c6[7:0]),
                   	.in0(mux1_req_vec_c6[7:0]), 
			.in1(inval_vec_c6[7:0]),
                   	.sel0(~mux2_sel_inv_vec_c6), 
			.sel1(mux2_sel_inv_vec_c6)) ;

//////////////////////////
// request Mux3.
// Select between the following
// - Mux2 request
// - Oq request.
// OQ request has priority
//////////////////////////



assign  mux3_sel_oq_req = dbb_rst_l & oq_count_nonzero;

mux2ds #(8) mux_mux3_req_vec_c6 ( .dout (mux3_req_vec_c6[7:0]),
                	.in0(mux2_req_vec_c6[7:0]), 
		 	.in1(oq_rd_out[7:0]),
           		.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_imiss1_oq_or_pipe ( .dout (imiss1_oq_or_pipe),
                        .in0(imiss1_to_xbar_tmp_c6), 
			.in1(imiss1_rd_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

mux2ds #(1) mux_rdma_oq_or_pipe ( .dout (rdma_oq_or_pipe),
                        .in0(rdma_to_xbar_tmp_c6), 
			.in1(oq_rdma_out),
                        .sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));

assign  imiss2_from_oq = {8{imiss2_rd_out}} & req_to_xbarq_c7 ;

mux2ds #(8) mux_imiss2_oq_or_pipe ( .dout (imiss2_oq_or_pipe[7:0]),
                  	.in0(imiss2_to_xbar_tmp_c6[7:0]), 
			.in1(imiss2_from_oq[7:0]),
                  	.sel0(~mux3_sel_oq_req), 
			.sel1(mux3_sel_oq_req));




//////////////////////////
// A 2 to 1 mux flop to select
// either the old request 
// or a new one.
//////////////////////////

mux2ds #(8) mux_req_to_xbar_c6 ( .dout (req_to_xbarq_c6[7:0]),
                        .in0(req_to_xbarq_c7[7:0]), 
			.in1(mux3_req_vec_c6[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_xbar_req_c7    (.din(req_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(req_to_xbarq_c7[7:0]), .se(se), .si(), .so());

// use a mux flop here
mux2ds #(1) mux_imiss1_to_xbar_c6 ( .dout (imiss1_to_xbarq_c6),
                        .in0(imiss1_to_xbarq_c7), 
			.in1(imiss1_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_imiss1_to_xbarq_c7 ( .din(imiss1_to_xbarq_c6), .clk(rclk),
                        .q(imiss1_to_xbarq_c7), .se(se), .si(),.so());


// use a mux flop here
mux2ds #(1) mux_rdma_to_xbar_c6 ( .dout (rdma_to_xbarq_c6),
                        .in0(rdma_to_xbarq_c7), 
			.in1(rdma_oq_or_pipe),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(1)  ff_rdma_to_xbarq_c7 ( .din(rdma_to_xbarq_c6), .clk(rclk),
                        .q(rdma_to_xbarq_c7), .se(se), .si(),.so());

// use a mux flop here
mux2ds #(8) mux_imiss2_to_xbar_c6 ( .dout (imiss2_to_xbarq_c6[7:0]),
                        .in0(imiss2_to_xbarq_c7[7:0]), 
			.in1(imiss2_oq_or_pipe[7:0]),
                        .sel0(sel_old_req), 
			.sel1(~sel_old_req));

dff_s   #(8)  ff_imiss2_to_xbarq_c7    ( .din(imiss2_to_xbarq_c6[7:0]), .clk(rclk),
                        .q(imiss2_to_xbarq_c7[7:0]), .se(se), .si(), .so());


///////////////////////////////////////////////////////////////////////////
// For TSO it is essential that a multicast request be queued up in all
// Xbar Qs at the same time. In order for this to happen, a request that 
// is multicast will have to wait for all destination Xbar Qs to be 
// available.
//
// The following requests are multicast requests.
// - eviction requests ( that go to atleast one cpu ).
// - interrupt broadcasts
// - store invalidates ( that go to more than one cpu ).
///////////////////////////////////////////////////////////////////////////


assign  bcast_st_req_c6 = {8{sel_stinv_req_c6}} & ~dec_cpu_c6  ;
assign  bcast_inval_req_c6  =  {8{sel_inv_vec_c6}}  ;

assign  bcast_req_c6 =  int_bcast_c6 |
        	(|( ( bcast_st_req_c6 | bcast_inval_req_c6) 
		& dirdp_req_vec_c6 ) )  ;

dff_s   #(1)  ff_bcast_req_c6    ( .din(bcast_req_c6), .clk(rclk),
               .q(bcast_req_c7), .se(se), .si(), .so());


mux2ds  #(1) mux_bcast_req_pipe (.dout(bcast_req_pipe),
                                .in0(bcast_req_c7),.in1(bcast_req_c6),
                                .sel0(sel_c7_req),.sel1(~sel_c7_req));

mux2ds  #(1) mux_bcast_req_oq_or_pipe ( .dout( bcast_req_oq_or_pipe),
                        .in0(bcast_req_pipe),.in1(oq_bcast_out),
                        .sel0(~oq_count_nonzero),.sel1(oq_count_nonzero));

// use a mux flop here
mux2ds #(1) mux_bcast_to_xbar_c6 ( .dout (bcast_to_xbar_c6),
                         .in0(bcast_to_xbar_c7), .in1(bcast_req_oq_or_pipe),
                         .sel0(sel_old_req), .sel1(~sel_old_req));

dff_s   #(1)  ff_bcast_to_xbar_c7    ( .din(bcast_to_xbar_c6), .clk(rclk),
                        .q(bcast_to_xbar_c7), .se(se), .si(),.so());


////////////////////////
// logic for disallowing a request from transmitting.
//
// A request that is in the pipe will be gated off  
// if:
/ = 