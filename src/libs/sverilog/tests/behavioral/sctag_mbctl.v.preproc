 
 



module sctag_mbctl( 
      so, mbctl_arbctl_cnt12_px2_prev, mbctl_arbctl_snp_cnt8_px1, 
   mbctl_arbctl_vld_px1, mbctl_nondep_fbhit_c3, mbctl_hit_c3, 
   mbctl_arbctl_hit_c3, mbctl_arbdp_ctrue_px2, mbctl_arb_l2rd_en, 
   mbctl_arb_dramrd_en, mbctl_tagctl_hit_unqual_c2, 
   mbctl_corr_err_c2, mbctl_uncorr_err_c2, mbctl_wr64_miss_comp_c3, 
   mbctl_wbctl_mbid_c4, mbf_insert_mbid_c4, mbf_insert_c4, 
   mbctl_hit_c4, mbf_delete_c4, mbctl_fbctl_next_vld_c4, 
   mbctl_fbctl_next_link_c4, mbctl_fbctl_dram_pick, mbctl_fbctl_fbid, 
   mbctl_fbctl_way, mbctl_fbctl_way_fbid_vld, mbtag_wr_en_c2, 
   mb_write_wl, mbctl_buf_rd_en, mb_read_wl, mbctl_dep_c8, 
   mb_data_write_wl, mbctl_evict_c8, mbctl_tecc_c8, mbctl_mbentry_c8, 
   mbdata_wr_en_c8, sctag_dram_rd_req, sctag_dram_rd_dummy_req, 
      tagctl_miss_unqual_c2, tagctl_hit_unqual_c2, tagctl_hit_c3, 
   tagctl_lru_way_c4, tagctl_rdma_vld_px0_p, mbctl_rdma_reg_vld_c2, 
   tagctl_hit_not_comp_c3, alt_tagctl_miss_unqual_c3, 
   arbdp_pst_with_ctrue_c2, arbdp_mbctl_pst_no_ctrue_c2, 
   decdp_cas2_inst_c2, arbdp_inst_mb_c2, decdp_pst_inst_c2, 
   decdp_cas1_inst_c2, arbdp_inst_mb_entry_c1, arbdp_tecc_inst_mb_c8, 
   arbdp_rdma_inst_c1, decdp_ld64_inst_c2, decdp_wr64_inst_c2, 
   decdp_bis_inst_c3, arbctl_csr_st_c2, arbctl_evict_vld_c2, 
   arbctl_mbctl_inst_vld_c2, arbctl_pst_ctrue_en_c8, 
   arbctl_mbctl_hit_off_c1, arbctl_evict_tecc_vld_c2, 
   arbdp_inst_dep_c2, arbdp_addr_c1c2comp_c1, arbdp_addr_c1c3comp_c1, 
   idx_c1c2comp_c1, idx_c1c3comp_c1, arbctl_mbctl_cas1_hit_c8, 
   arbctl_mbctl_ctrue_c9, arbctl_mbctl_mbsel_c1, mb_cam_match, 
   mb_cam_match_idx, decc_uncorr_err_c8, decc_spcd_corr_err_c8, 
   decc_spcfb_corr_err_c8, fbctl_mbctl_match_c2, 
   fbctl_mbctl_stinst_match_c2, fbctl_mbctl_entry_avail, 
   fbf_ready_miss_r1, fbf_enc_ld_mbid_r1, fbf_st_or_dep_rdy_c4, 
   fbf_enc_dep_mbid_c4, fb_count_eq_0, fbctl_mbctl_fbid_d2, 
   fbctl_mbctl_nofill_d2, wbctl_hit_unqual_c2, 
   wbctl_mbctl_dep_rdy_en, wbctl_mbctl_dep_mbid, 
   rdmatctl_hit_unqual_c2, rdmatctl_mbctl_dep_mbid, 
   rdmatctl_mbctl_dep_rdy_en, tagctl_mbctl_par_err_c3, 
   dram_sctag_rd_ack, l2_bypass_mode_on, l2_dir_map_on, rclk, arst_l, 
   grst_l, dbginit_l, si, se, rst_tri_en, arbctl_tecc_c2, 
   arbctl_mbctl_inval_inst_c2
   );

input	tagctl_miss_unqual_c2; input	tagctl_hit_unqual_c2;
input	tagctl_hit_c3 ; input	[3:0]	tagctl_lru_way_c4; 
input	tagctl_rdma_vld_px0_p; input	mbctl_rdma_reg_vld_c2; input	tagctl_hit_not_comp_c3; input	alt_tagctl_miss_unqual_c3; 

input	arbdp_pst_with_ctrue_c2 ; input	arbdp_mbctl_pst_no_ctrue_c2 ; input	decdp_cas2_inst_c2; input	arbdp_inst_mb_c2;
input	decdp_pst_inst_c2;
input	decdp_cas1_inst_c2;
input	[3:0]	arbdp_inst_mb_entry_c1;
input	arbdp_tecc_inst_mb_c8; 
input	arbdp_rdma_inst_c1; input	decdp_ld64_inst_c2; input	decdp_wr64_inst_c2;
input	decdp_bis_inst_c3; 
input	arbctl_csr_st_c2;
input	arbctl_evict_vld_c2 ; input	arbctl_mbctl_inst_vld_c2;
input	arbctl_pst_ctrue_en_c8; input	arbctl_mbctl_hit_off_c1; input	arbctl_evict_tecc_vld_c2; input	arbdp_inst_dep_c2 ; 

input	arbdp_addr_c1c2comp_c1; input	arbdp_addr_c1c3comp_c1; input	idx_c1c2comp_c1; input	idx_c1c3comp_c1; 
input	arbctl_mbctl_cas1_hit_c8;input	arbctl_mbctl_ctrue_c9 ; input	arbctl_mbctl_mbsel_c1;

input	[15:0]	mb_cam_match ; input	[15:0]	mb_cam_match_idx ; 
input	decc_uncorr_err_c8 ; input	decc_spcd_corr_err_c8;
input	decc_spcfb_corr_err_c8 ; 

input	fbctl_mbctl_match_c2 ; input	fbctl_mbctl_stinst_match_c2 ; input	fbctl_mbctl_entry_avail; input	fbf_ready_miss_r1; input	[3:0]	fbf_enc_ld_mbid_r1 ; input	fbf_st_or_dep_rdy_c4;input	[3:0] fbf_enc_dep_mbid_c4; input	fb_count_eq_0; input	[2:0]	fbctl_mbctl_fbid_d2 ; input		fbctl_mbctl_nofill_d2;
input	wbctl_hit_unqual_c2 ; input	wbctl_mbctl_dep_rdy_en ; input	[3:0]	wbctl_mbctl_dep_mbid; 
input	rdmatctl_hit_unqual_c2; input	[3:0]	rdmatctl_mbctl_dep_mbid; input	rdmatctl_mbctl_dep_rdy_en;


input	tagctl_mbctl_par_err_c3 ; 
input	dram_sctag_rd_ack;

input	l2_bypass_mode_on;
input	l2_dir_map_on; 



input	rclk;
input	arst_l;
input	grst_l;
input	dbginit_l;
input	si, se;
input	rst_tri_en;

input	arbctl_tecc_c2; 
output	so;


output		mbctl_arbctl_cnt12_px2_prev ;
output		mbctl_arbctl_snp_cnt8_px1;
output		mbctl_arbctl_vld_px1 ; 
output		mbctl_nondep_fbhit_c3; 
output	mbctl_hit_c3; 
output	mbctl_arbctl_hit_c3 ; input	arbctl_mbctl_inval_inst_c2 ; 

output	mbctl_arbdp_ctrue_px2; output	mbctl_arb_l2rd_en; output	mbctl_arb_dramrd_en; 
output	mbctl_tagctl_hit_unqual_c2;
output	mbctl_corr_err_c2, mbctl_uncorr_err_c2 ;
output	mbctl_wr64_miss_comp_c3; 
output	[3:0]	mbctl_wbctl_mbid_c4; 
output	[3:0]	mbf_insert_mbid_c4;
output		mbf_insert_c4;
output 		mbctl_hit_c4;
output		mbf_delete_c4;
output		mbctl_fbctl_next_vld_c4;
output	[3:0]	mbctl_fbctl_next_link_c4;
output		mbctl_fbctl_dram_pick ;

output	[2:0]	mbctl_fbctl_fbid;
output	[3:0]	mbctl_fbctl_way ;
output		mbctl_fbctl_way_fbid_vld ;

output		mbtag_wr_en_c2 ;output	[15:0]	mb_write_wl ; output		mbctl_buf_rd_en; output	[15:0]	mb_read_wl ; 
output		mbctl_dep_c8; output	[15:0]	mb_data_write_wl; output		mbctl_evict_c8; output		mbctl_tecc_c8 ; output	[3:0]	mbctl_mbentry_c8 ; output		mbdata_wr_en_c8  ;

output	sctag_dram_rd_req ;
output	sctag_dram_rd_dummy_req;

wire	; 
wire	mbf_delete_miss_c2;
wire	mbf_delete_c2, mbf_delete_c3;
wire	[15:0]	reset_valid_bit_c3;
wire	[15:0]	mb_write_ptr_c2, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co; 
wire	;
wire	mbf_delete_c2, mbf_delete_c3;
wire	[15:0]	reset_valid_bit_c3;
wire	[15:0]	mb_write_ptr_c2, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbf_delete_c3;
wire	[15:0]	reset_valid_bit_c3;
wire	[15:0]	mb_write_ptr_c2, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	reset_valid_bit_c3;
wire	[15:0]	mb_write_ptr_c2, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	[15:0]	mb_write_ptr_c2, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_write_ptr_c3 ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	mb_entry_c3;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	;
wire	[15:0]	dec_mb_entry_c3;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;


wire    [4:0]   mb_count_prev;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;


wire    [4:0]   ;
wire    [4:0]   mb_count_c4; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire    [4:0]   ; // Actual count.
wire    [4:0]   mb_count_plus1;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co; wire    [4:0]   ;
wire    [4:0]   mb_count_minus1;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire    [4:0]   ;
wire		cnt_reset, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire		, mb_count_en ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_tag_wr_wl_c3;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	;

wire	[3:0]	inst_mb_entry_c2;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	[3:0]	;
wire	[15:0] cam_hit_vec_c1 ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]  ;
wire	[15:0] hit_off_bypass_vec_c1 ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]  ;
wire	[15:0] hit_on_bypass_vec_c1 ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]  ;
wire	[15:0] tmp_cam_hit_vec_c1, tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0] , tmp_cam_hit_vec_c2 ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	tmp_cam_hit_c2;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	;
wire		mbctl_hit_c2;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire		;
wire	[15:0]	mbctl_hit_vec_c2, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mbctl_hit_vec_c3;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	dec_mb_entry_c2;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;

wire	inst_mb_c3;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	;
wire	mb_inst_vld_c3;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	mb_rewrite_en_c3;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	mbdata_wr_en_c3, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbdata_wr_en_c4;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	mbdata_wr_en_c5, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbdata_wr_en_c6;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	mbdata_wr_en_c7  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	  ;

wire	[3:0]	enc_tag_wr_wl_c2, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co  ;

wire	[3:0]	, enc_tag_wr_wl_c3;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	insert_ptr_c8 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	 ;
wire	[15:0]	mb_data_wr_wl_c8 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	 ;

wire	[3:0]	enc_data_wr_wl_c4, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	[3:0]	, enc_data_wr_wl_c5;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	enc_data_wr_wl_c6, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, enc_data_wr_wl_c7;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	enc_data_wr_wl_c8 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;

// Control Bits.
wire	[15:0]	mb_valid_prev, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	[15:0]	, mb_valid;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_bis_prev, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_bis;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_rdma_prev, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_rdma;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_young_prev, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_young ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_ctrue_prev, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_ctrue ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_dram_ready, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_dram_ready_in;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_evict_ready, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_evict_ready_in ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_tecc_ready, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_tecc_ready_in ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_data_vld_in, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_data_vld;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_l2_ready_in, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_l2_ready;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_way_vld_in , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	 , mb_way_vld ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ,  ;
wire	[15:0]	mb_fbid_vld_in , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	 , mb_fbid_vld ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ,  ;
wire	[15:0]	mb_corr_err_in, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_corr_err ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	mb_uncorr_err_in, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	, mb_uncorr_err ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;

wire	[3:0]	way0, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	[3:0]	, way1, way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way2, way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way3 ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	way4, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, way5, way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way6, way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way7 ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	way8, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, way9, way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way10, way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way11 ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	way12, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, way13, way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way14, way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way15 ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	next_link_entry0, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, next_link_entry1, next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry2, next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry3;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	next_link_entry4, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, next_link_entry5, next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry6, next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry7;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	next_link_entry8, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, next_link_entry9, next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry10, next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry11;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	next_link_entry12, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, next_link_entry13, next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry14, next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , next_link_entry15;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[2:0]	fbid0, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[2:0]	, fbid1, fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid2, fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid3 ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[2:0]	fbid4, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[2:0]	, fbid5, fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid6, fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid7 ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[2:0]	fbid8, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[2:0]	, fbid9, fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid10, fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid11 ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[2:0]	fbid12, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[2:0]	, fbid13, fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid14, fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid15 ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;



wire	[15:0]	 mb_way_fb_vld_reset ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;



wire	[15:0]	  ;
wire	[15:0]	way_fbid_vld;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	;

// Mux selects for muxing out the next link field
wire	sel_0to3, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, sel_4to7, sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , sel_8to11, sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , sel_12to15 ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	sel_default_0123, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	, sel_default_4567 ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	sel_default_89ab, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	, sel_default_cdef ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	sel_default_nlink;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	;

wire		mbctl_next_vld_c3;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire		;
wire	[3:0]	mbctl_next_link_c3;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;

wire	inst_mb_c4, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, inst_mb_c5, inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , inst_mb_c6;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	inst_mb_c7, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, inst_mb_c8;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	cas_rdy_set_c9;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	[15:0]	cas_ctrue_set_c9;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	[3:0] 	mbctl_ctrue_rdy_entry;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0] 	;
wire	[3:0]	nextlink_id0123, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, nextlink_id4567 ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	nextlink_id89ab, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, nextlink_idcdef ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[15:0]	next_link_wr_en_c3 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	 ;
wire	[3:0]	enc_data_wr_wl_c3;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	;

wire	mb_hit_off_c1_d1;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	;

wire	mbctl_dep_inst_c3, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, mbctl_dep_inst_c4;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	mbctl_dep_inst_c5, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbctl_dep_inst_c6;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	mbctl_dep_inst_c7;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;


wire	mbctl_mark_evict_tmp_c2;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;


wire	;
wire	mbctl_mark_evict_tmp_c3;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	mbctl_mark_dram_rdy_c3;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	dram_rdy_c4, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, dram_rdy_c5 ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	dram_rdy_c6, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	, dram_rdy_c7, dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , dram_rdy_c8 ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	mbctl_evict_c7;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	;

wire	mbctl_tecc_c4, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, mbctl_tecc_c5 ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	mbctl_tecc_c6, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	, mbctl_tecc_c7 ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;

wire	[15:0]	dram_ready_set_c8, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	[15:0]	, reset_dram_ready ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire		dram_pick;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire		;

wire	dram_ack_pending_in;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	;
wire	dram_ack_pend_state;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	dram_sctag_rd_ack_d1;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;

wire		ready_miss_r2;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire		;
wire	[3:0]	ld_mbid_r2 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;
wire	[15:0]	mb_miss_rdy_r2 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	 ; 
wire	st_or_dep_rdy_c5;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ; 
wire	;
wire	[3:0]	dep_mbid_c5;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	[15:0]	fb_dep_rdy_c5;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	cas1_inst_c3;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	mb_dep_rdy_en_c3, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mb_dep_rdy_en_c4;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	mb_dep_rdy_c4;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	[3:0]	wbb_dep_mbid_d1;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire		wbb_dep_rdy_en_d1;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire		;
wire	[15:0]	wbb_dep_rdy_d1;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
wire	rdmat_dep_rdy_en_d1;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	[3:0]	rdmat_dep_mbid_d1;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	[15:0]	rdmat_dep_rdy_d1;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;

wire	mbid_vld_in, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, mbid_vld;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	set_mbid_vld, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, reset_mbid_vld, set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , set_mbid_vld_prev;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	rdy_csr_inst_en;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	[3:0]	csr_mbid;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	[15:0]	csr_inst_rdy ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	 ;
wire	[15:0]	cas2_or_pst_rdy_c8;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[15:0]	;
wire	dram_pick_prev;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;

wire	[15:0]	l2_pick_vec, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	[15:0]	, dram_pick_vec, mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , mb_read_pick_vec ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	pick_quad0_in, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, pick_quad1_in, pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_quad2_in, pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_quad3_in;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	pick_quad_in;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;

wire		sel_dram_lshift, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire		, sel_dram_same ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	dram_pick_state_lshift, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, dram_pick_state,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ,dram_pick_state_prev ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;

wire		sel_dram_lshift_quad0, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire		, sel_dram_same_quad0 ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	dram_pick_state_lshift_quad0, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, dram_pick_state_quad0;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	dram_pick_state_prev_quad0 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;

wire		sel_dram_lshift_quad1, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire		, sel_dram_same_quad1 ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	dram_pick_state_lshift_quad1, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, dram_pick_state_quad1;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	dram_pick_state_prev_quad1 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;

wire		sel_dram_lshift_quad2, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire		, sel_dram_same_quad2 ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	dram_pick_state_lshift_quad2, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, dram_pick_state_quad2;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	dram_pick_state_prev_quad2 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;

wire		sel_dram_lshift_quad3, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire		, sel_dram_same_quad3 ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	dram_pick_state_lshift_quad3, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, dram_pick_state_quad3;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	dram_pick_state_prev_quad3 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	 ;

wire	sel_l2_lshift, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	, sel_l2_same, init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , init_pick_state;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state_prev, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, l2_pick_state_lshift;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	sel_l2_lshift_quad0, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, sel_l2_same_quad0 ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	l2_pick_state_prev_quad0, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, l2_pick_state_lshift_quad0;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state_quad0;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	sel_l2_lshift_quad1, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, sel_l2_same_quad1 ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	l2_pick_state_prev_quad1, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, l2_pick_state_lshift_quad1;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state_quad1;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	sel_l2_lshift_quad2, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, sel_l2_same_quad2 ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	l2_pick_state_prev_quad2, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, l2_pick_state_lshift_quad2;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state_quad2;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	sel_l2_lshift_quad3, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, sel_l2_same_quad3 ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	l2_pick_state_prev_quad3, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, l2_pick_state_lshift_quad3;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	l2_pick_state_quad3;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	[3:0]	pick_state;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	;
wire	[3:0]	pick_state_quad0, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, pick_state_quad1;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[3:0]	pick_state_quad2, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, pick_state_quad3;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	pick_s0_quad0, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, 	pick_s1_quad0, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, 	, pick_s2_quad0, pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s3_quad0;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	pick_s0_quad1, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, 	pick_s1_quad1, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, 	, pick_s2_quad1, pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s3_quad1;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	pick_s0_quad2, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, 	pick_s1_quad2, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, 	, pick_s2_quad2, pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s3_quad2;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	pick_s0_quad3, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, 	pick_s1_quad3, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, 	, pick_s2_quad3, pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s3_quad3;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	pick_s0, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, pick_s1, pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s2, pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , pick_s3 ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	pick_quad0_sel, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, pick_quad1_sel ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	pick_quad2_sel, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	, pick_quad3_sel ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	pick_quad_sel;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	;
wire	[15:0]	picker_out, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, picker_out_d1, picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , picker_out_d2 ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire		picker_out_qual;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire		;

wire	l2_pick, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, l2_pick_d1;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	l2_wait_set, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, l2_wait_reset ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	l2_wait_in, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	, l2_wait ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	l2_pick_read_ctrue;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	;
wire	evict_vld_unqual_c3;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;

wire	evict_vld_c3, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, evict_vld_c4;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[15:0]	dec_wr_wl_c4;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	;
 wire	[15:0]	dec_dram_pick_d2 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
 wire	[15:0]	 ;

wire	way_fbid_rd_vld_prev;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	;
wire	fbsel_0to3, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, fbsel_4to7, fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbsel_8to11; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ; 
wire	fbsel_def_0123, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co; 
wire	, fbsel_def_4567, fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbsel_def_89ab, fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbsel_def_cdef ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	fbsel_def_vld ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	 ; 
wire	[3:0]	way0123, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ; 
wire	[3:0]	, way4567, way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , way89ab, waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , waycdef;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	[2:0]	fbid0123, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[2:0]	, fbid4567, fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbid89ab, fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , fbidcdef ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;

wire	[15:0]	mb_entry_dec_c1;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	[15:0]	;
wire	mbctl_corr_err_unqual_c2, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbctl_uncorr_err_unqual_c2;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	mbctl_corr_err_c1, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, mbctl_uncorr_err_c1 ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;
wire	[3:0]	mbf_insert_mbid_c3;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;
wire	[3:0]	;
wire		mbf_insert_c3;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire		;
wire	nondep_fbhit_c2_unqual;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	rdma_inst_c3;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;
wire	[15:0]	mb_l2_ready_qual_in, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[15:0]	, mb_l2_ready_qual ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co,  ;

wire	mbf_insert_c3_tmp, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co ;

wire	, inst_mb_c3_1;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	wr64_inst_c3;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	;

wire	mb_rdma_count_en;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	;
wire	[3:0]	mb_rdma_count_c4, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	[3:0]	, mb_rdma_count_plus1; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ; 
wire	[3:0]	mb_rdma_count_prev, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co; 
wire	[3:0]	, mb_rdma_count_minus1; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ; 
wire	inc_rdma_cnt_c3;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co; 
wire	;

wire	buffer_miss_vld_c2, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;

wire	, buffer_miss_vld_c3;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	rdma_comp_rdy_c3, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, rdma_comp_rdy_c4, rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, , rdma_comp_rdy_c5;
wire	rdma_comp_rdy_c6, rdma_co, ;
wire	rdma_comp_rdy_c6, rdma_co;
wire	, rdma_co, , rdma_comp_rdy_c8 ;
wire	wr64_miss_not_comp_c3;
wire	ld64_inst_c3, ld64_inst_c4, ld64_inst_c5 ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	wr64_miss_not_comp_c3;
wire	ld64_inst_c3, ld64_inst_c4, ld64_inst_c5 ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	;
wire	ld64_inst_c3, ld64_inst_c4, ld64_inst_c5 ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, ld64_inst_c4, ld64_inst_c5 ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, , ld64_inst_c5 ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	ld64_inst_c6, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	, ld64_inst_c7 ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;

wire	fbctl_match_c3, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

wire	, fbctl_match_c3_unqual ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	l2_bypass_mode_on_d1;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	;

wire	mbctl_rdma_gate_off_c2;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	;
wire	rdma_reg_vld_c3;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	fbctl_stinst_match_c3;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	dummy_req_d1, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, dummy_req_d2 ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;

wire	[15:0]	mb_cam_hit_vec_c1 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

wire	[15:0]	 ;

wire	tmp_cam_hit_c1_3to0, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

wire	, tmp_cam_hit_c1_7to4;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	tmp_cam_hit_c1_11to8, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, tmp_cam_hit_c1_15to12;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	tmp_cam_hit_c2_3to0, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, tmp_cam_hit_c2_7to4;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	tmp_cam_hit_c2_11to8, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, tmp_cam_hit_c2_15to12;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;

wire	l2_dir_map_on_d1;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	;
wire	mbctl_c1c3_match_c1;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	mbctl_c1c2_match_c1, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, mbctl_c1c2_match_c1_d1;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire    [15:0]  mb_valid_ifin;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire    [15:0]  ;
wire	dram_pick_1, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, dram_pick_2_l ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;

wire	evict_par_err_c3, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

wire	, evict_par_err_c4; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ; 
wire	evict_par_err_c5; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////; 
wire	; 
wire	evict_par_err_c6, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////; 
wire	, evict_par_err_c7; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ; 
wire	[15:0]	mb_tag_wr_wl_c3_tmp;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////; 
wire	[15:0]	;

wire	[15:0]	cam_idx_hit_vec_c1, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	[15:0]	, idx_on_bypass_vec_c1;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[15:0]	tmp_idx_hit_vec_c1, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[15:0]	, tmp_idx_hit_vec_c2;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[15:0]	mbctl_idx_hit_vec_c2, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[15:0]	, mbctl_idx_hit_vec_c3 ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	tmp_hit_unqual_c2 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	 ;
wire	nondep_fbhit_c3_unqual;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	;
wire	hit_vec_qual, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, idx_hit_vec_qual;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	mbissue_inst_vld_c2;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;

wire	[1:0]	cout1;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	[1:0]	;
wire	[1:0]	cout2;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[1:0]	;
wire	[1:0]	cout3;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[1:0]	;
wire	[1:0]	cout4;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[1:0]	;
wire	[1:0]	cout5;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[1:0]	;

wire	[2:0]	cout2_1;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	[2:0]	;
wire	[2:0]	cout2_2;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[2:0]	;
wire	[2:0]	cout2_3;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[2:0]	;

wire	[3:0]	cout3_tmp ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	[3:0]	 ;
wire	[4:0]	cout3_final ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	[4:0]	 ;

wire	set_mb_idx_full_c4, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

wire	, reset_mb_idx_full_c4 ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	mb_idx_count_full_c4, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	, mb_idx_count_full_c5;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[4:0]	hit_count_c4;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[4:0]	;

wire	mb_rewrite_en_c4;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	;
wire	mb_rewrite_en_c5, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, mb_rewrite_en_c6;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	mb_rewrite_en_c7, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, mb_rewrite_en_c8;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;

wire	[3:0]	dec_low_insert_ptr, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;

wire	[3:0]	, dec_hi_insert_ptr;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	mb_inst_vld_c3_1;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	[15:0]	mb_way_fb_vld_tmp;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[15:0]	;
wire		mb_way_fb_vld_tmp_0to3;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire		;
wire		mb_way_fb_vld_tmp_4to7;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire		;
wire		mb_way_fb_vld_tmp_8to11;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire		;
wire            dbb_rst_l;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire            ;
wire	mbctl_tecc_c3;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire tagctl_hit_unqual_c3;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire ;
wire	mb_inst_vld_c3_2;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	mbctl_c1c2_match_c1_d1_1;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	mbf_insert_c3_tmp_1, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, mbf_delete_c3_tmp_1 ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	inst_mb_c3_2;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	;
wire	dram_pick_2;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	evict_tecc_vld_c3;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	mbctl_dep_inst_c2;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	dep_inst_c3, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, tecc_c3 ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	inst_mb_c9;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	;
wire	[3:0]	enc_data_wr_wl_c9;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[3:0]	;
wire	cas1_hit_c9;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	uncorr_err_c9;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
wire	[15:0]	pst_ctrue_set_c8;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[15:0]	;
wire	mbctl_corr_err_c8; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	; 

wire	rdma_inst_c2;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////; 

wire	;
wire	fbsel_0to3_d1, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, fbsel_4to7_d1;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	fbsel_8to11_d1, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, fbsel_def_vld_d1;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	sel_mux0, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, sel_mux1;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	sel_mux2, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	, sel_mux3;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[3:0]	way0123_d1, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[3:0]	, way4567_d1 ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	[3:0]	way89ab_d1, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	[3:0]	, waycdef_d1 ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////,  ;
wire	[2:0]	fbid0123_d1, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;
wire	[2:0]	, fbid4567_d1;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[2:0]	fbid89ab_d1, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[2:0]	, fbidcdef_d1;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////, ;
wire	[3:0]	enc_data_wr_wl_c7_1;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[3:0]	;
wire	[3:0]	mb_entry_c3_1;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	[3:0]	;
wire	mb_inval_inst_c3;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;
wire	;
/////////////////////////////////////////////////////////////////
//
// OFF mode  exceptions in  mbctl:
//
// 1) In the L2 off mode,  a mbf dependent is readied on a
//    fill buffer hit unless, the fill buffer entry has fb_stinst=1
//    or the instruction hitting the FIll Buffer is a CAS1 
//
// 2) Eviction pass is turned off by preventing the setting of
//    the EVICT bit. Remember to not turn off the dram request.
//	( Look at the expression for mbctl_evict_c7 )
//
/////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
 // Reset flop
 ///////////////////////////////////////////////////////////////////

 dffrl_async    #(1)    reset_flop      (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////;


  
 dffrl_async    #(1)          (.q(dbb_rst_l),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////      (.q(),
                                        .clk(rclk),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////),
                                        .clk(),
                                        .rst_l(arst_l),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////),
                                        .rst_l(),
                                        .din(grst_l),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////),
                                        .din(),
                                        .se(se), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////),
                                        .se(), .si(), .so());



/////////////////////////////////////////////////////////////////
// An RDMA instruction that is not a PST will not access the
// $  or the FB if the rdma reg vld is asserted.
//
// This signal is used for gating off completions becuase of
// FB hits.
/////////////////////////////////////////////////////////////////

assign  mbctl_rdma_gate_off_c2 = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());




assign   = ( mbctl_rdma_reg_vld_c2 
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// = (  
                                //~arbdp_mbctl_pst_no_ctrue_c2  not needed since we use this  for completions only
                                & rdma_inst_c2 );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// 
                                                                &  );


///////////////////////////////////////////////////////////////////////////
// MISS BUFFER INSERTION : An entry is inserted into the Miss Buffer under
//	the following conditions
//	* Valid instruction has to be a non Miss Buffer
//	  instruction AND
//	* An L2 tag miss with the following exceptions
//		- Tecc instruction
//		- diagnostic instruction
//		- interrupt instruction.
//		- inval instruction.
//		- cas2 instruction.
//		- wr64 instruction not hitting the fill Buffer
//	* A Pst with no ctrue ( INcludes LDSTUB/SWAPS)
//	* An rdma instrution that encounters rdma_reg_vld.
//	* A CAS2 instruction 
//	* Miss Buffer hit.
//	* WB or RDMAt hit.
//	* CSR store.
//	**** A non Allocating instruction that encounters a Parity error.
//
// MISS BUFFER DELETION : An entry is deleted from the Miss Buffer if
//	* It is issued from the Miss Buffer
//	  AND
//	* a non-partial store $ or FB hit.
//	* Pst with ctrue $ or FB hit.
//	* CSR store from the Miss Buffer. 
//
// MISS BUFFER INSERTION PIPELINE:
//---------------------------------------------------------------------
// 	C1		C2		C3		C4
//---------------------------------------------------------------------
//	Cam		generate	write		valid=1
//	mbf		wr ptr		mbf tag
//							mb_count[4:0]
//							mb_count>5
//							mb_count>12
//					insertion
//					condition
//					counter
//					logic
//---------------------------------------------------------------------
// TIMING tagctl_miss_unqual_c2 is the most critical condition for insertion.
//	  It takes ~17 gates to arrive at mbctl.
//	  If parity has to be factored into the insertion equation, it would have
//	  to be Ored in C3. 
//	  
//	
//////////////////////////////////////////////////////////////////////////


assign	mbtag_wr_en_c2 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// );




assign	 = ~arbdp_inst_mb_c2 & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// = ~ & arbctl_mbctl_inst_vld_c2 ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// &  ;

assign	mbf_insert_c2 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;

assign	 =  ( 
			((arbdp_mbctl_pst_no_ctrue_c2 | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// =  ( 
			(( | // pst no ctrue
			decdp_cas2_inst_c2 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// | 			 |  // cas2
			arbctl_csr_st_c2 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// |  			 ) |  // csr store c2
			wbctl_hit_unqual_c2 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ) |  			 | // wb tag match
			rdmatctl_hit_unqual_c2 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// | 			 | // rdma tag match
			mbctl_rdma_gate_off_c2 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// | 			 ) &  // rdma reg vld.
			mbtag_wr_en_c2 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ) &  			 )  |
			mbctl_hit_c2 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// )  |
			 |  // dependent insertion.
			( tagctl_miss_unqual_c2 & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// |  			(  & 
			 ~(decdp_wr64_inst_c2 & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// & 
			 ~( & ~fbctl_mbctl_match_c2) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// & ~) & // not an RDMA 64B write that misses FB
			mbtag_wr_en_c2 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////) & 			 ); 

// Parity error insertion is turned off for a tag hit 
dff_s   #(1)  ff_tagctl_hit_unqual_c3    (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ); 

dff_s   #(1)      (.din(tagctl_hit_unqual_c2), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(tagctl_hit_unqual_c3), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

//assign	 mbctl_tagctl_hit_unqual_c3 = tagctl_hit_unqual_c3 ;


			
dff_s   #(1)  ff_mbf_insert_c3    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());



			
dff_s   #(1)      (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(mbf_insert_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

dff_s   #(1)  ff_mbf_insert_c3_1    (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());

dff_s   #(1)      (.din(mbf_insert_c2), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(mbf_insert_c3_tmp_1), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

dff_s   #(1)  ff_inst_mb_c3_1    (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());

dff_s   #(1)      (.din(arbdp_inst_mb_c2), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(inst_mb_c3_1), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

assign	mbf_insert_c3 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());

assign	 = mbf_insert_c3_tmp | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// =  | ( ~inst_mb_c3_1 & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// | ( ~ & 
				tagctl_mbctl_par_err_c3  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// & 
				  &
				~tagctl_hit_unqual_c3 ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////  &
				~ ) ;	// tecc insert is 
								// the most critical 
								// insertion condition.





assign	mbf_delete_miss_c2 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ) ;																	




assign	 = ( ~decdp_pst_inst_c2 |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// = ( ~ |  // non partial store inst
				arbdp_pst_with_ctrue_c2 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// |  				 ) & // pst with ctrue
			 	mbissue_inst_vld_c2 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ) & 			 	 &
				( tagctl_hit_unqual_c2 | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// &
				(  | 
				(fbctl_mbctl_match_c2 & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// | 
				( & 
				~mbctl_rdma_gate_off_c2 )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// & 
				~ )) ;

//-----\/ FIX for bug #4619 --\/-----
// inval/csr instructions will get deleted from the miss buffer
// when they are issued out of there.
//-----\/ FIX for bug #4619 --\/-----

assign	mbf_delete_c2  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// )) ;


assign	  = ( ( arbctl_csr_st_c2 | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////  = ( (  | arbctl_mbctl_inval_inst_c2 )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// |  )  
			& mbissue_inst_vld_c2   )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// )  
			&    )  |
		 	mbf_delete_miss_c2 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////   )  |
		 	 ;  // delete a miss after it hits $ or FB


dff_s   #(1)  ff_mbf_delete_c3    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// ;  

dff_s   #(1)      (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(mbf_delete_c3_tmp), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

dff_s   #(1)  ff_mbf_delete_c3_1    (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());

dff_s   #(1)      (.din(mbf_delete_c2), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////    (.din(), .clk(rclk), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .clk(), 
		.q(mbf_delete_c3_tmp_1), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), 
		.q(), .se(se), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .se(), .si(), .so());

assign	mbf_delete_c3 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////), .si(), .so());

assign	 = ( inst_mb_c3 & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// = (  & mbctl_wr64_miss_comp_c3  & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

///// &   & ~tagctl_mbctl_par_err_c3) | mbf_delete_c3_tmp ; 

/////  & ~) | mbf_delete_c3_tmp ; 

/////) |  ; 

///// ; 



assign	 =  fbctl_mbctl_match_c2 & 
				~mbctl_tagctl_hit_unqual_c2 ; 

//dff   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk), 
		//.q(nondep_fbhit_c3_unqual), .se(se), .si(), .so());
//
//assign	mbctl_nondep_fbhit_c3 = nondep_fbhit_c3_unqual & 
				//~tagctl_mbctl_par_err_c3 &
				//mb_inst_vld_c3 ;

// -------------\/ FIX for int_5.0 \/-------------------------------
// mbctl_nondep_fbhit_c3 is no longer qualfied with mb_inst_vld_c3
// or tagctl_mbctl_par_err_c3 since it is a critical signal.
// -----------------------------------------------------------------

dff_s   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c =   & 
				~mbctl_tagctl_hit_unqual_c2 ; 

//dff   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk), 
		//.q(nondep_fbhit_c3_unqual), .se(se), .si(), .so());
//
//assign	mbctl_nondep_fbhit_c3 = nondep_fbhit_c3_unqual & 
				//~tagctl_mbctl_par_err_c3 &
				//mb_inst_vld_c3 ;

// -------------\/ FIX for int_5.0 \/-------------------------------
// mbctl_nondep_fbhit_c3 is no longer qualfied with mb_inst_vld_c3
// or tagctl_mbctl_par_err_c3 since it is a critical signal.
// -----------------------------------------------------------------

dff_s   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c & 
				~ ; 

//dff   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk), 
		//.q(nondep_fbhit_c3_unqual), .se(se), .si(), .so());
//
//assign	mbctl_nondep_fbhit_c3 = nondep_fbhit_c3_unqual & 
				//~tagctl_mbctl_par_err_c3 &
				//mb_inst_vld_c3 ;

// -------------\/ FIX for int_5.0 \/-------------------------------
// mbctl_nondep_fbhit_c3 is no longer qualfied with mb_inst_vld_c3
// or tagctl_mbctl_par_err_c3 since it is a critical signal.
// -----------------------------------------------------------------

dff_s   #(1)  ff_mbctl_nondep_fbhit_c3    (.din(nondep_fbhit_c2_unqual), .clk(rclk),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c ; 

										

dff_s   #(1)      (.din(nondep_fbhit_c2_unqual), .clk(rclk),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c    (.din(), .clk(rclk),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .clk(),
                .q(mbctl_nondep_fbhit_c3), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c),
                .q(), .se(se), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .se(), .si(), .so());



//////////////////////////////////////////////////////////////////////////////
// mbf Insertion pointer.
// The Insertion pointer is determined in C2 based on the 
// valid bit written by the C4 instruction. One cycle of
// forwarding is required to prevent overwriting a valid
// entry as shown in the following pipeline.
//-----------------------------------------------------
//	C2		C3		C4
//-----------------------------------------------------
//	calc.		write		valid=1
//	wr ptr.
//-----------------------------------------------------
//			C2		C3		
//-----------------------------------------------------
//			calc		
//			wr ptr.
//
// 	Timing optimization: The wr ptr in C2 can assume that the 
// 	operation in C3 is going to insert. This will not affect the
//	insertion of the C2 op even if the assumption turns out to 
//	be incorrect.
/////////////////////////////////////////////////////////////////////////////////





assign  mb_valid_ifin = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .si(), .so());








assign   = ( mb_valid | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c = (  | (mb_write_ptr_c3 & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c | ( & 
			{16{mb_inst_vld_c3_1}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c & 
			{16{}} ));

assign  mb_write_ptr_c2[0] = ~mb_valid_ifin[0];
assign  mb_write_ptr_c2[1] = ~mb_valid_ifin[1] &       (mb_valid_ifin[0]) ;
assign  mb_write_ptr_c2[2] = ~mb_valid_ifin[2] &   (&(mb_valid_ifin[1:0])) ;
assign  mb_write_ptr_c2[3] = ~mb_valid_ifin[3] &  (&(mb_valid_ifin[2:0])) ;
assign  mb_write_ptr_c2[4] = ~mb_valid_ifin[4] &  (&(mb_valid_ifin[3:0])) ;
assign  mb_write_ptr_c2[5] = ~mb_valid_ifin[5] &   (&(mb_valid_ifin[4:0])) ;
assign  mb_write_ptr_c2[6] = ~mb_valid_ifin[6] &   (&(mb_valid_ifin[5:0])) ;
assign  mb_write_ptr_c2[7] = ~mb_valid_ifin[7] &   (&(mb_valid_ifin[6:0])) ;
assign  mb_write_ptr_c2[8] = ~mb_valid_ifin[8] &   (&(mb_valid_ifin[7:0])) ;
assign  mb_write_ptr_c2[9] = ~mb_valid_ifin[9] &   (&(mb_valid_ifin[8:0])) ;
assign  mb_write_ptr_c2[10] = ~mb_valid_ifin[10] &   (&(mb_valid_ifin[9:0])) ;
assign  mb_write_ptr_c2[11] = ~mb_valid_ifin[11] &   (&(mb_valid_ifin[10:0])) ;
assign  mb_write_ptr_c2[12] = ~mb_valid_ifin[12] &   (&(mb_valid_ifin[11:0])) ;
assign  mb_write_ptr_c2[13] = ~mb_valid_ifin[13] &   (&(mb_valid_ifin[12:0])) ;
assign  mb_write_ptr_c2[14] = ~mb_valid_ifin[14] &   (&(mb_valid_ifin[13:0])) ;
assign  mb_write_ptr_c2[15] = ~mb_valid_ifin[15] &   (&(mb_valid_ifin[14:0])) ;


assign	mb_write_wl = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c}} ));

assign  [0] = ~[0];
assign  [1] = ~[1] &       ([0]) ;
assign  [2] = ~[2] &   (&([1:0])) ;
assign  [3] = ~[3] &  (&([2:0])) ;
assign  [4] = ~[4] &  (&([3:0])) ;
assign  [5] = ~[5] &   (&([4:0])) ;
assign  [6] = ~[6] &   (&([5:0])) ;
assign  [7] = ~[7] &   (&([6:0])) ;
assign  [8] = ~[8] &   (&([7:0])) ;
assign  [9] = ~[9] &   (&([8:0])) ;
assign  [10] = ~[10] &   (&([9:0])) ;
assign  [11] = ~[11] &   (&([10:0])) ;
assign  [12] = ~[12] &   (&([11:0])) ;
assign  [13] = ~[13] &   (&([12:0])) ;
assign  [14] = ~[14] &   (&([13:0])) ;
assign  [15] = ~[15] &   (&([14:0])) ;


assign	 = mb_write_ptr_c2 ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c =  ; // wordline for mbtag write

//////////////////////////////////////////////////////////////
// Generate 2 signals  :
// mb_count, 
// mbctl_arbctl_cnt12_px2 count >= 12
//
// The cnt12 condition is calculated in C3 and staged to C4.
// The inflight instructions that need to be accounted for are
// PX2*, C1, C2 C3, 
//
// ( The PX2 instruction is not stalled if it is the 2nd packet
// of a CAS instruction and if the first one has gone through.)
// Hence the high water mark is asserted when there are 12 or
// more instructions in the Miss Buffer.
//
// Timing notes:
// The mb_cnt12_px2_prev is calculated in the C3 stage 
// every "valid" C3 op is presumed to insert if it is not issued
// from the Miss Buffer. If this is the case, the Miss Buffer will
// have to accomodate the ops in C2, C1, PX2 and PX1. Hence this
// signal is asserted when the miss buffer counter is at 11 
// and the C3 op is not from the miss buffer. OR
// if the miss buffer counter > 11
//
//////////////////////////////////////////////////////////////

assign	cnt_reset = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c ; 

assign	 = ( ~dbb_rst_l ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c = ( ~ ) ;

// insertion and deletion cannot happen at the same time.
assign	mb_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c ) ;

assign	 = ( mbf_insert_c3 | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c = (  | mbf_delete_c3 ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c |  ) ;
 

assign  mb_count_plus1  = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c ) ;
 

assign    = mb_count_c4+ 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c  = + 5'b1 ;
assign  mb_count_minus1 = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c+ 5bb ;
assign   = mb_count_c4- 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c = - 5'b1 ;

mux2ds  #(5) mux_mbf_count  (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c- 5bb ;

mux2ds  #(5)   (.dout (mb_count_prev[4:0]),
                    .in0(mb_count_plus1[4:0]), .in1(mb_count_minus1[4:0]),
                    .sel0(mbf_insert_c3), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c  (.dout ([4:0]),
                    .in0([4:0]), .in1([4:0]),
                    .sel0(), .sel1(~mbf_insert_c3));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .sel1(~));

dffre_s   #(5)  ff_mb_count_c4 (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c));

dffre_s   #(5)   (.din(mb_count_prev[4:0]),
                 .en(mb_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c (.din([4:0]),
                 .en(), .clk(rclk), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .clk(), .rst(cnt_reset),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .rst(),
                 .q(mb_count_c4[4:0]), .se(se), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c),
                 .q([4:0]), .se(), .si(), .so());

//assign	mbctl_arbctl_cnt12_px2_prev = 
		//(( mb_count_c4== 5'd11 ) & mbf_insert_c3 & ~mbf_delete_c3 )  |
	     	//( mb_count_c4 > 5'd11 ) ;

assign	mbctl_arbctl_cnt12_px2_prev = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c), .si(), .so());

			     	
assign	 = 
		mb_idx_count_full_c4  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c = 
		  |  // indicates 7 or more entries with
					// the same index in the mIss buffer.
		(( mb_count_c4== 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c  |  							(( == 5'd11 ) 
		& mb_inst_vld_c3 & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c== 5d11 ) 
		&  & ~inst_mb_c3 )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c & ~ )  | // assume that 
	     	( mb_count_c4 > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c )  | 	     	(  > 5'd11 ) ;


// synopsys translate_off
always	@(mb_count_c4  ) begin
	if(  mb_count_c4 > 5'd16 )  begin
`ifdef MODELSIM
	$display("MB_COUNT", "illegal mb insertion with mb_count 16");
`else
	$error("MB_COUNT", "illegal mb insertion with mb_count 16");
`endif	
	end
	else  begin end// do nothing.
end
// synopsys translate_on


dff_s   #(1)  ff_rdma_inst_c2    
		(.din(arbdp_rdma_inst_c1), .clk(rclk),
             .q(rdma_inst_c2), .se(se), .si(), .so());

dff_s   #(1)  ff_rdma_inst_c3    
		(.din(rdma_inst_c2), .clk(rclk),
             .q(rdma_inst_c3), .se(se), .si(), .so());


//////////////////////////////////////////////////////////////////////
// PREVENTION of LIVELOCK
// RDMA instructions in the Miss Buffer have a high water mark of
// 8 for the following reason.
// When the interface to the jbi frees up, an instruction from the
// snoop/jbi interface will have a higher priority to issue than
// the miss Buffer. It is possible to construct a livelock case
// where, entries from the snpq always get selected over older
// miss buffer snoops. If the miss Buffer is filled with snoops,
// it will cause the pipeline to be completely hogged by snoops.
// 
// To prevent this livelock, we maintain a snoop instruction counter
//  in the Miss Buffer. Whenever this counter reaches 8. it disallows
// any instruction from the snoop Q from issuing to the pipeline until
// the counter value drops below 8.
//////////////////////////////////////////////////////////////////////

assign	mb_rdma_count_en = ( mbf_insert_c3 | mbf_delete_c3 ) & rdma_inst_c3 ;
assign  mb_rdma_count_plus1  = mb_rdma_count_c4+ 4'b1 ;
assign  mb_rdma_count_minus1 = mb_rdma_count_c4- 4'b1 ;

assign	inc_rdma_cnt_c3 = mbf_insert_c3 & rdma_inst_c3;


mux2ds  #(4) mux_mbf_rdma_count  (.dout (mb_rdma_count_prev[3:0]),
                .in0(mb_rdma_count_plus1[3:0]), 
		.in1(mb_rdma_count_minus1[3:0]),
                .sel0(inc_rdma_cnt_c3), 
		.sel1(~inc_rdma_cnt_c3));

dffre_s   #(4)  ff_mb_rdma_count_c4 (.din(mb_rdma_count_prev[3:0]),
                 .en(mb_rdma_count_en), .clk(rclk), .rst(cnt_reset),
                 .q(mb_rdma_count_c4[3:0]), .se(se), .si(), .so());

assign	mbctl_arbctl_snp_c > 5d11 ) ;


always