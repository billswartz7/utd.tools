module sctag_iqdp
 (
      so, iq_arbdp_data_px2, iq_arbdp_addr_px2, iq_arbdp_inst_px2, 
   iq_arbctl_atm_px2, iq_arbctl_csr_px2, iq_arbctl_st_px2, 
   iq_arbctl_vbit_px2, iqdp_iqarray_data_in, 
      rclk, se, si, pcx_sctag_data_px2, pcx_sctag_atm_px2_p, 
   iq_array_rd_data_c1, iqctl_sel_pcx, iqctl_sel_c1, iqctl_hold_rd, 
   sel_c1reg_over_iqarray
   ) ;


input           rclk;
input           se;
input           si;
input  [123:0]  pcx_sctag_data_px2;
input           pcx_sctag_atm_px2_p;
input  [124:0]  iq_array_rd_data_c1;
input           iqctl_sel_pcx;
input           iqctl_sel_c1;
input           iqctl_hold_rd;
input           sel_c1reg_over_iqarray;

output          so;
output [63:0]   iq_arbdp_data_px2;
output [39:0]   iq_arbdp_addr_px2;
output [18:0]   iq_arbdp_inst_px2;
output          iq_arbctl_atm_px2;
output          iq_arbctl_csr_px2;
output          iq_arbctl_st_px2;
output		iq_arbctl_vbit_px2;
output	[124:0]	iqdp_iqarray_data_in ; 
wire            ;
wire   [124:0]  pcx_sctag_data_c1;
wire   [124:0]  tmp_iq_array_rd_data_c1;
wire   [124:0]  iq_array_rd_data_c2;
wire   [124:0]  mux_c1c2_rd_data;
wire   [124:0]  inst;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;
wire   [124:0]  ;
wire   [124:0]  tmp_iq_array_rd_data_c1;
wire   [124:0]  iq_array_rd_data_c2;
wire   [124:0]  mux_c1c2_rd_data;
wire   [124:0]  inst;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;
wire   [124:0]  ;
wire   [124:0]  iq_array_rd_data_c2;
wire   [124:0]  mux_c1c2_rd_data;
wire   [124:0]  inst;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;
wire   [124:0]  ;
wire   [124:0]  mux_c1c2_rd_data;
wire   [124:0]  inst;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;
wire   [124:0]  ;
wire   [124:0]  inst;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;
wire   [124:0]  ;

// The following bus is an ECO change that was needed tO 
// solve a mintime violation for this path going from the 
// CCX to the iqarray.

assign	iqdp_iqarray_data_in = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
;


assign	 = { pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
 = { , pcx_sctag_data_px2[123:0] } ;

dff_s #(125) ff_pcx_sctag_data_c1
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
, [123:0] } ;

dff_s #(125) 
            (.q   (pcx_sctag_data_c1[124:0]),
             .din ({pcx_sctag_atm_px2_p, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

            (.q   ([124:0]),
             .din ({, pcx_sctag_data_px2[123:0]}),
             .clk (rclk),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
, [123:0]}),
             .clk (),
             .se(se), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
             .se(), .si  (), .so  ()
            ) ;


clken_buf  clk_buf0
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
), .si  (), .so  ()
            ) ;


clken_buf  
            (.clk(en_clk),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

            (.clk(),
             .rclk(rclk),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
             .rclk(),
             .enb_l(iqctl_hold_rd),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
             .enb_l(),
             .tmb_l(~se)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
             .tmb_l(~)
            ) ;

mux2ds #(125)  mux_iq_array_rd_data_c1
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
)
            ) ;

mux2ds #(125)  
                (.dout (tmp_iq_array_rd_data_c1[124:0]),
                 .in0  (iq_array_rd_data_c1[124:0]),  .sel0 (~sel_c1reg_over_iqarray),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

                (.dout ([124:0]),
                 .in0  ([124:0]),  .sel0 (~),
                 .in1  (pcx_sctag_data_c1[124:0]),    .sel1 (sel_c1reg_over_iqarray)
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
                 .in1  ([124:0]),    .sel1 ()
                ) ;

dff_s #(125) ff_iq_array_rd_data_c2
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
)
                ) ;

dff_s #(125) 
            (.q   (iq_array_rd_data_c2[124:0]),
             .din (tmp_iq_array_rd_data_c1[124:0]),
             .clk (en_clk),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

            (.q   ([124:0]),
             .din ([124:0]),
             .clk (),
             .se(se), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
             .se(), .si  (), .so  ()
            ) ;

mux2ds #(125)  u_mux_c1c2_rd_data
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
), .si  (), .so  ()
            ) ;

mux2ds #(125)  
                (.dout (mux_c1c2_rd_data[124:0]),
                 .in0  (pcx_sctag_data_c1[124:0]),     .sel0 (iqctl_sel_c1),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

                (.dout ([124:0]),
                 .in0  ([124:0]),     .sel0 (),
                 .in1  (iq_array_rd_data_c2[124:0]),   .sel1 (~iqctl_sel_c1)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
                 .in1  ([124:0]),   .sel1 (~)
                ) ;
mux2ds #(125)  mux_inst
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
)
                ) ;
mux2ds #(125)  
                (.dout (inst[124:0]),
                 .in0  ({pcx_sctag_atm_px2_p,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule

                (.dout ([124:0]),
                 .in0  ({,
                         pcx_sctag_data_px2[123:0]}),  .sel0 (iqctl_sel_pcx),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
,
                         [123:0]}),  .sel0 (),
                 .in1  (mux_c1c2_rd_data[124:0]),      .sel1 (~iqctl_sel_pcx)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
),
                 .in1  ([124:0]),      .sel1 (~)
                ) ;



assign iq_arbdp_data_px2  = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
)
                ) ;



assign   = inst[63:0] ;
assign iq_arbdp_addr_px2  = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
  = [63:0] ;
assign   = inst[103:64] ;
assign iq_arbdp_inst_px2  = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
  = [103:64] ;
assign   = inst[122:104] ;
assign iq_arbctl_vbit_px2 = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
  = [122:104] ;
assign  = inst[123];
assign iq_arbctl_atm_px2  = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
 = [123];
assign   = inst[124] ;
assign iq_arbctl_csr_px2  = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
  = [124] ;
assign   = (inst[103:101] == 3'b101) & (inst[99] == 1'b1) ;
assign iq_arbctl_st_px2   = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
  = ([103:101] == 3bb) & ([99] == 1bb) ;
assign    = ( (inst[122:118] == 5'b00001)  |	// Store
				(( inst[122:118] == 5'b01101)  &
				   ~inst[117]) )  ;		// FWD_REQ with
								// R/Wbar == 0
endmodule
   = ( ([122:118] == 5bb)  |					(( [122:118] == 5bb)  &
				   ~[117]) )  ;										endmodule
