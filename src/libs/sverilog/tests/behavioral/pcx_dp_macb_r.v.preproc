

	 			
 



module pcx_dp_macb_r(
      data_out_px_l, scan_out, shiftenable_buf, 
      arb_pcxdp_qsel1_pa, arb_pcxdp_qsel0_pa, arb_pcxdp_grant_pa, 
   arb_pcxdp_shift_px, arb_pcxdp_q0_hold_pa, src_pcx_data_pa, 
   data_prev_px_l, rclk, scan_in, shiftenable
   );	

   output [129:0] data_out_px_l;     output 		   scan_out;
   output 		   shiftenable_buf;
   
   input  	           arb_pcxdp_qsel1_pa;     input  	           arb_pcxdp_qsel0_pa;     input 		   arb_pcxdp_grant_pa;   input 		   arb_pcxdp_shift_px;   input 		   arb_pcxdp_q0_hold_pa;   
   input [129:0]  src_pcx_data_pa;     input [129:0]  data_prev_px_l;   
   input 		   rclk;
      input 		   scan_in;
   input 		   shiftenable;

   wire 		   ;
   wire [129:0]   q0_datain_pa;
   wire [129:0]   q1_dataout, q0_dataout;
   wire [129:0]   data_px_l;
   wire 		   clkq0, clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

;
   wire [129:0]   ;
   wire [129:0]   q1_dataout, q0_dataout;
   wire [129:0]   data_px_l;
   wire 		   clkq0, clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

;
   wire [129:0]   , q0_dataout;
   wire [129:0]   data_px_l;
   wire 		   clkq0, clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

, ;
   wire [129:0]   data_px_l;
   wire 		   clkq0, clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

;
   wire [129:0]   ;
   wire 		   clkq0, clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

;
   wire 		   , clkq1;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

, ;

   reg 			   clkenq0, clkenq1;

// Generate gated clocks for hold function


assign shiftenable_buf  =  shiftenable;

//replace tmb_l w/ ~se
wire   se_l ;
assign se_l  = ~shiftenable ;


clken_buf ck0 (
	       .clk  (clkq0),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_q0_hold_pa),
	       .tmb_l(se_l));

clken_buf ck1 (
	       .clk  (clkq1),
	       .rclk (rclk),
	       .enb_l(~arb_pcxdp_qsel1_pa),
	       .tmb_l(se_l));
   
   
   // Latch and drive grant signal
   
// Generate write selects

   dff_s   #(1) dff_pcx_grin_r(
	    .din           (arb_pcxdp_grant_pa),
	    .q             (grant_px),
	    .clk           (rclk),
	    .se            (1'b0),
	    .si            (1'b0),
	    .so            ());

   //DATAPATH SECTION
   dff_s   #(130) dff_pcx_datain_q1(
	    .din           (src_pcx_data_pa[129:0]),
	    .q             (q1_dataout[129:0]),
	    .clk           (clkq1),
	    .se            (1'b0),
	    .si            (),
	    .so            ());

/*
   mux2ds #(`PCX_WIDTH) mx2ds_pcx_datain_q0(
	    .dout            (q0_datain_pa[`PCX_WIDTH-1:0]),
            .in0             (q1_dataout[`PCX_WIDTH-1:0]),
	    .in1             (src_pcx_data_pa[`PCX_WIDTH-1:0]),
	    .sel0            (arb_pcxdp_shift_px),
	    .sel1            (arb_pcxdp_qsel0_pa));
  */ 
assign q0_datain_pa[129:0] = 
             (arb_pcxdp_qsel0_pa ? src_pcx_data_pa[129:0] : 130'd0) |
	     (arb_pcxdp_shift_px ? q1_dataout[129:0] : 130'd0) ;
  

   
   dff_s   #(130) dff_pcx_datain_q0(
	    .din           (q0_datain_pa[129:0]),
	    .q             (q0_dataout[129:0]),
	    .clk           (clkq0),
	    .se            (1'b0),
	    .si            (),
	    .so            ());
   assign data_px_l[129:0] = ~(grant_px ? q0_dataout[129:0]:130'd0);
   assign data_out_px_l[129:0] = data_px_l[129:0] & data_prev_px_l[129:0];
   
 	 
//    Global Variables:
// verilog-library-directories:("." "../../../../../common/rtl" "../rtl")
// End:


   
// Code start here 
//
endmodule

;

   reg