

	 
module ctu_synch_ref_jl(
syncdata, 
pll_raw_clk_out, presyncdata
);
parameter SIZE = 1;

input  pll_raw_clk_out;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire [-1:0]  presyncdata_in; 

bw_u1_scanl_2x u_ctu_synch_ref_jl_0 [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (pll_raw_clk_out),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk 
//  Receiving clock :  raw_clk_out
//  Method: Latch for hold time
//
//---------------------------
module ctu_synch_jl_ref(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
jbus_clk, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  jbus_clk;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire [SIZE-1:0]  presyncdata_in; 

bw_u1_scanl_2x u_ctu_synch_jl_ref_0 [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (jbus_clk),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  cmp_gclk
//
//---------------------------

// Before re-time with gclk,
// the data needs to be register with local clock
// to garuantee setup 
// Since the timing is very tight (200 ps setup skew)
// We move the testmode mux to cmp_clk domain
// before sending it to cmp_gclk
// All clock enable signals

module ctu_synch_cl_cg (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, start_clk_cl, arst_l, force_cken, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  cmp_clk;
input  start_clk_cl;
input  arst_l;
input  force_cken;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_muxed; 


   assign presyncdata_muxed =  force_cken? { SIZE {1'b1}} :  {SIZE {start_clk_cl}}  & presyncdata;

   dffrl_async_ns  #(SIZE)  u_synch_jl_cl_ff1_nsr(
                   .din (presyncdata_muxed[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));
endmodule   
//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  dram_gclk 
//  Method: sync pulse (one clock earlier than dram_tx_sync)
//          data available on rising edge of dram_clk 
//          then clocked by dram_gclk on next edge
//
//---------------------------

module ctu_synch_cl_dl(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, ctu_dram_tx_sync_early, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  ctu_dram_tx_sync_early;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

   
   dffe_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata[SIZE-1:0]),
                   .clk (cmp_clk),
                   .en(ctu_dram_tx_sync_early),
                   .q (syncdata[SIZE-1:0]));

endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk
//  Receiving clock :  pseudo dram_clk (make use of coincident edge)
//  Method: jbus_clk -> cmp_clk  through coin edges
//
//---------------------------

module ctu_synch_jl_dl (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, jbus_rx_sync, coin_edge, arst_l, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  jbus_rx_sync;
input  coin_edge;
input  arst_l;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_in; 
wire   [SIZE-1:0]  presyncdata_in_nxt;
wire   [SIZE-1:0]  syncdata_nxt;

assign presyncdata_in_nxt = jbus_rx_sync ? presyncdata: presyncdata_in; 
   
   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata_in_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (presyncdata_in[SIZE-1:0]));

assign syncdata_nxt = coin_edge ? presyncdata_in : syncdata;

   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff2(
                   .din (syncdata_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));

endmodule   


//---------------------------
//
//  Asynchronous interface
//
//---------------------------

module ctu_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_tmp;

    bw_u1_syncff_4x u_synchronizer_syncff [SIZE-1:0](.q(presyncdata_tmp),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0)
                     );

    bw_u1_soff_2x u_synchronizer_ff[SIZE-1:0] (.q(syncdata),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_tmp),
                     .sd(),
                     .se(1'b0)
                     );
endmodule


//---------------------------
//
//  Asynchronous interface (clock select blocks)
//
//---------------------------

module ctu_clksel_async_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata, arst_l, aset_l
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
input arst_l;
input aset_l;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_in0;
wire [SIZE-1:0] presyncdata_in1;


    bw_u1_soffasr_2x u_synchronizer_ff0_nsr[SIZE-1:0] (.q( presyncdata_in0),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );
    bw_u1_soffasr_2x u_synchronizer_ff1_nsr[SIZE-1:0] (.q( presyncdata_in1),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_in0),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

    bw_u1_soffasr_2x u_synchronizer_neg_ff_nsr[SIZE-1:0] (.q( syncdata[SIZE-1:0]),
                     .so(),
                     .ck(~clk),
                     .d(presyncdata_in1[SIZE-1:0]),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

endmodule

module ctu_mux21 (d0, d1, s, z);
// synopsys template
parameter SIZE = 1;
input [SIZE-1:0] d0 ;    // data in 
input [SIZE-1:0] d1 ;    // data in 
input s;      // select

output [SIZE-1:0]      z ;

wire [SIZE-1:0] z_pre ;      

// assign z = s ? d1 : d0;

     bw_u1_muxi21_4x u_muxi21 [SIZE-1:0] (
    .z(z_pre), .d0(d0), .d1(d1), .s(s) );

     bw_u1_inv_5x u_inv [SIZE-1:0] (
     .z(z), .a(z_pre));

endmodule

//---------------------------
//
//  clock select components used in jtag
//
//-------1:0]  ; 

bw_u1_scanl_2x u_ctu_synch_ref_jl_0 [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (pll_raw_clk_out),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk 
//  Receiving clock :  raw_clk_out
//  Method: Latch for hold time
//
//---------------------------
module ctu_synch_jl_ref(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
jbus_clk, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  jbus_clk;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire [SIZE-1:0]  presyncdata_in; 

bw_u1_scanl_2x u_ctu_synch_jl_ref_0 [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (jbus_clk),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  cmp_gclk
//
//---------------------------

// Before re-time with gclk,
// the data needs to be register with local clock
// to garuantee setup 
// Since the timing is very tight (200 ps setup skew)
// We move the testmode mux to cmp_clk domain
// before sending it to cmp_gclk
// All clock enable signals

module ctu_synch_cl_cg (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, start_clk_cl, arst_l, force_cken, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  cmp_clk;
input  start_clk_cl;
input  arst_l;
input  force_cken;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_muxed; 


   assign presyncdata_muxed =  force_cken? { SIZE {1'b1}} :  {SIZE {start_clk_cl}}  & presyncdata;

   dffrl_async_ns  #(SIZE)  u_synch_jl_cl_ff1_nsr(
                   .din (presyncdata_muxed[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));
endmodule   
//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  dram_gclk 
//  Method: sync pulse (one clock earlier than dram_tx_sync)
//          data available on rising edge of dram_clk 
//          then clocked by dram_gclk on next edge
//
//---------------------------

module ctu_synch_cl_dl(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, ctu_dram_tx_sync_early, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  ctu_dram_tx_sync_early;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

   
   dffe_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata[SIZE-1:0]),
                   .clk (cmp_clk),
                   .en(ctu_dram_tx_sync_early),
                   .q (syncdata[SIZE-1:0]));

endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk
//  Receiving clock :  pseudo dram_clk (make use of coincident edge)
//  Method: jbus_clk -> cmp_clk  through coin edges
//
//---------------------------

module ctu_synch_jl_dl (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, jbus_rx_sync, coin_edge, arst_l, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  jbus_rx_sync;
input  coin_edge;
input  arst_l;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_in; 
wire   [SIZE-1:0]  presyncdata_in_nxt;
wire   [SIZE-1:0]  syncdata_nxt;

assign presyncdata_in_nxt = jbus_rx_sync ? presyncdata: presyncdata_in; 
   
   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata_in_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (presyncdata_in[SIZE-1:0]));

assign syncdata_nxt = coin_edge ? presyncdata_in : syncdata;

   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff2(
                   .din (syncdata_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));

endmodule   


//---------------------------
//
//  Asynchronous interface
//
//---------------------------

module ctu_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_tmp;

    bw_u1_syncff_4x u_synchronizer_syncff [SIZE-1:0](.q(presyncdata_tmp),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0)
                     );

    bw_u1_soff_2x u_synchronizer_ff[SIZE-1:0] (.q(syncdata),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_tmp),
                     .sd(),
                     .se(1'b0)
                     );
endmodule


//---------------------------
//
//  Asynchronous interface (clock select blocks)
//
//---------------------------

module ctu_clksel_async_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata, arst_l, aset_l
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
input arst_l;
input aset_l;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_in0;
wire [SIZE-1:0] presyncdata_in1;


    bw_u1_soffasr_2x u_synchronizer_ff0_nsr[SIZE-1:0] (.q( presyncdata_in0),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );
    bw_u1_soffasr_2x u_synchronizer_ff1_nsr[SIZE-1:0] (.q( presyncdata_in1),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_in0),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

    bw_u1_soffasr_2x u_synchronizer_neg_ff_nsr[SIZE-1:0] (.q( syncdata[SIZE-1:0]),
                     .so(),
                     .ck(~clk),
                     .d(presyncdata_in1[SIZE-1:0]),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

endmodule

module ctu_mux21 (d0, d1, s, z);
// synopsys template
parameter SIZE = 1;
input [SIZE-1:0] d0 ;    // data in 
input [SIZE-1:0] d1 ;    // data in 
input s;      // select

output [SIZE-1:0]      z ;

wire [SIZE-1:0] z_pre ;      

// assign z = s ? d1 : d0;

     bw_u1_muxi21_4x u_muxi21 [SIZE-1:0] (
    .z(z_pre), .d0(d0), .d1(d1), .s(s) );

     bw_u1_inv_5x u_inv [SIZE-1:0] (
     .z(z), .a(z_pre));

endmodule

//---------------------------
//
//  clock select components used in jtag
//
//------; 

bw_u1_scanl_2x  [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (pll_raw_clk_out),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk 
//  Receiving clock :  raw_clk_out
//  Method: Latch for hold time
//
//---------------------------
module ctu_synch_jl_ref(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
jbus_clk, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  jbus_clk;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire [SIZE-1:0]  presyncdata_in; 

bw_u1_scanl_2x u_ctu_synch_jl_ref_0 [SIZE-1:0]
   (.sd (presyncdata[SIZE-1:0]),
    .ck (jbus_clk),
    .so (syncdata[SIZE-1:0])
    );


endmodule   

//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  cmp_gclk
//
//---------------------------

// Before re-time with gclk,
// the data needs to be register with local clock
// to garuantee setup 
// Since the timing is very tight (200 ps setup skew)
// We move the testmode mux to cmp_clk domain
// before sending it to cmp_gclk
// All clock enable signals

module ctu_synch_cl_cg (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, start_clk_cl, arst_l, force_cken, presyncdata
);
// synopsys template
parameter SIZE = 1;

input  cmp_clk;
input  start_clk_cl;
input  arst_l;
input  force_cken;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_muxed; 


   assign presyncdata_muxed =  force_cken? { SIZE {1'b1}} :  {SIZE {start_clk_cl}}  & presyncdata;

   dffrl_async_ns  #(SIZE)  u_synch_jl_cl_ff1_nsr(
                   .din (presyncdata_muxed[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));
endmodule   
//---------------------------
//
//  Lauching clock:    cmp_clk
//  Receiving clock :  dram_gclk 
//  Method: sync pulse (one clock earlier than dram_tx_sync)
//          data available on rising edge of dram_clk 
//          then clocked by dram_gclk on next edge
//
//---------------------------

module ctu_synch_cl_dl(/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, ctu_dram_tx_sync_early, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  ctu_dram_tx_sync_early;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

   
   dffe_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata[SIZE-1:0]),
                   .clk (cmp_clk),
                   .en(ctu_dram_tx_sync_early),
                   .q (syncdata[SIZE-1:0]));

endmodule   

//---------------------------
//
//  Lauching clock:    jbus_clk
//  Receiving clock :  pseudo dram_clk (make use of coincident edge)
//  Method: jbus_clk -> cmp_clk  through coin edges
//
//---------------------------

module ctu_synch_jl_dl (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
cmp_clk, jbus_rx_sync, coin_edge, arst_l, presyncdata
);

// synopsys template
parameter SIZE = 1;
input  cmp_clk;
input  jbus_rx_sync;
input  coin_edge;
input  arst_l;
input  [SIZE-1:0]  presyncdata; 
output [SIZE-1:0]  syncdata;

wire   [SIZE-1:0]  presyncdata_in; 
wire   [SIZE-1:0]  presyncdata_in_nxt;
wire   [SIZE-1:0]  syncdata_nxt;

assign presyncdata_in_nxt = jbus_rx_sync ? presyncdata: presyncdata_in; 
   
   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff0(
                   .din (presyncdata_in_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (presyncdata_in[SIZE-1:0]));

assign syncdata_nxt = coin_edge ? presyncdata_in : syncdata;

   dffrl_async_ns  #(SIZE)  u_synch_cl_dl_ff2(
                   .din (syncdata_nxt[SIZE-1:0]),
                   .clk (cmp_clk),
                   .rst_l(arst_l),
                   .q (syncdata[SIZE-1:0]));

endmodule   


//---------------------------
//
//  Asynchronous interface
//
//---------------------------

module ctu_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_tmp;

    bw_u1_syncff_4x u_synchronizer_syncff [SIZE-1:0](.q(presyncdata_tmp),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0)
                     );

    bw_u1_soff_2x u_synchronizer_ff[SIZE-1:0] (.q(syncdata),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_tmp),
                     .sd(),
                     .se(1'b0)
                     );
endmodule


//---------------------------
//
//  Asynchronous interface (clock select blocks)
//
//---------------------------

module ctu_clksel_async_synchronizer (/*AUTOARG*/
// Outputs
syncdata, 
// Inputs
clk, presyncdata, arst_l, aset_l
);

// synopsys template
parameter SIZE = 1;

input clk;
input [SIZE-1:0] presyncdata;
input arst_l;
input aset_l;
output [SIZE-1:0] syncdata;

wire [SIZE-1:0] presyncdata_in0;
wire [SIZE-1:0] presyncdata_in1;


    bw_u1_soffasr_2x u_synchronizer_ff0_nsr[SIZE-1:0] (.q( presyncdata_in0),
                     .so(),
                     .ck(clk),
                     .d(presyncdata),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );
    bw_u1_soffasr_2x u_synchronizer_ff1_nsr[SIZE-1:0] (.q( presyncdata_in1),
                     .so(),
                     .ck(clk),
                     .d(presyncdata_in0),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

    bw_u1_soffasr_2x u_synchronizer_neg_ff_nsr[SIZE-1:0] (.q( syncdata[SIZE-1:0]),
                     .so(),
                     .ck(~clk),
                     .d(presyncdata_in1[SIZE-1:0]),
                     .sd(),
                     .se(1'b0),
                     .r_l (arst_l),
                     .s_l (aset_l)
                     );

endmodule

module ctu_mux21 (d0, d1, s, z);
// synopsys template
parameter SIZE = 1;
input [SIZE-1:0] d0 ;    // data in 
input [SIZE-1:0] d1 ;    // data in 
input s;      // select

output [SIZE-1:0]      z ;

wire [SIZE-1:0] z_pre ;      

// assign z = s ? d1 : d0;

     bw_u1_muxi21_4x u_muxi21 [SIZE-1:0] (
    .z(z_pre), .d0(d0), .d1(d1), .s(s) );

     bw_u1_inv_5x u_inv [SIZE-1:0] (
     .z(z), .a(z_pre));

endmodule

//---------------------------
//
//  clock select components used in jtag
//
//------ [