
   

module aurora_201_GTP_WRAPPER #
(
        parameter   SIM_GTPRESET_SPEEDUP=   0,          parameter   SIM_PLL_PERDIV2     =   9hh,            parameter CHAN_BOND_MODE_0      = "OFF",
    parameter CHAN_BOND_MODE_1      = "OFF",
        parameter   CLKINDC_B           =   "TRUE"
)

(

   LOOPBACK_IN,
    RXCHARISCOMMA_OUT,
    RXCHARISK_OUT,
    RXDISPERR_OUT,
    RXNOTINTABLE_OUT,
    ENCHANSYNC_IN,
    CHBONDDONE_OUT,
    RXBUFERR_OUT,
    RXREALIGN_OUT,
    ENMCOMMAALIGN_IN,
    ENPCOMMAALIGN_IN,
    RXDATA_OUT,
    RXRECCLK1_OUT,
    RXRECCLK2_OUT,
    RXRESET_IN,
    RXUSRCLK_IN,
    RXUSRCLK2_IN,
    RX1N_IN,
    RX1P_IN,
    RXPOLARITY_IN,
    REFCLK,
    GTPRESET_IN,
    PLLLKDET_OUT,
    POWERDOWN_IN,
    TXCHARISK_IN,
    TXDATA_IN,
    TXOUTCLK1_OUT,
    TXOUTCLK2_OUT,
    TXRESET_IN,
    TXUSRCLK_IN,
    TXUSRCLK2_IN,
    TXBUFERR_OUT,
    TX1N_OUT,
    TX1P_OUT
);
 input    [2:0]    LOOPBACK_IN;
 
 output   [1:0]    RXCHARISCOMMA_OUT; 
 output   [1:0]    RXCHARISK_OUT; 
 output   [1:0]    RXDISPERR_OUT;
 output   [1:0]    RXNOTINTABLE_OUT;
 
 input             ENCHANSYNC_IN; 
 output            CHBONDDONE_OUT;
 output            RXBUFERR_OUT;
 output            RXREALIGN_OUT;
 input             ENMCOMMAALIGN_IN;
 input             ENPCOMMAALIGN_IN;
 output   [15:0]   RXDATA_OUT; 
 output            RXRECCLK1_OUT;
 output            RXRECCLK2_OUT;
 input             RXRESET_IN;
  input             RXUSRCLK_IN;
 input             RXUSRCLK2_IN;
 
 input             RX1N_IN;  
 input             RX1P_IN;  
 input             RXPOLARITY_IN;
 input             REFCLK;
 input             GTPRESET_IN;
 output            PLLLKDET_OUT;
 input             POWERDOWN_IN;
 input    [1:0]    TXCHARISK_IN; 
 input    [15:0]   TXDATA_IN; 
 output            TXOUTCLK1_OUT;
 output            TXOUTCLK2_OUT;
 input             TXRESET_IN;
 output            TXBUFERR_OUT;
 input             TXUSRCLK_IN;
 input             TXUSRCLK2_IN;
 output            TX1N_OUT;
 output            TX1P_OUT;

 wire               ;
 wire    [63:0]     tied_to_ground_vec_i;
 wire               tied_to_vcc_i;
 wire    [63:0]     tied_to_vcc_vec_i;
// floating input port connection signals
 wire     [1:0]    open_rxbufstatus_i;
 wire              open_txbufstatus_i;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire    [63:0]     ;
 wire               tied_to_vcc_i;
 wire    [63:0]     tied_to_vcc_vec_i;
// floating input port connection signals
 wire     [1:0]    open_rxbufstatus_i;
 wire              open_txbufstatus_i;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire    [63:0]     tied_to_vcc_vec_i;
// floating input port connection signals
 wire     [1:0]    open_rxbufstatus_i;
 wire              open_txbufstatus_i;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire    [63:0]     ;
// floating input port connection signals
 wire     [1:0]    open_rxbufstatus_i;
 wire              open_txbufstatus_i;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire     [1:0]    ;
 wire              open_txbufstatus_i;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire              ;
// wire to output lock signal
 wire              plllkdet_i;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire              ;
// Electrical idle reset logic signals
 wire               rxenelecidleresetb_i;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               rxelecidle0_i;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               resetdone0_i;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               rxelecidlereset0_i;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               rxelecidle1_i;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               resetdone1_i;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;
 wire               rxelecidlereset1_i;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire               ;

// Channel Bonding 3
 wire     [2:0]    chbondi;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;

 wire     [2:0]    ;
 wire     [2:0]    chbondo;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire     [2:0]    ;
   
 wire     [2:0]    chbondi_unused_i;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
   
 wire     [2:0]    ;
 wire              serialloopback_i;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 wire              ;

//***************************** Register Declarations *****************************
// All TX inputs registered

//********************************* Main Body of Code**************************
//-------------------------  Static signal Assigments ---------------------   
 assign tied_to_ground_i             = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;


 assign              = 1'b0;
 assign tied_to_ground_vec_i         = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP              = 1bb;
 assign          = 64'h0000000000000000;
 assign tied_to_vcc_i                = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP          = 64hh;
 assign                 = 1'b1;
 assign tied_to_vcc_vec_i            = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP                 = 1bb;
 assign             = 64'hffffffffffffffff;

 
// Assign lock signals
 assign  PLLLKDET_OUT  =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP             = 64hh;

 
 assign    =   plllkdet_i;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP   =   ;


 assign serialloopback_i   = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;


 assign    = !LOOPBACK_IN[0] && LOOPBACK_IN[1] && !LOOPBACK_IN[2];

//-------------------------  Electrical Idle Reset Circuit  ---------------
//Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
 assign  rxelecidlereset0_i = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP    = ![0] && [1] && ![2];

 assign   = (rxelecidle0_i && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP  = ( && resetdone0_i) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP  && ) && !serialloopback_i;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ) && !;
 assign  rxelecidlereset1_i = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 assign   = (rxelecidle1_i && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP  = ( && resetdone1_i) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP  && ) && !serialloopback_i;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ) && !;
 assign  rxenelecidleresetb_i = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ;
 assign   = !(rxelecidlereset0_i||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP  = !(||rxelecidlereset1_i); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ||); 

// Channel Bonding
 assign chbondi_unused_i  = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP ); 

 assign   = 3'b000;
 assign  chbondi = chbondi_unused_i;

//------------------------- GTP   = 3bb;
 assign   = chbondi_unused_i;

//------------------------- GTP  = ;

//------------------------- GTP ;

 

GTP_DUAL # 
    (
                 .         (SIM_GTPRESET_SPEEDUP),
         .SIM_PLL_PERDIV2              (SIM_PLL_PERDIV2),

         //___________________________ Shared Attributes _______________________
         //---------------------- Tile and PLL Attributes ----------------------
         .CLK25_DIVIDER               (6), 
         .CLKINDC_B                   (CLKINDC_B),   
         .OOB_CLK_DIVIDER             (6),
         .OVERSAMPLE_MODE             ("FALSE"),
         .PLL_DIVSEL_FB               (2),
         .PLL_DIVSEL_REF              (1),
         .PLL_TXDIVSEL_COMM_OUT       (1),
         .TX_SYNC_FILTERB             (1),

         //______________________ Transmit Interface Attributes ________________
         //----------------- TX Buffering and Phase Alignment ------------------   
         .TX_BUFFER_USE_0            ("TRUE"),
         .TX_XCLK_SEL_0              ("TXOUT"),
         .TXRX_INVERT_0              (5'b00000),        
         .TX_BUFFER_USE_1            ("TRUE"),
         .TX_XCLK_SEL_1              ("TXOUT"),
         .TXRX_INVERT_1              (5'b00000),        

         //------------------- TX Serial Line Rate settings --------------------   
         .PLL_TXDIVSEL_OUT_0         (2),
         .PLL_TXDIVSEL_OUT_1         (2), 

         //------------------- TX Driver and OOB signalling --------------------  
         .TX_DIFF_BOOST_0           ("TRUE"),
         .TX_DIFF_BOOST_1           ("TRUE"),

         //---------------- TX Pipe Control for PCI Express/SATA ---------------
         .COM_BURST_VAL_0            (4'b1111),
         .COM_BURST_VAL_1            (4'b1111),

         //_______________________ Receive Interface Attributes ________________
         //---------- RX Driver,OOB signalling,Coupling and Eq.,CDR ------------  
         .AC_CAP_DIS_0               ("TRUE"),
         .OOBDETECT_THRESHOLD_0      (3'b001),
         .PMA_CDR_SCAN_0             (27'h6C08040), 
         .PMA_RX_CFG_0               (25'h0DCE089),
         .RCV_TERM_GND_0             ("FALSE"),
         .RCV_TERM_MID_0             ("FALSE"),
         .RCV_TERM_VTTRX_0           ("TRUE"),
         .TERMINATION_IMP_0          (50),
         .AC_CAP_DIS_1               ("TRUE"),
         .OOBDETECT_THRESHOLD_1      (3'b001),
         .PMA_CDR_SCAN_1             (27'h6C08040), 
         .PMA_RX_CFG_1               (25'h0DCE089),  
         .RCV_TERM_GND_1             ("FALSE"),
         .RCV_TERM_MID_1             ("FALSE"),
         .RCV_TERM_VTTRX_1           ("TRUE"),
         .TERMINATION_IMP_1          (50),
         .TERMINATION_CTRL           (5'b10100),
         .TERMINATION_OVRD           ("FALSE"),

         //------------------- RX Serial Line Rate Settings --------------------   
         .PLL_RXDIVSEL_OUT_0         (2),
         .PLL_SATA_0                 ("FALSE"),
         .PLL_RXDIVSEL_OUT_1         (2),
         .PLL_SATA_1                 ("FALSE"),

         //------------------------- PRBS Detection ----------------------------  
         .PRBS_ERR_THRESHOLD_0       (32'h00000008),
         .PRBS_ERR_THRESHOLD_1       (32'h00000008),

         //------------------- Comma Detection and Alignment -------------------  
         .ALIGN_COMMA_WORD_0         (2),
         .COMMA_10B_ENABLE_0         (10'b1111111111),
         .COMMA_DOUBLE_0             ("FALSE"),
         .DEC_MCOMMA_DETECT_0        ("TRUE"),
         .DEC_PCOMMA_DETECT_0        ("TRUE"),
         .DEC_VALID_COMMA_ONLY_0     ("FALSE"),
         .MCOMMA_10B_VALUE_0         (10'b1010000011),
         .MCOMMA_DETECT_0            ("TRUE"),
         .PCOMMA_10B_VALUE_0         (10'b0101111100),
         .PCOMMA_DETECT_0            ("TRUE"),
         .RX_SLIDE_MODE_0            ("PCS"),
         .ALIGN_COMMA_WORD_1         (2),
         .COMMA_10B_ENABLE_1         (10'b1111111111),
         .COMMA_DOUBLE_1             ("FALSE"),
         .DEC_MCOMMA_DETECT_1        ("TRUE"),
         .DEC_PCOMMA_DETECT_1        ("TRUE"),
         .DEC_VALID_COMMA_ONLY_1     ("FALSE"),
         .MCOMMA_10B_VALUE_1         (10'b1010000011),
         .MCOMMA_DETECT_1            ("TRUE"),
         .PCOMMA_10B_VALUE_1         (10'b0101111100),
         .PCOMMA_DETECT_1            ("TRUE"),
         .RX_SLIDE_MODE_1            ("PCS"),

         //------------------- RX Loss-of-sync State Machine -------------------  
         .RX_LOSS_OF_SYNC_FSM_0      ("FALSE"),
         .RX_LOS_INVALID_INCR_0      (8),
         .RX_LOS_THRESHOLD_0         (128),
         .RX_LOSS_OF_SYNC_FSM_1      ("FALSE"),
         .RX_LOS_INVALID_INCR_1      (8),
         .RX_LOS_THRESHOLD_1         (128),

         //------------ RX Elastic Buffer and Phase alignment ports ------------   
         .RX_BUFFER_USE_0            ("TRUE"),
         .RX_XCLK_SEL_0              ("RXREC"),
         .RX_BUFFER_USE_1            ("TRUE"),
         .RX_XCLK_SEL_1              ("RXREC"),

         //--------------------- Clock Correction Attributes -------------------   
         .CLK_CORRECT_USE_0          ("TRUE"),
         .CLK_COR_ADJ_LEN_0          (2),
         .CLK_COR_DET_LEN_0          (2),
         .CLK_COR_INSERT_IDLE_FLAG_0 ("FALSE"),
         .CLK_COR_KEEP_IDLE_0        ("FALSE"),
         .CLK_COR_MAX_LAT_0          (18),
         .CLK_COR_MIN_LAT_0          (16),
         .CLK_COR_PRECEDENCE_0       ("TRUE"),
         .CLK_COR_REPEAT_WAIT_0      (0),
         .CLK_COR_SEQ_1_1_0          (10'b0111110111),
         .CLK_COR_SEQ_1_2_0          (10'b0111110111),
         .CLK_COR_SEQ_1_3_0          (10'b0000000000),
         .CLK_COR_SEQ_1_4_0          (10'b0000000000),
         .CLK_COR_SEQ_1_ENABLE_0     (4'b0011),
         .CLK_COR_SEQ_2_1_0          (10'b0000000000),
         .CLK_COR_SEQ_2_2_0          (10'b0000000000),
         .CLK_COR_SEQ_2_3_0          (10'b0000000000),
         .CLK_COR_SEQ_2_4_0          (10'b0000000000),
         .CLK_COR_SEQ_2_ENABLE_0     (4'b0000),
         .CLK_COR_SEQ_2_USE_0        ("FALSE"),
         .RX_DECODE_SEQ_MATCH_0      ("TRUE"),
         .CLK_CORRECT_USE_1          ("TRUE"),
         .CLK_COR_ADJ_LEN_1          (2),
         .CLK_COR_DET_LEN_1          (2),
         .CLK_COR_INSERT_IDLE_FLAG_1 ("FALSE"),
         .CLK_COR_KEEP_IDLE_1        ("FALSE"),
         .CLK_COR_MAX_LAT_1          (18),
         .CLK_COR_MIN_LAT_1          (16),
         .CLK_COR_PRECEDENCE_1       ("TRUE"),
         .CLK_COR_REPEAT_WAIT_1      (0),
         .CLK_COR_SEQ_1_1_1          (10'b0111110111),
         .CLK_COR_SEQ_1_2_1          (10'b0111110111),
         .CLK_COR_SEQ_1_3_1          (10'b0000000000),
         .CLK_COR_SEQ_1_4_1          (10'b0000000000),
         .CLK_COR_SEQ_1_ENABLE_1     (4'b0011),
         .CLK_COR_SEQ_2_1_1          (10'b0000000000),
         .CLK_COR_SEQ_2_2_1          (10'b0000000000),
         .CLK_COR_SEQ_2_3_1          (10'b0000000000),
         .CLK_COR_SEQ_2_4_1          (10'b0000000000),
         .CLK_COR_SEQ_2_ENABLE_1     (4'b0000),
         .CLK_COR_SEQ_2_USE_1        ("FALSE"),
         .RX_DECODE_SEQ_MATCH_1      ("TRUE"),

         //-------------------- Channel Bonding Attributes ---------------------   
         .CHAN_BOND_1_MAX_SKEW_0     (7),
         .CHAN_BOND_2_MAX_SKEW_0     (7),
         .CHAN_BOND_LEVEL_0          (3'h0),
         .CHAN_BOND_MODE_0           ("OFF"),
         .CHAN_BOND_SEQ_1_1_0        (10'b0101111100),
         .CHAN_BOND_SEQ_1_2_0        (10'b0000000000),
         .CHAN_BOND_SEQ_1_3_0        (10'b0000000000),
         .CHAN_BOND_SEQ_1_4_0        (10'b0000000000),
         .CHAN_BOND_SEQ_1_ENABLE_0   (4'b0001),
         .CHAN_BOND_SEQ_2_1_0        (10'b0000000000),
         .CHAN_BOND_SEQ_2_2_0        (10'b0000000000),
         .CHAN_BOND_SEQ_2_3_0        