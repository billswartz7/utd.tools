 
 


module ctu_dft_jtag_tap(
instructions, next_instructions, capture_dr_state, shift_dr_state, 
pause_dr_state, update_dr_state, shift_exit2_dr_state, 
update_ir_state, clock_dr, tdo, tdo_en, 
tck, tck_l, trst_n, tms, tdi, so, bypass_sel, dft_pin_pscan
);


input  tck;
input  tck_l;
input  trst_n;
input  tms;
input  tdi;
input  so;
input  bypass_sel;
input  dft_pin_pscan;

output [-1:0] instructions;
output [-1:0] next_instructions;
output 			      capture_dr_state;
output 			      shift_dr_state;
output 			      pause_dr_state;
output 			      update_dr_state;
output 			      shift_exit2_dr_state;
output 			      update_ir_state;
output 			      clock_dr;
output 			      tdo;
output 			      tdo_en; 

			      wire [-1:0]   ;
reg [`TAP_INSTR_WIDTH-1:0]    next_instructions;
wire 			      capture_dr_state;
wire 			      shift_dr_state;
wire 			      pause_dr_state;
wire 			      update_dr_state;
wire 			      shift_exit2_dr_state;
wire 			      update_ir_state;
wire 			      clock_dr;
wire 			      tdo;
wire 			      tdo_en; 


////////////////////////////////////////////////////////////////////////
// Local signal declarations 
////////////////////////////////////////////////////////////////////////
parameter TAP_RESET     = 16'h0001,
	  TAP_TEST      = 16'h0002,
	  TAP_SEL_DR    = 16'h0004,
	  TAP_CAP_DR    = 16'h0008,
	  TAP_SHIFT_DR  = 16'h0010,
	  TAP_EXIT1_DR  = 16'h0020,
	  TAP_PAUSE_DR  = 16'h0040,
	  TAP_EXIT2_DR  = 16'h0080,
	  TAP_UPDATE_DR = 16'h0100,
	  TAP_SEL_IR    = 16'h0200,
	  TAP_CAP_IR    = 16'h0400,
	  TAP_SHIFT_IR  = 16'h0800,
	  TAP_EXIT1_IR  = 16'h1000,
	  TAP_PAUSE_IR  = 16'h2000,
	  TAP_EXIT2_IR  = 16'h4000,
	  TAP_UPDATE_IR = 16'h8000,
	  TAP_STATE_WIDTH = 16;

parameter TAP_RESET_BIT     =  0,
//	  TAP_TEST_BIT      =  1,
//	  TAP_SEL_DR_BIT    =  2,
	  TAP_CAP_DR_BIT    =  3,
	  TAP_SHIFT_DR_BIT  =  4,
//	  TAP_EXIT1_DR_BIT  =  5,
	  TAP_PAUSE_DR_BIT  =  6,
	  TAP_EXIT2_DR_BIT  =  7,
	  TAP_UPDATE_DR_BIT =  8,
//	  TAP_SEL_IR_BIT    =  9,
	  TAP_CAP_IR_BIT    = 10,
	  TAP_SHIFT_IR_BIT  = 11,
//	  TAP_EXIT1_IR_BIT  = 12,
//	  TAP_PAUSE_IR_BIT  = 13,
//	  TAP_EXIT2_IR_BIT  = 14,
	  TAP_UPDATE_IR_BIT = 15;


wire [15:0] tap_state;
reg [15:0]  next_tap_state;

wire 	    tap_state_reset_negedge;
wire 	    capture_shift_dr;
wire 	    next_tap_state_reset_negedge;
wire 	    next_capture_shift_dr;

reg 	    next_tdo;
wire 	    next_tdo_en;

wire [`TAP_INSTR_WIDTH-1:0] new_instructions;
reg [`TAP_INSTR_WIDTH-1:0] next_new_instructions;
wire 			    reset_muxed;
wire 			    instructions_rst_l;
wire 			    tdi_ff;
wire 			    tdi_ff_en;
wire 			    tdi_ff_rst_l;

//*******************************************************************************
// Tap State Machine
//*******************************************************************************

always @ ( /*AUTOSENSE*/tap_state or tms) begin
   case (tap_state)
      TAP_RESET: begin
	 if (tms)
	    next_tap_state = TAP_RESET;
	 else
	    next_tap_state = TAP_TEST;
      end
      TAP_TEST: begin
	 if (tms)
	    next_tap_state = TAP_SEL_DR;
	 else
	    next_tap_state = TAP_TEST;
      end
      TAP_SEL_DR: begin
	 if (tms)
	    next_tap_state = TAP_SEL_IR;
	 else
	    next_tap_state = TAP_CAP_DR;
      end
      TAP_CAP_DR: begin
	 if (tms)
	    next_tap_state = TAP_EXIT1_DR;
	 else
	    next_tap_state = TAP_SHIFT_DR;
      end
      TAP_SHIFT_DR: begin
	 if (tms)
	    next_tap_state = TAP_EXIT1_DR;
	 else
	    next_tap_state = TAP_SHIFT_DR;
      end
      TAP_EXIT1_DR: begin
	 if (tms)
	    next_tap_state = TAP_UPDATE_DR;
	 else
	    next_tap_state = TAP_PAUSE_DR;
      end
      TAP_PAUSE_DR: begin
	 if (tms)
	    next_tap_state = TAP_EXIT2_DR;
	 else
	    next_tap_state = TAP_PAUSE_DR;
      end
      TAP_EXIT2_DR: begin
	 if (tms)
	    next_tap_state = TAP_UPDATE_DR;
	 else
	    next_tap_state = TAP_SHIFT_DR;
      end
      TAP_UPDATE_DR: begin
	 if (tms)
	    next_tap_state = TAP_SEL_DR;
	 else
	    next_tap_state = TAP_TEST;
      end
      TAP_SEL_IR: begin
	 if (tms)
	    next_tap_state = TAP_RESET;
	 else
	    next_tap_state = TAP_CAP_IR;
      end
      TAP_CAP_IR: begin
	 if (tms)
	    next_tap_state = TAP_EXIT1_IR;
	 else
	    next_tap_state = TAP_SHIFT_IR;
      end
      TAP_SHIFT_IR:  begin
	 if (tms)
	    next_tap_state = TAP_EXIT1_IR;
	 else
	    next_tap_state = TAP_SHIFT_IR;
      end
      TAP_EXIT1_IR:  begin
	 if (tms)
	    next_tap_state = TAP_UPDATE_IR;
	 else
	    next_tap_state = TAP_PAUSE_IR;
      end
      TAP_PAUSE_IR:  begin
	 if (tms)
	    next_tap_state = TAP_EXIT2_IR;
	 else
	    next_tap_state = TAP_PAUSE_IR;
      end
      TAP_EXIT2_IR:  begin
	 if (tms)
	    next_tap_state = TAP_UPDATE_IR;
	 else
	    next_tap_state = TAP_SHIFT_IR;
      end
      TAP_UPDATE_IR: begin
	 if (tms)
	    next_tap_state = TAP_SEL_DR;
	 else
	    next_tap_state = TAP_TEST;
      end
// CoverMeter line_off
      default: next_tap_state = {TAP_STATE_WIDTH{1'bx}};
// CoverMeter line_on
   endcase
end

// Tap state
assign capture_dr_state     = tap_state[TAP_CAP_DR_BIT];
assign shift_dr_state       = tap_state[TAP_SHIFT_DR_BIT];
assign pause_dr_state       = tap_state[TAP_PAUSE_DR_BIT];
assign update_dr_state      = tap_state[TAP_UPDATE_DR_BIT];
assign update_ir_state      = tap_state[TAP_UPDATE_IR_BIT];
assign shift_exit2_dr_state = tap_state[TAP_SHIFT_DR_BIT] | tap_state[TAP_EXIT2_DR_BIT];

//*******************************************************************************
// Instruction Register
//*******************************************************************************

always @ ( /*AUTOSENSE*/new_instructions or tap_state or tdi) begin
   if (tap_state[TAP_CAP_IR_BIT])       //load
      next_new_instructions = { {`TAP_INSTR_WIDTH-1{1'b0}}, 1'b1 };
   else begin
      if (tap_state[TAP_SHIFT_IR_BIT])  //shift
	 next_new_instructions = { tdi, new_instructions[`TAP_INSTR_WIDTH-1:1] };
      else
	 next_new_instructions = new_instructions;
   end
end

always @ ( /*AUTOSENSE*/instructions or new_instructions or tap_state) begin
   if (tap_state[TAP_UPDATE_IR_BIT])
      next_instructions = new_instructions;
   else
      next_instructions = instructions;
end

// - instruction register must have default instruction (idcode) when tap is in reset state
// - if in pin-based pscan, do not reset instruction register on tap state because
//   tap sm is on scan chain
assign next_tap_state_reset_negedge = tap_state[TAP_RESET_BIT];
assign reset_muxed = dft_pin_pscan ? 1'b0 : tap_state_reset_negedge;
assign instructions_rst_l = ~reset_muxed & trst_n;

//*******************************************************************************
// TDO
//**********************************************************;
reg