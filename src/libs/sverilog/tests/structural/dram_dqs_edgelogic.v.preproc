module dram_dqs_edgelogic(
      clk_sel, dqs_pad_clk_so, to_pad, oe, 
      clk, dqs_pad_clk_se, dqs_pad_clk_si, 
   dram_io_drive_enable, dram_io_drive_data, 
   dram_io_channel_disabled, to_core, testmode_l
   );

input			clk;
input			testmode_l;
input			dqs_pad_clk_se;
input			dqs_pad_clk_si;
input			dram_io_drive_enable;
input			dram_io_drive_data;
input			dram_io_channel_disabled;
input			to_core;

output			clk_sel;
output			dqs_pad_clk_so;
output			to_pad;
output			oe;


wire  = testmode_l ? ~clk : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)	flop_enable(
		.din(dram_io_drive_enable),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 =  ? ~clk : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)	flop_enable(
		.din(dram_io_drive_enable),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 ? ~ : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)	flop_enable(
		.din(dram_io_drive_enable),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 : ;

// INSTANTIATING PAD LOGIC

dff_s #(1)	flop_enable(
		.din(dram_io_drive_enable),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
;


dff_s #(1)	(
		.din(dram_io_drive_enable),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
(
		.din(),
		.q(enable_q),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.q(),
		.clk(clk), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.clk(), .si(dqs_pad_clk_si), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .si(), .so(dqs_pad_clk_si1), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .so(), .se(dqs_pad_clk_se));

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .se());

dff_s #(1)	flop_ch_enable(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
));

dff_s #(1)	(
		.din(dram_io_channel_disabled),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
(
		.din(),
		.q(ch_disabled),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.q(),
		.clk(clk), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.clk(), .si(dqs_pad_clk_si1), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .si(), .so(dqs_pad_clk_si2), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .so(), .se(dqs_pad_clk_se));

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .se());

assign clk_sel = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
));

assign  = (enable_q | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 = ( | ~testmode_l) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 | ~) ? clk : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
) ?  : to_core;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 : ;

assign oe = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
;

assign  = enable_q;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
 = ;

dff_s #(1)	flop_drive_dqs(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
;

dff_s #(1)	(
		.din(dram_io_drive_data),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
(
		.din(),
		.q(drive_dqs_q),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.q(),
		.clk(tclk), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
),
		.clk(), .si(dqs_pad_clk_si2), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .si(), .so(dqs_pad_clk_so), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .so(), .se(dqs_pad_clk_se));

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
), .se());

assign to_pad = clk & drive_dqs_q & ~ch_disabled;

endmodule
));

assign  = clk & drive_dqs_q & ~ch_disabled;

endmodule
 =  & drive_dqs_q & ~ch_disabled;

endmodule
 &  & ~ch_disabled;

endmodule
 & ~;

endmodule
;

endmodule
