

  

module bw_io_cmos_edgelogic(
      to_core, por, pad_up, bsr_up, pad_dn_l, bsr_dn_l,

      data, oe, bsr_mode, por_l,
   bsr_data_to_core, se, rcvr_data
   );

input		data;
input		oe;
input		bsr_mode;
input		por_l;
input		se;
input		bsr_data_to_core;
input		rcvr_data;
supply0		vss;
output		pad_up;
output		pad_dn_l;
output		bsr_up;
output		bsr_dn_l;
output		por;
output		to_core;


wire ;
wire pad_dn_l;
wire bsr_up;
wire bsr_dn_l;
wire por;
wire to_core;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
wire ;
wire bsr_up;
wire bsr_dn_l;
wire por;
wire to_core;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
wire ;
wire bsr_dn_l;
wire por;
wire to_core;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
wire ;
wire por;
wire to_core;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
wire ;
wire to_core;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
wire ;
		
//always 
//begin
//  bsr_up   = pad_up;
//  bsr_dn_l = pad_dn_l;
//  por      = ~por_l;
//  pad_up   =  data && oe;
//  pad_dn_l = ~(~data && oe);
//  to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;
//end

assign bsr_up   = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
		

assign    = pad_up;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
   = ;
assign bsr_dn_l = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
assign  = pad_dn_l;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
 = ;
assign por      = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
assign       = ~por_l;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
      = ~;
assign pad_up   =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
assign    =  data && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
   =   && oe;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
 && ;
assign pad_dn_l = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
;
assign  = ~(~data && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
 = ~(~ && oe);
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
 && );
assign to_core  = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
);
assign   = (bsr_mode && !se) ? bsr_data_to_core : rcvr_data;

endmodule
  = ( && !se) ? bsr_data_to_core : rcvr_data;

endmodule
 && !) ? bsr_data_to_core : rcvr_data;

endmodule
) ?  : rcvr_data;

endmodule
 : ;

endmodule
;

endmodule
