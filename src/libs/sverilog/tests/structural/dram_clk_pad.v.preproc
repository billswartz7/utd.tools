module dram_clk_pad(
      clk_pad_clk_so, bso, 
      pad, 
      vrefcode, vdd_h, update_dr, testmode_l, shift_dr, mode_ctrl, 
   hiz_n, dram_io_clk_enable, clock_dr, clk_value, clk_pad_clk_si, 
   clk_pad_clk_se, clk, cbu, cbd, bsi
   );


input			bsi;			input [8:1]		cbd;			input [8:1]		cbu;			input			clk;			input			clk_pad_clk_se;		input			clk_pad_clk_si;		input			clk_value;		input			clock_dr;		input			dram_io_clk_enable;	input			hiz_n;			input			mode_ctrl;		input			shift_dr;		input			testmode_l;		input			update_dr;		input			vdd_h;			input [7:0]		vrefcode;		
inout			pad;


output			bso;			output			clk_pad_clk_so;		

wire			;			// From clk_edgelogic of dram_clk_edgelogic.v
// End of automatics

//////////////////////////////////////////////////////////////////////////
// CODE
//////////////////////////////////////////////////////////////////////////

// INSTANTIATING PAD LOGIC

dram_clk_edgelogic clk_edgelogic(/*AUTOINST*/
				 // Outputs
				 .clk_pad_clk_so(clk_pad_clk_so),
				 .to_pad(to_pad),
				 // Inputs
				 .clk	(clk),
				 .testmode_l(testmode_l),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
;			


dram_clk_edgelogic (/*AUTOINST*/
				 // Outputs
				 .clk_pad_clk_so(clk_pad_clk_so),
				 .to_pad(to_pad),
				 // Inputs
				 .clk	(clk),
				 .testmode_l(testmode_l),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
(
				 				 .clk_pad_clk_so(),
				 .to_pad(to_pad),
				 // Inputs
				 .clk	(clk),
				 .testmode_l(testmode_l),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .to_pad(),
				 // Inputs
				 .clk	(clk),
				 .testmode_l(testmode_l),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 				 .clk	(),
				 .testmode_l(testmode_l),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .testmode_l(),
				 .clk_pad_clk_si(clk_pad_clk_si),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .clk_pad_clk_si(),
				 .clk_pad_clk_se(clk_pad_clk_se),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .clk_pad_clk_se(),
				 .clk_value(clk_value),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .clk_value(),
				 .dram_io_clk_enable(dram_io_clk_enable));

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
				 .dram_io_clk_enable());

// SSTL LOGIC

/*dram_mclk_pad AUTO_TEMPLATE( 
		.data_in		(to_pad),
		.oe			(1'b1),
		.to_core		(),
		.odt_enable_mask	(1'b1),
		.pad			(pad));
*/
dram_mclk_pad sstl_pad(/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
));



dram_mclk_pad (/*AUTOINST*/
		       // Outputs
		       .bso		(bso),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
(
		       		       .bso		(),
		       .to_core		(),			 // Templated
		       // Inouts
		       .pad		(pad),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .to_core		(),			 		       		       .pad		(),			 // Templated
		       // Inputs
		       .bsi		(bsi),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),			 		       		       .bsi		(),
		       .cbd		(cbd[8:1]),
		       .cbu		(cbu[8:1]),
		       .clock_dr	(clock_dr),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .cbd		([8:1]),
		       .cbu		([8:1]),
		       .clock_dr	(),
		       .data_in		(to_pad),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .data_in		(),		 // Templated
		       .hiz_n		(hiz_n),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),		 		       .hiz_n		(),
		       .mode_ctrl	(mode_ctrl),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .mode_ctrl	(),
		       .odt_enable_mask	(1'b1),			 // Templated
		       .oe		(1'b1),			 // Templated
		       .shift_dr	(shift_dr),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .odt_enable_mask	(1bb),			 		       .oe		(1bb),			 		       .shift_dr	(),
		       .update_dr	(update_dr),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .update_dr	(),
		       .vdd_h		(vdd_h),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .vdd_h		(),
		       .vrefcode	(vrefcode[7:0]));
endmodule
),
		       .vrefcode	([7:0]));
endmodule
