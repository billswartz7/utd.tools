module dram_clk_edgelogic(
      clk_pad_clk_so, to_pad, 
      clk, clk_pad_clk_si, clk_pad_clk_se, clk_value, 
   dram_io_clk_enable, testmode_l
   );

input			clk;
input			testmode_l;
input			clk_pad_clk_si;
input			clk_pad_clk_se;
input			clk_value;
input			dram_io_clk_enable;

output			clk_pad_clk_so;
output			to_pad;


wire  = testmode_l ? ~clk : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)        flop_io_pad_flip_clk(
                .din(dram_io_clk_enable),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 =  ? ~clk : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)        flop_io_pad_flip_clk(
                .din(dram_io_clk_enable),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 ? ~ : clk;

// INSTANTIATING PAD LOGIC

dff_s #(1)        flop_io_pad_flip_clk(
                .din(dram_io_clk_enable),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 : ;

// INSTANTIATING PAD LOGIC

dff_s #(1)        flop_io_pad_flip_clk(
                .din(dram_io_clk_enable),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
;


dff_s #(1)        (
                .din(dram_io_clk_enable),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
(
                .din(),
                .q(dram_io_clk_enable_d1),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
),
                .q(),
                .clk(tclk),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
),
                .clk(),
                .si(clk_pad_clk_si), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
),
                .si(), .so(clk_pad_clk_so), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
), .so(), .se(clk_pad_clk_se));

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
), .se());

wire clk_out = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
));

wire  = clk_value & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 =  & dram_io_clk_enable_d1;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 & ;

wire enable_mux_val = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
;

wire  = dram_io_clk_enable_d1 ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 =  ? ~clk_out : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 ? ~ : clk_out;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
 : ;

assign to_pad = clk ? clk_out : enable_mux_val;

endmodule
;

assign  = clk ? clk_out : enable_mux_val;

endmodule
 =  ? clk_out : enable_mux_val;

endmodule
 ?  : enable_mux_val;

endmodule
 : ;

endmodule
;

endmodule
