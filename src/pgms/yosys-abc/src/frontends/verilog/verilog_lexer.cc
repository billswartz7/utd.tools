#line 2 "../verilog_lexer.cc"

#line 4 "../verilog_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer frontend_verilog_yy_create_buffer
#define yy_delete_buffer frontend_verilog_yy_delete_buffer
#define yy_flex_debug frontend_verilog_yy_flex_debug
#define yy_init_buffer frontend_verilog_yy_init_buffer
#define yy_flush_buffer frontend_verilog_yy_flush_buffer
#define yy_load_buffer_state frontend_verilog_yy_load_buffer_state
#define yy_switch_to_buffer frontend_verilog_yy_switch_to_buffer
#define yyin frontend_verilog_yyin
#define yyleng frontend_verilog_yyleng
#define yylex frontend_verilog_yylex
#define yylineno frontend_verilog_yylineno
#define yyout frontend_verilog_yyout
#define yyrestart frontend_verilog_yyrestart
#define yytext frontend_verilog_yytext
#define yywrap frontend_verilog_yywrap
#define yyalloc frontend_verilog_yyalloc
#define yyrealloc frontend_verilog_yyrealloc
#define yyfree frontend_verilog_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE frontend_verilog_yyrestart(frontend_verilog_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t frontend_verilog_yyleng;

extern FILE *frontend_verilog_yyin, *frontend_verilog_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE frontend_verilog_yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-frontend_verilog_yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < frontend_verilog_yyleng; ++yyl )\
                    if ( frontend_verilog_yytext[yyl] == '\n' )\
                        --frontend_verilog_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up frontend_verilog_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via frontend_verilog_yyrestart()), so that the user can continue scanning by
	 * just pointing frontend_verilog_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when frontend_verilog_yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t frontend_verilog_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow frontend_verilog_yywrap()'s to do buffer switches
 * instead of setting up a fresh frontend_verilog_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void frontend_verilog_yyrestart (FILE *input_file  );
void frontend_verilog_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE frontend_verilog_yy_create_buffer (FILE *file,int size  );
void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void frontend_verilog_yypop_buffer_state (void );

static void frontend_verilog_yyensure_buffer_stack (void );
static void frontend_verilog_yy_load_buffer_state (void );
static void frontend_verilog_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER frontend_verilog_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE frontend_verilog_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *frontend_verilog_yyalloc (yy_size_t  );
void *frontend_verilog_yyrealloc (void *,yy_size_t  );
void frontend_verilog_yyfree (void *  );

#define yy_new_buffer frontend_verilog_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define frontend_verilog_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *frontend_verilog_yyin = (FILE *) 0, *frontend_verilog_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int frontend_verilog_yylineno;

int frontend_verilog_yylineno = 1;

extern char *frontend_verilog_yytext;
#define yytext_ptr frontend_verilog_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up frontend_verilog_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	frontend_verilog_yyleng = (yy_size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[734] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  140,  138,  135,  135,  135,  138,   79,   89,
      138,  138,  138,  138,  138,  138,  138,   75,  138,  138,
      138,  138,   89,  138,  138,  138,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  138,  138,  138,  132,  133,
      132,   82,  139,   81,   82,   91,   92,   91,   91,   97,
       97,   97,   97,  103,  101,  101,  100,  102,    0,    0,
      113,   89,   89,   89,   89,   89,   89,   89,   89,  111,
        0,    0,  105,  106,  109,  108,  127,  129,  128,  130,

      131,  137,    0,   75,    0,   75,  126,  122,  114,  112,
      115,  123,  104,  136,  121,    9,    9,    9,    9,    9,
        9,    9,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   29,
       89,   89,   89,   89,   89,   89,   89,   34,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  107,  110,  118,  120,  119,
      134,   80,    0,    0,    0,   98,    0,    0,  100,  117,
       89,   89,   89,   89,   89,   89,   89,   89,   89,    0,
       76,    0,    0,  137,   77,    0,   78,  124,  116,  125,

        9,    9,    9,    9,    9,    9,    9,   89,   83,   89,
       89,   89,   61,   83,   89,   89,   89,   89,   89,   89,
       28,   89,   89,   31,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   83,   89,   89,   89,
       89,   89,   89,   89,   89,   68,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,    0,    0,
        0,    0,    0,    0,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,    0,   77,    0,    9,    9,    9,
        9,    9,    9,   89,   89,   89,   89,   89,   89,   89,
       35,   89,   89,   89,   89,   89,   30,   89,   89,   89,

       89,   89,   89,   89,   73,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   56,   72,   89,   89,   89,
       89,   89,   89,   14,   89,   89,   89,   67,    0,    0,
        0,    0,    0,   89,   89,   89,   89,   89,   86,   89,
       89,   89,    0,    0,   77,    9,    9,    9,    9,    9,
        9,   89,   89,   89,   89,   89,   27,   89,   36,   37,
       89,   57,   53,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   66,
       64,   89,   89,   60,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   42,    0,    0,    0,    0,    0,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,    0,    0,
        9,    9,    9,    9,    0,    9,   25,   51,   24,   52,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   71,   89,   89,   89,   89,
       10,   89,   65,   89,   89,   89,   89,   89,   43,   89,
       89,   70,   89,   89,   89,   89,   45,    0,    0,    0,
        0,    0,   89,   89,   89,   89,   89,   89,   87,   89,
        0,    0,    9,    9,    9,    9,    9,    0,    9,   89,

       89,   58,   39,   89,   38,   89,   89,   89,   89,   89,
       89,   15,   89,   89,   89,    0,   26,   69,   89,   33,
       19,   89,   32,   89,   89,   89,   89,   16,   89,   84,
       85,   74,   46,    0,    0,    0,    0,    0,   89,   89,
       89,    0,    0,    9,    9,    9,    9,    9,    9,    0,
        9,   89,   89,   89,   89,   23,   89,   89,   89,   89,
       89,   89,   89,   12,   40,    0,   89,   89,   47,   55,
       54,   89,   89,    0,    0,    0,    0,    0,    0,   88,
        0,    0,    9,    9,    9,    9,    9,    9,    0,    9,
       89,   49,   89,   44,   89,   89,   89,   11,   89,   89,

       89,    0,   89,   21,   89,   18,    0,    0,    0,    0,
       95,    0,    0,    0,    9,    9,    9,    9,    0,    2,
        9,    9,    0,    9,   89,   89,   59,   89,   89,   20,
       17,   62,    0,   22,   89,    0,    0,    0,    0,   94,
        0,    6,    9,    9,    9,    1,    0,    0,   48,   89,
       13,   41,    0,   89,    0,    0,    0,    0,    6,    6,
        9,    9,    9,    1,    0,    3,    0,    0,    0,   50,
        0,    0,   63,    0,    0,    0,    9,    9,    9,    0,
        5,    0,    0,    0,   96,    0,    9,    7,    9,    5,
        5,    0,    0,    0,    9,    7,    7,    4,    0,    0,

        0,    9,    4,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,    0,    0,    0,
       93,   90,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    1,    9,   10,   11,
       12,   13,   14,    1,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   27,
       32,   33,   34,   32,   32,   32,   32,   32,   33,   35,
       32,   32,   32,   32,   32,   32,   32,   27,   32,   27,
        1,   36,    1,   37,   38,   39,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   32,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    8,    8,    8,
        1,    1,    1,    1,    1,    9,   10,   10,   10,   10,
       10,    6,    6,    6,    6,    1,    1,   10,    1,   10,
       10,   10,   10,   10,   10,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,   10,    6,   10,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[758] =
    {   0,
        0,    0,   66,   67,   68,   69,   70,   71,   78,   79,
      133,    0, 1378, 1379,   84, 1379, 1379, 1353, 1379,   55,
     1367,  174, 1362,  193,   63,   75,   80,  206, 1353,   78,
     1349,   83,    0,  114, 1304,  190,   69,  170,  183, 1327,
       70,   72, 1326,  158, 1316, 1315,  198,  187,  199,   55,
      209,  201, 1315,  165,  167, 1353, 1299,  219, 1379, 1379,
     1347, 1379, 1379, 1379,    0, 1379, 1379, 1350,   33, 1379,
     1345, 1302, 1320, 1379, 1379, 1379,    0, 1379,  256,  237,
     1335,    0,  214, 1310, 1304,  201, 1308, 1303, 1298, 1379,
      272,  258, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,

      267,    0,  263,  290,  298,  307, 1379, 1330, 1379, 1328,
     1379, 1326,  250, 1379, 1379,    0, 1306, 1305, 1296, 1299,
     1298, 1297, 1283, 1300, 1285, 1283, 1294, 1281, 1293, 1280,
     1292,   51, 1290, 1277,  228, 1289, 1276, 1279, 1278,    0,
     1275,  249,  247, 1285, 1275, 1280,   71,    0, 1267,  273,
     1267,  266, 1271,  293, 1278, 1275, 1276, 1265, 1261, 1263,
     1268, 1267, 1258, 1260, 1256, 1379, 1379, 1379, 1379, 1379,
     1379, 1379,  330, 1263, 1262, 1379, 1259, 1252,    0, 1379,
     1250, 1255, 1253, 1252, 1257,  284, 1251, 1244, 1252,  339,
      350,  344, 1236,    0,  338,  341,  345, 1379, 1379, 1379,

        0, 1248, 1252, 1253, 1245, 1242, 1242, 1252,    0,  318,
     1238, 1242,    0, 1241, 1244, 1245, 1229, 1241,  327, 1240,
      346, 1232, 1230,    0, 1239,  260, 1227, 1221, 1219, 1218,
     1232, 1235, 1226, 1214, 1229, 1227, 1222, 1215, 1219, 1227,
     1222, 1212, 1210, 1220, 1212,    0, 1217, 1202, 1199, 1206,
     1215, 1202, 1206, 1210, 1198, 1202, 1207, 1194,  366, 1186,
     1198, 1195, 1196, 1205, 1190, 1189, 1194, 1193, 1188, 1185,
     1185, 1193, 1188, 1177, 1182,  355,  391, 1183, 1192, 1189,
     1186, 1185, 1184, 1164, 1170, 1179, 1173, 1172, 1170, 1176,
      234, 1171, 1161, 1162, 1158, 1176,    0,  338, 1156, 1170,

     1160, 1172, 1157, 1170,    0, 1151, 1150, 1151, 1166, 1149,
     1156, 1145, 1144, 1155, 1150, 1157, 1148, 1154, 1151, 1136,
     1154, 1142, 1149, 1135, 1146,    0,    0, 1149, 1132, 1143,
     1142,  336, 1135,    0, 1141, 1124, 1138,    0, 1129, 1136,
     1135, 1140, 1127, 1126,  362, 1118, 1116, 1129,    0, 1131,
     1125, 1126,  336,  394,  398, 1126, 1109, 1123, 1128,  393,
     1108, 1107, 1105, 1110, 1117, 1120,    0,  312,    0,    0,
     1115,    0,    0, 1108, 1101, 1099, 1111, 1102, 1101, 1109,
     1109, 1106, 1092, 1089, 1099, 1106, 1089, 1086, 1103,    0,
        0, 1098, 1087,    0, 1096, 1093,  401, 1080, 1091, 1092,

     1089, 1086, 1077, 1074, 1083, 1078, 1086, 1083, 1087, 1063,
     1081, 1080,    0,  368, 1085,  422, 1080, 1071, 1080, 1069,
     1070,  383, 1077, 1069, 1062, 1071, 1069, 1060, 1057, 1063,
     1065, 1058, 1057,  318,  428, 1064, 1067,    0,    0,    0,
     1046, 1047, 1044, 1061, 1056, 1057, 1056, 1053, 1037, 1046,
     1052, 1044, 1052, 1038, 1032,    0,  435, 1039, 1032, 1047,
        0, 1042,    0, 1041, 1026, 1039, 1024, 1023,    0, 1038,
     1021,    0, 1015, 1021,  423, 1031, 1057, 1020, 1026, 1018,
     1031, 1026, 1006, 1018, 1017, 1021, 1009, 1008,    0, 1019,
     1005, 1017, 1015, 1001, 1008, 1004,  372,  441, 1016,  402,

     1007,    0,    0, 1003,    0, 1004,  994,  995, 1000, 1009,
     1000,    0,  997,  994, 1001,  446,    0,    0,  988,    0,
        0,  999,    0,  979,  978,  982,  980,    0,  998,    0,
        0,    0,    0,  980,  992,  401,  978,  984,  989,  975,
      988,  967,  972,  980,  989,  983,  967,  970,  966,  454,
      972,  968,  975,  979,  976,    0,  973,  968,  975,  970,
      967,  967,  961,    0,    0,  980,  969,  952,    0,    0,
        0,  967,  955,  942,  947,  949,  945,  957,  959,    0,
      937,  945,  931,  921,  920,  918,  461,  907,    0,  899,
      886,    0,  876,    0,  877,  871,  855,    0,  851,  831,

      830,  849,  832,    0,  829,    0,  820,  821,  865,  815,
     1379,  819,  528,  798,  809,  800,  795,  786,  835, 1379,
        0,  826,  821,  453,  784,  781,    0,  664,  668,    0,
        0,    0,  677,    0,  660,  529,  652,  703,  667,  530,
      650,  588,  647,  655,  643,    0,  533,  537,    0,  654,
        0,    0,  530,  637,  655,  643,  641,  657,    0,    0,
      638,  643,  642,    0,  541, 1379,  690,  544,  548,    0,
      552,  663,    0,  651,  646,  637,  625,  643,  643,  556,
      557,  659,  678,  632, 1379,  626,  627,  713,  675,  558,
      562,  620,  618,  623,  628,    0,    0,    0,  607,  608,

      551,  564,    0,  543,  544,  516,  566,  512,  494,  499,
      570,  493,  413,  407,  381,  370,  343,  328,  295,  277,
      574,  227,  200,  578,  663,  664,  665,   98,  669,   68,
     1379, 1379, 1379,  781,  791,  801,  811,  816,  826,  831,
      841,  846,  855,  865,  870,  880,  890,  900,  910,  920,
      930,  940,  950,  960,  970,  980,  990
    } ;

static yyconst flex_int16_t yy_def[758] =
    {   0,
      733,    1,  734,  734,  735,  735,  736,  736,  737,  737,
      733,   11,  733,  733,  733,  733,  733,  733,  733,  738,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  738,  739,  733,  740,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  741,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  742,  733,  733,  733,
      733,  738,  738,  738,  738,  738,  738,  738,  738,  733,
      743,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  744,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  739,  733,  733,  745,  745,  745,  745,  745,
      745,  745,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  742,  733,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  743,
      743,  733,  733,  744,  733,  733,  733,  733,  733,  733,

      745,  745,  745,  745,  745,  745,  745,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  733,  733,
      733,  733,  733,  733,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  733,  733,  733,  745,  745,  745,
      745,  745,  745,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  733,  733,
      733,  733,  733,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  733,  733,  733,  745,  745,  745,  745,  745,
      745,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  733,  733,  733,  733,  733,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  733,  733,
      745,  745,  745,  745,  746,  745,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  733,  733,  733,
      733,  733,  738,  738,  738,  738,  738,  738,  738,  738,
      733,  733,  745,  745,  745,  745,  745,  746,  745,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  733,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  733,  733,  733,  733,  733,  738,  738,
      738,  733,  733,  745,  745,  745,  745,  745,  745,  733,
      745,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  733,  738,  738,  738,  738,
      738,  738,  738,  733,  733,  733,  733,  733,  733,  738,
      733,  733,  745,  745,  745,  745,  733,  745,  747,  745,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  733,  738,  738,  738,  738,  733,  733,  748,  733,
      733,  733,  733,  733,  745,  745,  745,  745,  748,  733,
      587,  745,  747,  745,  738,  738,  738,  738,  738,  738,
      738,  738,  733,  738,  738,  733,  733,  733,  733,  733,
      733,  733,  745,  745,  745,  749,  750,  751,  738,  738,
      738,  738,  733,  738,  733,  733,  733,  733,  752,  642,
      745,  745,  745,  749,  750,  733,  753,  750,  751,  738,
      733,  733,  738,  733,  733,  733,  745,  745,  745,  733,
      754,  733,  733,  733,  733,  733,  745,  733,  745,  754,
      754,  733,  733,  733,  745,  755,  688,  756,  733,  733,

      733,  745,  756,  733,  733,  733,  757,  733,  733,  733,
      757,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,    0,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733
    } ;

static yyconst flex_int16_t yy_nxt[1448] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   20,   21,   22,
       23,   14,   24,   25,   26,   14,   27,   28,   28,   28,
       29,   14,   30,   31,   32,   14,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   34,   35,   33,   36,   37,
       38,   39,   40,   41,   42,   43,   33,   44,   33,   45,
       46,   47,   48,   49,   33,   50,   51,   52,   53,   33,
       54,   55,   33,   33,   56,   57,   14,   58,   60,   60,
       63,   63,   67,   67,   64,   64,   97,  174,   61,   61,
       63,   63,  175,   98,  732,   79,   68,   68,   79,   99,
       71,   71,  101,   80,  153,  100,  102,   83,  154,   84,

      108,  109,  217,   65,   65,   85,  111,  112,   69,   69,
      218,   86,   87,   88,  731,   89,  114,  114,  123,  134,
      124,  135,   72,   72,  137,  125,  209,  126,  237,  136,
      138,   73,   73,   74,   75,   76,   75,   75,   74,   74,
       77,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   78,   74,   74,   74,   74,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   74,   74,
       77,   74,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   74,   74,   74,

       74,   91,  140,   91,   94,   95,   91,   79,  141,  142,
       79,  162,  163,  127,   91,   80,   91,  128,  164,  165,
       91,  103,  130,  104,  104,  104,   91,  168,  129,  131,
       92,  117,  118,  119,  120,  132,  105,  145,  150,  121,
      159,  146,  148,  106,  726,  149,  155,  122,  185,  105,
      147,  151,  733,  733,  152,  169,  156,   79,  186,   96,
       79,  181,  157,  160,   91,   80,   91,  158,  192,   91,
      221,  192,  182,  190,  190,  190,  190,   91,  725,   91,
      195,  195,  195,   91,  170,   91,  222,   91,  232,   91,
       91,   79,  233,   92,   79,  369,  228,  370,   91,   80,

       91,  229,  230,  308,   91,  103,  231,  104,  104,  104,
       91,  196,  196,  242,  239,  197,  197,  197,  243,  309,
      105,  723,  103,  193,  106,  106,  106,  106,  240,  209,
      209,  259,  245,  105,  259,  197,  270,  105,  246,  271,
      190,  190,  190,  190,  106,  192,  247,  722,  192,  248,
      105,  733,  733,  733,  733,  276,  276,  276,  197,  197,
      197,  285,  197,  197,  197,  286,  295,  259,  277,  496,
      259,  497,  276,  276,  276,  276,  287,  376,  197,  721,
      296,  277,  197,  408,  377,  277,  260,  298,  429,  409,
      299,  300,  276,  430,  435,  720,  301,  435,  277,  302,

      193,  420,  303,  304,  354,  354,  421,  719,  355,  355,
      355,  355,  355,  355,  422,  355,  355,  355,  209,  209,
      478,  423,  260,  435,  548,  479,  435,  486,  355,  435,
      549,  355,  435,  718,  349,  355,  516,  516,  516,  516,
      530,  531,  550,  552,  717,  550,  553,  516,  516,  516,
      516,  554,  566,  576,  648,  550,  716,  648,  550,  577,
      589,  619,  619,  620,  619,  619,  619,  619,  621,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  621,  621,
      621,  619,  619,  619,  619,  619,  619,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  619,  619,  621,  619,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  619,  619,  619,  619,  640,
      655,  640,  640,  655,  640,  666,  671,  667,  648,  668,
      715,  648,  714,  666,  672,  667,  666,  668,  667,  680,
      668,  713,  680,  682,  682,  682,  682,  680,  691,  733,
      680,  691,  733,  691,  681,  707,  691,  707,  707,  712,
      707,  733,  681,  710,  733,  724,  724,  724,  724,  724,
      724,  724,  724,  709,  708,  641,  656,  641,  659,  659,
      706,  659,  659,  659,  659,  660,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  660,  660,  660,  659,  659,
      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  659,  659,  660,  659,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  659,  659,  659,  659,  655,  705,  704,  655,
      682,  682,  682,  682,  727,  729,  727,  727,  729,  727,
      729,  702,  701,  729,  700,  728,  730,  728,  699,  698,
      695,  730,  694,  693,  671,  689,  688,  687,  686,  685,
      684,  683,  666,  679,  678,  677,  676,  675,  674,  673,

      670,  663,  662,  692,  661,  658,  657,  646,  636,  654,
      653,  652,  656,  696,  696,  651,  696,  696,  696,  696,
      697,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      697,  697,  697,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  696,  696,
      697,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  696,  696,  696,
      696,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   82,  650,   82,  649,   82,  113,  647,  113,  113,
      646,  113,  113,  113,  113,  113,  116,  620,  645,  644,
      116,  172,  172,  643,  172,  172,  172,  172,  172,  172,
      172,  179,  642,  179,  613,  179,  191,  191,  191,  191,
      639,  638,  191,  191,  191,  194,  194,  620,  637,  194,
      194,  194,  194,  194,  194,  201,  636,  201,  635,  201,
      498,  498,  634,  633,  498,  498,  498,  498,  498,  498,
      623,  623,  632,  631,  630,  623,  623,  623,  623,  623,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      664,  664,  629,  664,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  628,  665,  665,  665,  665,  665,  665,
      669,  669,  627,  626,  669,  669,  625,  669,  669,  669,
      659,  659,  624,  659,  659,  659,  659,  659,  659,  659,
      667,  667,  667,  622,  667,  667,  667,  667,  667,  667,
      690,  690,  618,  617,  690,  690,  690,  690,  690,  690,
      696,  696,  616,  696,  696,  696,  696,  696,  696,  696,
      703,  703,  615,  703,  703,  703,  703,  703,  703,  703,
      711,  711,  614,  613,  711,  711,  612,  711,  711,  711,

      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  349,  349,  579,  578,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  551,  547,  546,  545,  544,
      543,  542,  541,  349,  540,  349,  539,  349,  349,  538,
      537,  536,  535,  534,  533,  532,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,

      504,  503,  502,  501,  500,  499,  495,  494,  493,  492,
      491,  490,  349,  489,  488,  349,  487,  485,  484,  483,
      482,  481,  480,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  434,  433,  432,  431,  349,
      428,  427,  426,  425,  424,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,

      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  375,  374,  373,  372,  371,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  353,  352,  351,  349,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  209,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  209,  317,  316,  315,  314,  313,  312,  311,  310,
      307,  306,  305,  297,  294,  293,  292,  291,  290,  289,
      288,  284,  283,  282,  281,  280,  279,  278,  275,  274,

      273,  272,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  209,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  244,  241,  238,  236,  235,  234,  227,  226,
      225,  224,  223,  220,  219,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      200,  199,  198,  189,  188,  187,  184,  183,  180,  178,
      177,  176,  173,  171,  167,  166,  161,  144,  143,  139,
      133,  115,  110,  107,   93,   90,   81,  733,   13,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733
    } ;

static yyconst flex_int16_t yy_chk[1448] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    8,    5,    6,   25,   69,    3,    4,
        9,   10,   69,   25,  730,   15,    7,    8,   15,   26,
        9,   10,   27,   15,   50,   26,   27,   20,   50,   20,

       30,   30,  132,    5,    6,   20,   32,   32,    7,    8,
      132,   20,   20,   20,  728,   20,   34,   34,   37,   41,
       37,   41,    9,   10,   42,   37,  147,   37,  147,   41,
       42,    9,   10,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   22,   44,   22,   24,   24,   22,   28,   44,   44,
       28,   54,   54,   38,   22,   28,   22,   38,   55,   55,
       22,   28,   39,   28,   28,   28,   22,   58,   38,   39,
       22,   36,   36,   36,   36,   39,   28,   47,   49,   36,
       52,   47,   48,   28,  723,   48,   51,   36,   86,   28,
       47,   49,  113,  113,   49,   58,   51,   79,   86,   24,
       79,   83,   51,   52,   80,   79,   80,   51,  101,   80,
      135,  101,   83,   91,   91,   91,   91,   80,  722,   80,
      103,  103,  103,   80,   58,   92,  135,   92,  143,   80,
       92,  104,  143,   80,  104,  291,  142,  291,   92,  104,

       92,  142,  142,  226,   92,  104,  142,  104,  104,  104,
       92,  105,  105,  152,  150,  105,  105,  105,  152,  226,
      104,  720,  106,  101,  106,  106,  106,  104,  150,  368,
      368,  173,  154,  104,  173,  105,  186,  106,  154,  186,
      190,  190,  190,  190,  106,  192,  154,  719,  192,  154,
      106,  191,  191,  191,  191,  195,  195,  195,  196,  196,
      196,  210,  197,  197,  197,  210,  219,  259,  195,  434,
      259,  434,  276,  276,  276,  195,  210,  298,  196,  718,
      219,  195,  197,  332,  298,  276,  173,  221,  353,  332,
      221,  221,  276,  353,  360,  717,  221,  360,  276,  221,

      192,  345,  221,  221,  277,  277,  345,  716,  277,  277,
      277,  354,  354,  354,  345,  355,  355,  355,  397,  397,
      414,  345,  259,  416,  497,  414,  416,  422,  277,  435,
      497,  354,  435,  715,  422,  355,  457,  457,  457,  457,
      475,  475,  498,  500,  714,  498,  500,  516,  516,  516,
      516,  500,  516,  536,  624,  550,  713,  624,  550,  536,
      550,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  613,
      636,  640,  613,  636,  640,  647,  653,  647,  648,  647,
      712,  648,  710,  665,  653,  665,  668,  665,  668,  669,
      668,  709,  669,  671,  671,  671,  671,  680,  681,  690,
      680,  681,  690,  691,  669,  702,  691,  707,  702,  708,
      707,  711,  680,  706,  711,  721,  721,  721,  721,  724,
      724,  724,  724,  705,  704,  613,  636,  640,  642,  642,
      701,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  655,  700,  699,  655,
      682,  682,  682,  682,  725,  726,  727,  725,  726,  727,
      729,  695,  694,  729,  693,  725,  726,  727,  692,  689,
      687,  729,  686,  684,  683,  679,  678,  677,  676,  675,
      674,  672,  667,  663,  662,  661,  658,  657,  656,  654,

      650,  645,  644,  682,  643,  641,  639,  638,  637,  635,
      633,  629,  655,  688,  688,  628,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  738,  626,  738,  625,  738,  739,  623,  739,  739,
      622,  739,  739,  739,  739,  739,  740,  619,  618,  617,
      740,  741,  741,  616,  741,  741,  741,  741,  741,  741,
      741,  742,  615,  742,  614,  742,  743,  743,  743,  743,
      612,  610,  743,  743,  743,  744,  744,  609,  608,  744,
      744,  744,  744,  744,  744,  745,  607,  745,  605,  745,
      746,  746,  603,  602,  746,  746,  746,  746,  746,  746,
      747,  747,  601,  600,  599,  747,  747,  747,  747,  747,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      749,  749,  597,  749,  749,  749,  749,  749,  749,  749,
      750,  750,  750,  596,  750,  750,  750,  750,  750,  750,
      751,  751,  595,  593,  751,  751,  591,  751,  751,  751,
      752,  752,  590,  752,  752,  752,  752,  752,  752,  752,
      753,  753,  753,  588,  753,  753,  753,  753,  753,  753,
      754,  754,  586,  585,  754,  754,  754,  754,  754,  754,
      755,  755,  584,  755,  755,  755,  755,  755,  755,  755,
      756,  756,  583,  756,  756,  756,  756,  756,  756,  756,
      757,  757,  582,  581,  757,  757,  579,  757,  757,  757,

      578,  577,  576,  575,  574,  573,  572,  568,  567,  566,
      563,  562,  561,  560,  559,  558,  557,  555,  554,  553,
      552,  551,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  535,  534,  529,  527,  526,
      525,  524,  522,  519,  515,  514,  513,  511,  510,  509,
      508,  507,  506,  504,  501,  499,  496,  495,  494,  493,
      492,  491,  490,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  474,  473,  471,  470,
      468,  467,  466,  465,  464,  462,  460,  459,  458,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,

      444,  443,  442,  441,  437,  436,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  421,  420,  419,
      418,  417,  415,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  396,  395,
      393,  392,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  371,  366,
      365,  364,  363,  362,  361,  359,  358,  357,  356,  352,
      351,  350,  348,  347,  346,  344,  343,  342,  341,  340,
      339,  337,  336,  335,  333,  331,  330,  329,  328,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,

      314,  313,  312,  311,  310,  309,  308,  307,  306,  304,
      303,  302,  301,  300,  299,  296,  295,  294,  293,  292,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      225,  223,  222,  220,  218,  217,  216,  215,  214,  212,
      211,  208,  207,  206,  205,  204,  203,  202,  193,  189,

      188,  187,  185,  184,  183,  182,  181,  178,  177,  175,
      174,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  153,  151,  149,  146,  145,  144,  141,  139,
      138,  137,  136,  134,  133,  131,  130,  129,  128,  127,
      126,  125,  124,  123,  122,  121,  120,  119,  118,  117,
      112,  110,  108,   89,   88,   87,   85,   84,   81,   73,
       72,   71,   68,   61,   57,   56,   53,   46,   45,   43,
       40,   35,   31,   29,   23,   21,   18,   13,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[140] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int frontend_verilog_yy_flex_debug;
int frontend_verilog_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *frontend_verilog_yytext;
#line 1 "verilog_lexer.l"
/*
 *  yosys -- Yosys Open SYnthesis Suite
 *
 *  Copyright (C) 2012  Clifford Wolf <clifford@clifford.at>
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *  ---
 *
 *  The Verilog frontend.
 *
 *  This frontend is using the AST frontend library (see frontends/ast/).
 *  Thus this frontend does not generate RTLIL code directly but creates an
 *  AST directly from the Verilog parse tree and then passes this AST to
 *  the AST frontend library.
 *
 *  ---
 *
 *  A simple lexer for Verilog code. Non-preprocessor compiler directives are
 *  handled here. The preprocessor stuff is handled in preproc.cc. Everything
 *  else is left to the bison parser (see parser.y).
 *
 */
#line 36 "verilog_lexer.l"

#ifdef __clang__
// bison generates code using the 'register' storage class specifier
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#include "kernel/log.h"
#include "frontends/verilog/verilog_frontend.h"
#include "frontends/ast/ast.h"
#include "verilog_parser.tab.hh"

USING_YOSYS_NAMESPACE
using namespace AST;
using namespace VERILOG_FRONTEND;

YOSYS_NAMESPACE_BEGIN
namespace VERILOG_FRONTEND {
	std::vector<std::string> fn_stack;
	std::vector<int> ln_stack;
}
YOSYS_NAMESPACE_END

#define SV_KEYWORD(_tok) \
	if (sv_mode) return _tok; \
	log("Lexer warning: The SystemVerilog keyword `%s' (at %s:%d) is not "\
			"recognized unless read_verilog is called with -sv!\n", frontend_verilog_yytext, \
			AST::current_filename.c_str(), frontend_verilog_yyget_lineno()); \
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define NON_KEYWORD() \
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define YY_INPUT(buf,result,max_size) \
	result = readsome(*VERILOG_FRONTEND::lexin, buf, max_size)






#line 1143 "../verilog_lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define SYNOPSYS_TRANSLATE_OFF 3
#define SYNOPSYS_FLAGS 4
#define IMPORT_DPI 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int frontend_verilog_yylex_destroy (void );

int frontend_verilog_yyget_debug (void );

void frontend_verilog_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE frontend_verilog_yyget_extra (void );

void frontend_verilog_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *frontend_verilog_yyget_in (void );

void frontend_verilog_yyset_in  (FILE * in_str  );

FILE *frontend_verilog_yyget_out (void );

void frontend_verilog_yyset_out  (FILE * out_str  );

yy_size_t frontend_verilog_yyget_leng (void );

char *frontend_verilog_yyget_text (void );

int frontend_verilog_yyget_lineno (void );

void frontend_verilog_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int frontend_verilog_yywrap (void );
#else
extern int frontend_verilog_yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( frontend_verilog_yytext, frontend_verilog_yyleng, 1, frontend_verilog_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( frontend_verilog_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( frontend_verilog_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, frontend_verilog_yyin))==0 && ferror(frontend_verilog_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(frontend_verilog_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int frontend_verilog_yylex (void);

#define YY_DECL int frontend_verilog_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after frontend_verilog_yytext and frontend_verilog_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 86 "verilog_lexer.l"


#line 1331 "../verilog_lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! frontend_verilog_yyin )
			frontend_verilog_yyin = stdin;

		if ( ! frontend_verilog_yyout )
			frontend_verilog_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			frontend_verilog_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
		}

		frontend_verilog_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of frontend_verilog_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 734 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1379 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = (yy_more_len); yyl < frontend_verilog_yyleng; ++yyl )
				if ( frontend_verilog_yytext[yyl] == '\n' )
					   
    frontend_verilog_yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "verilog_lexer.l"
{
	fn_stack.push_back(current_filename);
	ln_stack.push_back(frontend_verilog_yyget_lineno());
	current_filename = frontend_verilog_yytext+11;
	if (!current_filename.empty() && current_filename.front() == '"')
		current_filename = current_filename.substr(1);
	if (!current_filename.empty() && current_filename.back() == '"')
		current_filename = current_filename.substr(0, current_filename.size()-1);
	frontend_verilog_yyset_lineno(0);
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 99 "verilog_lexer.l"
{
	current_filename = fn_stack.back();
	fn_stack.pop_back();
	frontend_verilog_yyset_lineno(ln_stack.back());
	ln_stack.pop_back();
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 106 "verilog_lexer.l"
{
	char *p = frontend_verilog_yytext + 5;
	while (*p == ' ' || *p == '\t') p++;
	frontend_verilog_yyset_lineno(atoi(p));
	while (*p && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	char *q = *p ? p + 1 : p;
	while (*q && *q != '"') q++;
	current_filename = std::string(p).substr(1, q-p-1);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "verilog_lexer.l"
{
	log_error("Can't open include file `%s'!\n", frontend_verilog_yytext + 15);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 121 "verilog_lexer.l"
/* ignore timescale directive */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 123 "verilog_lexer.l"
/* ignore `celldefine */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "verilog_lexer.l"
/* ignore `endcelldefine */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "verilog_lexer.l"
{
	char *p = frontend_verilog_yytext;
	while (*p != 0 && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	if (!strcmp(p, "none"))
		VERILOG_FRONTEND::default_nettype_wire = false;
	else if (!strcmp(p, "wire"))
		VERILOG_FRONTEND::default_nettype_wire = true;
	else
		frontend_verilog_yyerror("Unsupported default nettype: %s", p);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 138 "verilog_lexer.l"
{
	frontend_verilog_yyerror("Unimplemented compiler directive or undefined macro %s.", frontend_verilog_yytext);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 142 "verilog_lexer.l"
{ return TOK_MODULE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 143 "verilog_lexer.l"
{ return TOK_ENDMODULE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 144 "verilog_lexer.l"
{ return TOK_FUNCTION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 145 "verilog_lexer.l"
{ return TOK_ENDFUNCTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 146 "verilog_lexer.l"
{ return TOK_TASK; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 147 "verilog_lexer.l"
{ return TOK_ENDTASK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 148 "verilog_lexer.l"
{ return TOK_SPECIFY; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 149 "verilog_lexer.l"
{ return TOK_ENDSPECIFY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "verilog_lexer.l"
{ return TOK_SPECPARAM; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 151 "verilog_lexer.l"
{ SV_KEYWORD(TOK_PACKAGE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 152 "verilog_lexer.l"
{ SV_KEYWORD(TOK_ENDPACKAGE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 153 "verilog_lexer.l"
{ return TOK_PARAMETER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 154 "verilog_lexer.l"
{ return TOK_LOCALPARAM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 155 "verilog_lexer.l"
{ return TOK_DEFPARAM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 156 "verilog_lexer.l"
{ return TOK_ASSIGN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 157 "verilog_lexer.l"
{ return TOK_ALWAYS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 158 "verilog_lexer.l"
{ return TOK_INITIAL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 159 "verilog_lexer.l"
{ return TOK_BEGIN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 160 "verilog_lexer.l"
{ return TOK_END; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 161 "verilog_lexer.l"
{ return TOK_IF; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 162 "verilog_lexer.l"
{ return TOK_ELSE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "verilog_lexer.l"
{ return TOK_FOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "verilog_lexer.l"
{ return TOK_POSEDGE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 165 "verilog_lexer.l"
{ return TOK_NEGEDGE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 166 "verilog_lexer.l"
{ return TOK_OR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 167 "verilog_lexer.l"
{ return TOK_CASE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 168 "verilog_lexer.l"
{ return TOK_CASEX; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 169 "verilog_lexer.l"
{ return TOK_CASEZ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 170 "verilog_lexer.l"
{ return TOK_ENDCASE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "verilog_lexer.l"
{ return TOK_DEFAULT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "verilog_lexer.l"
{ return TOK_GENERATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "verilog_lexer.l"
{ return TOK_ENDGENERATE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "verilog_lexer.l"
{ return TOK_WHILE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "verilog_lexer.l"
{ return TOK_REPEAT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "verilog_lexer.l"
{ return TOK_AUTOMATIC; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 178 "verilog_lexer.l"
{ SV_KEYWORD(TOK_UNIQUE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "verilog_lexer.l"
{ SV_KEYWORD(TOK_UNIQUE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "verilog_lexer.l"
{ SV_KEYWORD(TOK_PRIORITY); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 182 "verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 183 "verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 184 "verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 186 "verilog_lexer.l"
{ if (formal_mode) return TOK_ASSERT; SV_KEYWORD(TOK_ASSERT); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 187 "verilog_lexer.l"
{ if (formal_mode) return TOK_ASSUME; SV_KEYWORD(TOK_ASSUME); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 188 "verilog_lexer.l"
{ if (formal_mode) return TOK_COVER; SV_KEYWORD(TOK_COVER); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 189 "verilog_lexer.l"
{ if (formal_mode) return TOK_RESTRICT; SV_KEYWORD(TOK_RESTRICT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 190 "verilog_lexer.l"
{ if (formal_mode) return TOK_PROPERTY; SV_KEYWORD(TOK_PROPERTY); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 191 "verilog_lexer.l"
{ if (formal_mode) return TOK_RAND; SV_KEYWORD(TOK_RAND); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 192 "verilog_lexer.l"
{ if (formal_mode) return TOK_CONST; SV_KEYWORD(TOK_CONST); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 193 "verilog_lexer.l"
{ if (formal_mode) return TOK_CHECKER; SV_KEYWORD(TOK_CHECKER); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 194 "verilog_lexer.l"
{ if (formal_mode) return TOK_ENDCHECKER; SV_KEYWORD(TOK_ENDCHECKER); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 195 "verilog_lexer.l"
{ SV_KEYWORD(TOK_LOGIC); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 196 "verilog_lexer.l"
{ SV_KEYWORD(TOK_REG); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "verilog_lexer.l"
{ if (formal_mode) return TOK_EVENTUALLY; SV_KEYWORD(TOK_EVENTUALLY); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "verilog_lexer.l"
{ if (formal_mode) return TOK_EVENTUALLY; SV_KEYWORD(TOK_EVENTUALLY); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 201 "verilog_lexer.l"
{ return TOK_INPUT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 202 "verilog_lexer.l"
{ return TOK_OUTPUT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 203 "verilog_lexer.l"
{ return TOK_INOUT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 204 "verilog_lexer.l"
{ return TOK_WIRE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 205 "verilog_lexer.l"
{ return TOK_REG; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 206 "verilog_lexer.l"
{ return TOK_INTEGER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 207 "verilog_lexer.l"
{ return TOK_SIGNED; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 208 "verilog_lexer.l"
{ return TOK_GENVAR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 209 "verilog_lexer.l"
{ return TOK_REAL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 211 "verilog_lexer.l"
{ SV_KEYWORD(TOK_ENUM); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 212 "verilog_lexer.l"
{ SV_KEYWORD(TOK_TYPEDEF); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 214 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_CONSTVAL;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 219 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_CONSTVAL;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 224 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 229 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 234 "verilog_lexer.l"
{ BEGIN(STRING); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 235 "verilog_lexer.l"
{ yymore(); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 236 "verilog_lexer.l"
{
	BEGIN(0);
	char *yystr = strdup(frontend_verilog_yytext);
	yystr[strlen(frontend_verilog_yytext) - 1] = 0;
	int i = 0, j = 0;
	while (yystr[i]) {
		if (yystr[i] == '\\' && yystr[i + 1]) {
			i++;
			if (yystr[i] == 'a')
				yystr[i] = '\a';
			else if (yystr[i] == 'f')
				yystr[i] = '\f';
			else if (yystr[i] == 'n')
				yystr[i] = '\n';
			else if (yystr[i] == 'r')
				yystr[i] = '\r';
			else if (yystr[i] == 't')
				yystr[i] = '\t';
			else if (yystr[i] == 'v')
				yystr[i] = '\v';
			else if ('0' <= yystr[i] && yystr[i] <= '7') {
				yystr[i] = yystr[i] - '0';
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
			}
		}
		yystr[j++] = yystr[i++];
	}
	yystr[j] = 0;
	frontend_verilog_yylval.string = new std::string(yystr);
	free(yystr);
	return TOK_STRING;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 275 "verilog_lexer.l"
{ yymore(); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 277 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_PRIMITIVE;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 282 "verilog_lexer.l"
{ return TOK_SUPPLY0; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 283 "verilog_lexer.l"
{ return TOK_SUPPLY1; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 285 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 290 "verilog_lexer.l"
{ return TOK_TO_SIGNED; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 291 "verilog_lexer.l"
{ return TOK_TO_UNSIGNED; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 293 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 298 "verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) translate_off' comments.\n"
				"Yosys does support them but it is recommended to use `ifdef constructs instead!\n");
		printed_warning = true;
	}
	BEGIN(SYNOPSYS_TRANSLATE_OFF);
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 307 "verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 308 "verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 309 "verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "verilog_lexer.l"
{
	BEGIN(SYNOPSYS_FLAGS);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 314 "verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) full_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_FULL_CASE;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 323 "verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) parallel_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_PARALLEL_CASE;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 332 "verilog_lexer.l"
/* ignore everything else */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 333 "verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 335 "verilog_lexer.l"
{
	BEGIN(IMPORT_DPI);
	return TOK_DPI_FUNCTION;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 340 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 345 "verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 347 "verilog_lexer.l"
{
	BEGIN(0);
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 352 "verilog_lexer.l"
{
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 356 "verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 361 "verilog_lexer.l"
{ return ATTR_BEGIN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 362 "verilog_lexer.l"
{ return ATTR_END; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 364 "verilog_lexer.l"
{ return DEFATTR_BEGIN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 365 "verilog_lexer.l"
{ return DEFATTR_END; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 367 "verilog_lexer.l"
{ return OP_POW; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 368 "verilog_lexer.l"
{ return OP_LOR; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 369 "verilog_lexer.l"
{ return OP_LAND; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 370 "verilog_lexer.l"
{ return OP_EQ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 371 "verilog_lexer.l"
{ return OP_NE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 372 "verilog_lexer.l"
{ return OP_LE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 373 "verilog_lexer.l"
{ return OP_GE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 375 "verilog_lexer.l"
{ return OP_EQX; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 376 "verilog_lexer.l"
{ return OP_NEX; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 378 "verilog_lexer.l"
{ return OP_NAND; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 379 "verilog_lexer.l"
{ return OP_NOR;  }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 380 "verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 381 "verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 383 "verilog_lexer.l"
{ return OP_SHL; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 384 "verilog_lexer.l"
{ return OP_SHR; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 385 "verilog_lexer.l"
{ return OP_SSHL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 386 "verilog_lexer.l"
{ return OP_SSHR; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 388 "verilog_lexer.l"
{ return TOK_PACKAGESEP; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 389 "verilog_lexer.l"
{ return TOK_INCREMENT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 390 "verilog_lexer.l"
{ return TOK_DECREMENT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 392 "verilog_lexer.l"
{ return TOK_POS_INDEXED; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 393 "verilog_lexer.l"
{ return TOK_NEG_INDEXED; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 395 "verilog_lexer.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 396 "verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 397 "verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 398 "verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 400 "verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 401 "verilog_lexer.l"
/* ignore continuation sequence */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 402 "verilog_lexer.l"
/* ignore one-line comments */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 404 "verilog_lexer.l"
{ return *frontend_verilog_yytext; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 406 "verilog_lexer.l"
ECHO;
	YY_BREAK
#line 2270 "../verilog_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(SYNOPSYS_TRANSLATE_OFF):
case YY_STATE_EOF(SYNOPSYS_FLAGS):
case YY_STATE_EOF(IMPORT_DPI):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed frontend_verilog_yyin at a new source and called
			 * frontend_verilog_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = frontend_verilog_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( frontend_verilog_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * frontend_verilog_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of frontend_verilog_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					frontend_verilog_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			frontend_verilog_yyrestart(frontend_verilog_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) frontend_verilog_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 734 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 734 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 733);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					frontend_verilog_yyrestart(frontend_verilog_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( frontend_verilog_yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve frontend_verilog_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    frontend_verilog_yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void frontend_verilog_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        frontend_verilog_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
	}

	frontend_verilog_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	frontend_verilog_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void frontend_verilog_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		frontend_verilog_yypop_buffer_state();
	 *		frontend_verilog_yypush_buffer_state(new_buffer);
     */
	frontend_verilog_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	frontend_verilog_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (frontend_verilog_yywrap()) processing, but the only time this flag
	 * is looked at is after frontend_verilog_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void frontend_verilog_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	frontend_verilog_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE frontend_verilog_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) frontend_verilog_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	frontend_verilog_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with frontend_verilog_yy_create_buffer()
 * 
 */
    void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		frontend_verilog_yyfree((void *) b->yy_ch_buf  );

	frontend_verilog_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a frontend_verilog_yyrestart() or at EOF.
 */
    static void frontend_verilog_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	frontend_verilog_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then frontend_verilog_yy_init_buffer was _probably_
     * called from frontend_verilog_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		frontend_verilog_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	frontend_verilog_yyensure_buffer_stack();

	/* This block is copied from frontend_verilog_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from frontend_verilog_yy_switch_to_buffer. */
	frontend_verilog_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void frontend_verilog_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		frontend_verilog_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void frontend_verilog_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	frontend_verilog_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       frontend_verilog_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char * yystr )
{
    
	return frontend_verilog_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) frontend_verilog_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = frontend_verilog_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in frontend_verilog_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		frontend_verilog_yytext[frontend_verilog_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = frontend_verilog_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		frontend_verilog_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int frontend_verilog_yyget_lineno  (void)
{
        
    return frontend_verilog_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *frontend_verilog_yyget_in  (void)
{
        return frontend_verilog_yyin;
}

/** Get the output stream.
 * 
 */
FILE *frontend_verilog_yyget_out  (void)
{
        return frontend_verilog_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t frontend_verilog_yyget_leng  (void)
{
        return frontend_verilog_yyleng;
}

/** Get the current token.
 * 
 */

char *frontend_verilog_yyget_text  (void)
{
        return frontend_verilog_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void frontend_verilog_yyset_lineno (int  line_number )
{
    
    frontend_verilog_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see frontend_verilog_yy_switch_to_buffer
 */
void frontend_verilog_yyset_in (FILE *  in_str )
{
        frontend_verilog_yyin = in_str ;
}

void frontend_verilog_yyset_out (FILE *  out_str )
{
        frontend_verilog_yyout = out_str ;
}

int frontend_verilog_yyget_debug  (void)
{
        return frontend_verilog_yy_flex_debug;
}

void frontend_verilog_yyset_debug (int  bdebug )
{
        frontend_verilog_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from frontend_verilog_yylex_destroy(), so don't allocate here.
     */

    /* We do not touch frontend_verilog_yylineno unless the option is enabled. */
    frontend_verilog_yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    frontend_verilog_yyin = stdin;
    frontend_verilog_yyout = stdout;
#else
    frontend_verilog_yyin = (FILE *) 0;
    frontend_verilog_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * frontend_verilog_yylex_init()
     */
    return 0;
}

/* frontend_verilog_yylex_destroy is for both reentrant and non-reentrant scanners. */
int frontend_verilog_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		frontend_verilog_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	frontend_verilog_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * frontend_verilog_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *frontend_verilog_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *frontend_verilog_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void frontend_verilog_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see frontend_verilog_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 406 "verilog_lexer.l"



// this is a hack to avoid the 'yyinput defined but not used' error msgs
void *frontend_verilog_avoid_input_warnings() {
	return (void*)&yyinput;
}


