
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer VL_create_buffer
#define yy_delete_buffer VL_delete_buffer
#define yy_flex_debug VL_flex_debug
#define yy_init_buffer VL_init_buffer
#define yy_flush_buffer VL_flush_buffer
#define yy_load_buffer_state VL_load_buffer_state
#define yy_switch_to_buffer VL_switch_to_buffer
#define yyin VLin
#define yyleng VLleng
#define yylex VLlex
#define yylineno VLlineno
#define yyout VLout
#define yyrestart VLrestart
#define yytext VLtext
#define yywrap VLwrap
#define yyalloc VLalloc
#define yyrealloc VLrealloc
#define yyfree VLfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE VLrestart(VLin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t VLleng;

extern FILE *VLin, *VLout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VLtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up VLtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via VLrestart()), so that the user can continue scanning by
	 * just pointing VLin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when VLtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t VLleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow VLwrap()'s to do buffer switches
 * instead of setting up a fresh VLin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void VLrestart (FILE *input_file  );
void VL_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE VL_create_buffer (FILE *file,int size  );
void VL_delete_buffer (YY_BUFFER_STATE b  );
void VL_flush_buffer (YY_BUFFER_STATE b  );
void VLpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void VLpop_buffer_state (void );

static void VLensure_buffer_stack (void );
static void VL_load_buffer_state (void );
static void VL_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER VL_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE VL_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE VL_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE VL_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *VLalloc (yy_size_t  );
void *VLrealloc (void *,yy_size_t  );
void VLfree (void *  );

#define yy_new_buffer VL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        VLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VL_create_buffer(VLin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        VLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VL_create_buffer(VLin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *VLin = (FILE *) 0, *VLout = (FILE *) 0;

typedef int yy_state_type;

extern int VLlineno;

int VLlineno = 1;

extern char *VLtext;
#define yytext_ptr VLtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up VLtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	VLleng = (yy_size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[484] =
    {   0,
      122,  122,  128,  128,  150,  150,  147,  147,  164,  161,
      162,  163,    3,  161,  162,  163,    4,  162,  163,   63,
      161,  162,  163,   64,  161,  162,  163,   63,  161,  162,
      163,  161,  162,  163,   63,  161,  162,  163,   63,  161,
      162,  163,  161,  162,  163,   63,  161,  162,  163,   63,
      161,  162,  163,   63,  161,  162,  163,   63,  161,  162,
      163,   63,  161,  162,  163,   63,  161,  162,  163,  114,
      161,  162,  163,   63,  161,  162,  163,   63,  161,  162,
      163,   63,  161,  162,  163,   63,  161,  162,  163,  105,
      161,  162,  163,  161,  162,  163,   63,  161,  162,  163,

      161,  162,  163,   63,  161,  162,  163,   63,  161,  162,
      163,    3,  161,  162,  163,    3,  161,  162,  163,   63,
      161,  162,  163,  161,  162,  163,   11,  162,  163,   12,
      162,  163,   11,  162,  163,  162,  163,    8,  162,  163,
        9,  162,  163,   69,  162,  163,   67,  162,  163,   68,
       69,  162,  163,   69,  162,  163,   63,  161,  162,  163,
       63,   94,  161,  162,  163,   63,   94,  161,  162,  163,
       94,  114,  161,  162,  163,   63,   94,  161,  162,  163,
       63,   94,  161,  162,  163,   86,  105,  161,  162,  163,
       89,  105,  161,  162,  163,   88,  105,  161,  162,  163,

       87,  105,  161,  162,  163,   92,  105,  161,  162,  163,
       93,  105,  161,  162,  163,   90,  105,  161,  162,  163,
       91,  105,  161,  162,  163,  122,  162,  163,  123,  162,
      163,  128,  162,  163,  129,  162,  163,  150,  162,  163,
      151,  162,  163,  147,  162,  163,  147,  162,  163,  114,
      161,  162,  163,  114,  161,  162,  163,   62,   63,  161,
      162,  163,  105,  161,  162,  163,  105,  161,  162,  163,
      118,  162,  163,   28,  107,   49,   34,   50,  113,   59,
       14,   15,   21,   47,   26,   57,   42,   45,   58,   43,
       46,   41,   16,   10,    7,   48,  114,  117,  117,  115,

       60,   44,   17,   22,   27,   24,   23,   19,  105,  106,
       52,   39,  160,   51,   33,   40,   38,   37,   13,   66,
       65,  122,  128,  150,  147,  147,  146,  147,   95,  114,
       96,   97,   98,  114,   99,  100,  101,  105,  102,  105,
      103,  105,  104,  105,   30,   32,   36,  110,  108,  109,
      112,  111,   61,   25,  119,  120,   35,   18,   53,   29,
       31,   54,   20,  146,  147,  146,  147,  146,  147,  110,
      108,  109,  112,  111,  119,  116,  116,  120,   55,   56,
       74,   79,   75,   80,   82,   81,   70,   71,   73,   72,
       83,   84,   85,   77,   78,   76,  119,  153,  119,  153,

      153,  154,  155,  156,  159,    1,    1,  152,  154,  154,
      155,  155,  156,  156,  157,    2,    2,  131,  159,  159,
      144,  142,  152,  152,  157,  157,  158,  131,  131,  144,
      144,  158,  158,  126,  126,  121,  140,  124,  124,  148,
      148,  148,  125,  145,  125,  149,  145,  135,  136,  137,
      143,  149,  135,  135,  136,  136,  137,  137,  143,  143,
      139,  141,  127,  132,  138,  139,  139,  141,  141,  132,
      132,  138,  138,  130,  130,  134,  133,  134,  134,    5,
      133,  133,    6
    } ;

static yyconst flex_int16_t yy_accept[658] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    8,
        9,    9,    9,    9,    9,   10,   13,   17,   20,   24,
       28,   32,   35,   39,   43,   46,   50,   54,   58,   62,
       66,   70,   74,   78,   82,   86,   90,   94,   97,  101,
      104,  108,  112,  116,  120,  124,  127,  130,  133,  136,
      138,  141,  144,  147,  150,  154,  157,  161,  166,  171,
      176,  181,  186,  191,  196,  201,  206,  211,  216,  221,
      226,  229,  232,  235,  238,  241,  244,  247,  250,  254,
      258,  263,  267,  271,  274,  275,  276,  277,  278,  279,

      280,  280,  280,  280,  280,  280,  281,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
      294,  295,  296,  297,  297,  298,  298,  299,  300,  301,
      302,  303,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  314,  314,  314,  315,  316,  317,
      318,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  320,  321,
      322,  322,  322,  322,  322,  322,  323,  324,  325,  326,
      327,  329,  331,  332,  333,  335,  336,  337,  339,  341,
      343,  345,  346,  347,  348,  348,  349,  349,  350,  351,

      351,  352,  352,  353,  353,  353,  354,  355,  355,  355,
      356,  356,  357,  358,  359,  360,  361,  362,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  366,  368,  370,  371,  372,  373,  374,  375,  375,
      376,  376,  377,  378,  379,  380,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  381,  381,  381,  381,  382,  383,  384,  385,
      386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
      396,  397,  397,  397,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  401,
      402,  403,  403,  403,  403,  404,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  407,  408,  408,  408,  408,  409,

      409,  409,  410,  411,  411,  411,  411,  412,  413,  414,
      415,  416,  416,  417,  418,  418,  418,  419,  419,  419,
      419,  419,  420,  421,  422,  422,  422,  422,  423,  423,
      423,  423,  423,  424,  425,  425,  425,  425,  425,  425,
      426,  427,  428,  428,  428,  429,  430,  430,  430,  430,
      430,  431,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  433,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  436,  436,
      437,  437,  437,  437,  438,  438,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  442,  443,  444,  444,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  446,
      446,  446,  446,  446,  446,  447,  448,  448,  448,  448,
      449,  450,  451,  451,  451,  451,  451,  452,  452,  452,
      453,  453,  453,  453,  454,  455,  456,  457,  458,  459,

      459,  459,  459,  459,  460,  461,  461,  461,  461,  461,
      461,  461,  462,  463,  463,  464,  464,  465,  465,  465,
      466,  467,  468,  469,  470,  470,  470,  471,  472,  472,
      472,  473,  474,  475,  475,  475,  475,  476,  476,  476,
      476,  476,  476,  477,  477,  477,  478,  479,  480,  480,
      480,  481,  482,  483,  483,  484,  484
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   32,   34,   35,   36,
       37,   38,   39,   39,   37,   40,   37,   41,   42,   43,
       39,   44,   45,   37,   39,   39,   39,   46,   39,   47,
       31,   48,   49,   50,   51,   52,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   39,   62,   63,   64,   65,
       66,   67,   39,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   31,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    2,    3,    4,    3,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    1,    1,    1,    1,    1,    7,
        1,    6,    6,    6,    6,    6,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    6,    1,    1,    1,
        8,    1,    6,    6,    6,    6,    6,    6,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    6,    5,    6,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[700] =
    {   0,
        0,   78,   78,   80,    0,    0, 1488, 1487,   81,   83,
      119,   94, 1486, 1485, 1484, 1483, 1482, 1481,   85,   87,
       90,   98,  130,  138, 1484, 1493, 1493, 1493, 1455, 1493,
     1493,    0, 1454,   87,  189,  102,   94,  100,  188, 1466,
       98,  248, 1455,  153,  107,  114,    0,    0,   82,  151,
      120,  174,  223,  227, 1416,  318, 1493, 1493, 1458, 1493,
     1493, 1493, 1493, 1493, 1493,  120,  322,  225,  219,    0,
     1452, 1493,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1493,    0, 1493,    0, 1493,    0,  396,  102,  183,
     1493,  168,  193, 1493,  191,    0, 1493, 1465, 1493, 1493,

      286,  387,  257,  409,  297, 1493,  271,  279, 1493, 1493,
     1493, 1493, 1493, 1493, 1446, 1493, 1493, 1445, 1493, 1493,
     1493,  285, 1493,  273,    0,  324, 1493, 1404, 1493, 1493,
     1493, 1443,  214, 1493,  250, 1493, 1493,  222,    0,    0,
     1493, 1493,  353, 1414, 1405, 1401, 1493, 1493, 1493, 1493,
     1493,  399,  411,  432, 1407, 1410, 1409,  207,  235,   56,
     1404, 1398, 1395, 1405, 1390, 1399,  249, 1493, 1493, 1493,
      304,  361,  483,  281,  397,    0,    0,    0,    0,  557,
      636,    0, 1493, 1493,    0, 1493, 1493,    0,    0,    0,
        0, 1493, 1493, 1493,  487,  493,  525,  343, 1408,  333,

        0,  570,  573,  435,  455, 1493, 1493,  533, 1383,  695,
      497,  503, 1493, 1429, 1493, 1493, 1493, 1493, 1428, 1397,
     1398, 1387,  323,  296, 1394, 1383,  385, 1385, 1390, 1385,
       75, 1378, 1377,  406,  350, 1390, 1379,  300,  146, 1374,
     1375, 1377,  273, 1383, 1425, 1424, 1423, 1422, 1421, 1420,
     1419, 1418, 1417, 1416, 1415, 1414, 1413, 1412, 1411, 1410,
        0,  766,    0,  629,  529, 1372,    0,  647, 1357,    0,
      605, 1493, 1352,  589, 1493, 1493, 1367, 1352, 1348,  175,
      438, 1364, 1361, 1358, 1353, 1350,  288, 1359, 1358,  449,
     1356,  628, 1352, 1352, 1344, 1349, 1334, 1339, 1344, 1345,

     1334, 1343, 1333, 1341, 1334, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1326,  609,  631, 1324, 1326, 1336,  352,  461,  390,
     1327, 1335, 1319, 1324, 1313, 1333,  540, 1328, 1322, 1322,
     1326, 1324, 1323, 1323, 1308,  493, 1311, 1322, 1312, 1305,
     1306, 1304, 1307, 1313, 1309, 1309,  650, 1305, 1301, 1311,
     1294,  563, 1313, 1306, 1299, 1304, 1309, 1296,    0,  576,
      655, 1301, 1300, 1293,  694,  704, 1297, 1298,  571, 1286,
     1286, 1294, 1297, 1292, 1293, 1282,  722, 1292, 1288, 1274,
     1273, 1272, 1278,    0,  687, 1278, 1281, 1268,  726, 1273,

     1279,    0,  731, 1284, 1259, 1270,    0,  735,    0,  739,
      753, 1275,    0,  697, 1263, 1265,  769, 1266, 1259, 1274,
     1269,    0,  773,  777, 1256, 1273, 1266, 1493, 1252, 1264,
     1259, 1268,    0,  782, 1252, 1266, 1249, 1238, 1247,    0,
      796,  800, 1238, 1222,    0,  804, 1216, 1202, 1200, 1200,
        0,  808, 1186, 1174, 1176, 1172, 1140, 1142,  500, 1143,
     1124, 1117, 1109, 1110,    0,  817, 1090, 1094,  821, 1092,
     1078, 1057, 1047, 1053, 1039,  372, 1030, 1038, 1030, 1011,
     1014,  997,  994,  993, 1000,  985,  927,  825,  912, 1493,
      909,  829,  888, 1493,  888,  833,  895,  885,  891,  870,

      864,  874,  865,  871,  848,  861,  854,  837,  836,  836,
      844,  847,  828,  694,  822,  830,  815,  815,  818,  815,
      797,  813,  792,  781,  796,  773,  784,  776,  780,  764,
      768,  763,  759,  848,  751,  751,  744,  727,  733,  735,
      716,  712,  726,  704,  685,  681,  688,  679,  692,  672,
        0,  852,  856,  668,  684,  656,  654,  655,  655,  860,
      641,  659,  638,  644,  621,  615,  607,  585,  864,  582,
      586,  572,  564,  553,  868,  872,  557,  546,  546,  876,
      880,  884,  541,  528,  527,  522,  888,  517,  499,  892,
      477,  467,  471,    0,  896,    0,  900,    0,  906,  461,

      442,  438,  423,    0,  910,  420,  417,  407,  385,  398,
      372,  914,  918,  364, 1493,  359,  922,  363,  329,  926,
        0,  930,    0,  934,  320,  313,    0,  938,  257,  239,
        0,  942,  946,  253,  233,  220,  950,  195,  186,  190,
       93,  160,  954,  112,  958,  962,    0,  966,  970,  974,
     1493,    0,  978,  982, 1493, 1493,  987,  995, 1003, 1011,
     1019, 1027, 1035, 1043, 1047, 1051, 1059, 1067, 1075, 1083,
     1091, 1099, 1105, 1112, 1115, 1123, 1131, 1139, 1147, 1155,
     1163, 1171, 1179, 1187, 1195, 1203, 1211, 1219, 1227, 1235,
     1243, 1251, 1259, 1267, 1275, 1283, 1291, 1299, 1307

    } ;

static yyconst flex_int16_t yy_def[700] =
    {   0,
      656,    1,  657,  657,  658,  658,  659,  659,  660,  660,
        1,   11,  661,  661,  662,  662,  663,  663,  664,  664,
        1,    1,  658,  658,  656,  656,  656,  656,  656,  656,
      656,  665,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  666,  667,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,   42,
      656,  656,  666,  666,  666,  666,  666,  666,  666,  666,
      668,  656,  669,  656,  670,  656,  671,  672,   42,   42,
      656,  666,  666,  656,  656,  665,  656,  656,  656,  656,

      656,  656,  673,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,   42,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  666,  667,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  668,  669,  670,  671,  672,
      674,   42,  656,  656,   42,  656,  656,  666,  666,  666,
      666,  656,  656,  656,  656,  656,  656,  656,  656,  673,

      675,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      676,  674,  262,  656,  656,  656,  675,  656,  656,  210,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  677,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  678,  656,  656,  656,  656,  656,  656,  677,  677,
      679,  656,  656,  656,  680,  681,  656,  656,  682,  656,
      656,  656,  656,  656,  656,  656,  683,  656,  656,  656,
      656,  656,  656,  678,  678,  656,  656,  656,  684,  656,

      656,  679,  679,  656,  656,  656,  680,  680,  681,  681,
      685,  656,  682,  682,  656,  656,  686,  656,  656,  656,
      656,  683,  683,  687,  656,  656,  656,  656,  656,  656,
      656,  656,  684,  684,  656,  656,  656,  656,  656,  685,
      685,  688,  656,  656,  686,  686,  656,  656,  656,  656,
      687,  687,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  688,  688,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  689,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      689,  689,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  690,
      691,  692,  656,  656,  656,  656,  693,  656,  656,  656,
      656,  656,  656,  690,  690,  691,  691,  692,  692,  656,

      656,  656,  656,  693,  693,  656,  656,  656,  656,  656,
      656,  694,  695,  656,  656,  656,  696,  656,  656,  697,
      694,  694,  695,  695,  656,  656,  696,  696,  656,  656,
      697,  697,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  698,  656,  656,  699,  698,  698,  656,  656,
      656,  699,  699,  656,  656,    0,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656

    } ;

static yyconst flex_int16_t yy_nxt[1573] =
    {   0,
       26,   27,   27,   28,   27,   29,   30,   31,   32,   33,
       34,   35,   36,   31,   37,   38,   31,   39,   40,   41,
       42,   42,   42,   42,   43,   31,   44,   45,   46,   31,
       31,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   48,   31,   49,
       47,   50,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   31,   51,   52,   53,
       54,   58,   54,   58,   64,   55,   64,   65,   60,   65,
       60,   88,   59,   88,   59,   53,   54,   98,   54,   53,

       54,   55,   54,  107,  107,   55,  107,  109,  110,  141,
       89,   90,  121,  235,   99,  113,  108,  122,   89,   90,
      236,  111,  112,  182,  114,  123,  169,  115,   66,   56,
       66,   67,  287,   68,  135,  136,   69,  288,   91,   70,
       70,  137,  138,   71,   72,   56,   91,  147,   72,   56,
      644,   73,  143,  143,   74,  143,   75,  645,   76,   77,
      142,   78,   79,   92,   80,   93,   94,  170,  131,  649,
      132,   92,   73,   93,   94,  183,   74,  184,   75,  133,
      134,   76,   94,   77,  149,   78,   79,   94,  188,  189,
       94,   94,   80,   94,   94,   94,   94,  148,  299,   94,

       94,   94,   94,  185,   94,  116,  144,  145,   94,  100,
      100,  279,  117,  190,  191,  118,  119,  146,  192,  646,
      193,  101,  102,  150,  152,  152,  103,  152,  152,  152,
      104,  152,  328,  105,  100,  100,  116,  288,  109,  110,
      214,  215,  101,  117,  102,  643,  118,  119,  103,  218,
      219,  151,  111,  112,  104,  642,  186,  105,  187,  200,
      641,  200,  100,  231,  100,  106,  124,  232,  125,  125,
      125,  125,  107,  107,  153,  107,  640,  216,  154,  217,
      205,  205,  126,  205,  127,  204,  208,  208,  195,  208,
      195,  639,  206,  210,  210,  210,  210,  233,  125,  234,

      127,  255,  256,  638,  126,  128,  196,  196,  636,  127,
      257,  128,  128,  243,  128,  196,  129,  244,  128,  143,
      143,  635,  143,  107,  107,  245,  107,  303,  304,  101,
      102,  196,  196,  246,  103,  200,  108,  200,  104,  211,
      333,  211,  171,  172,  212,  212,  212,  212,  334,  247,
      101,  173,  102,  209,  143,  143,  103,  143,  233,  196,
      281,  196,  104,  265,  265,  265,  265,  174,  297,  634,
      298,  156,  157,  158,  159,  175,  633,  247,  160,  280,
      161,  248,  162,  232,  163,  164,  165,  166,  167,  197,
      249,  197,  362,  265,  362,  174,  179,  179,  179,  630,

      152,  152,  181,  152,  361,  293,  250,  198,  198,  198,
      198,  202,  334,  202,  294,  179,  199,  258,  259,  629,
      179,  179,  179,  179,  179,  179,  179,  479,  626,  203,
      203,  203,  199,  199,  250,  625,  205,  205,  203,  205,
      620,  480,  260,  179,  179,  179,  179,  179,  206,  283,
      153,  619,  618,  244,  203,  203,  205,  205,  291,  205,
      199,  292,  199,  617,  156,  157,  223,  224,  206,  616,
      260,  225,  179,  179,  179,  162,  615,  226,  164,  165,
      166,  227,  203,  614,  203,  156,  157,  223,  224,  195,
      291,  195,  225,  329,  161,  379,  162,  379,  226,  164,

      165,  166,  227,  251,  252,  337,  613,  196,  196,  338,
      612,  340,  253,  264,  264,  341,  196,  212,  212,  212,
      212,  342,  264,  274,  274,  274,  274,  197,  254,  197,
      611,  610,  196,  196,  208,  208,  609,  208,  264,  264,
      608,  370,  370,  264,  370,  198,  198,  198,  198,  265,
      265,  265,  265,  274,  199,  479,  254,  179,  179,  179,
      196,  607,  196,  181,  474,  395,  264,  395,  264,  480,
      199,  199,  202,  414,  202,  414,  179,  370,  370,  265,
      370,  179,  179,  179,  179,  179,  179,  179,  606,  603,
      203,  203,  203,  268,  268,  268,  602,  601,  199,  203,

      199,  209,  268,  600,  179,  179,  179,  179,  179,  274,
      274,  274,  274,  593,  592,  203,  203,  591,  268,  268,
      323,  589,  323,  268,  588,  324,  324,  324,  324,  324,
      324,  324,  324,  179,  179,  179,  261,  261,  261,  274,
      587,  586,  263,  203,  585,  203,  268,  584,  268,  264,
      264,  357,  357,  357,  357,  261,  403,  403,  264,  403,
      261,  261,  261,  261,  261,  261,  261,  268,  268,  268,
      357,  357,  357,  357,  264,  264,  268,  583,  340,  264,
      582,  357,  341,  261,  261,  261,  261,  261,  342,  395,
      581,  395,  268,  268,  326,  408,  408,  268,  408,  414,

      357,  414,  264,  580,  264,  410,  410,  579,  410,  578,
      577,  575,  261,  261,  261,  270,  270,  270,  270,  574,
      268,  573,  268,  423,  423,  572,  423,  434,  434,  271,
      434,  272,  403,  403,  571,  403,  408,  408,  570,  408,
      410,  410,  568,  410,  567,  270,  566,  272,  565,  528,
      564,  271,  273,  563,  441,  441,  272,  441,  273,  273,
      529,  273,  562,  129,  530,  273,  261,  261,  261,  531,
      446,  446,  263,  446,  423,  423,  561,  423,  452,  452,
      560,  452,  559,  434,  434,  261,  434,  558,  557,  556,
      261,  261,  261,  261,  261,  261,  261,  441,  441,  555,

      441,  466,  466,  554,  466,  446,  446,  553,  446,  452,
      452,  550,  452,  261,  261,  261,  261,  261,  466,  466,
      549,  466,  488,  488,  548,  488,  488,  488,  547,  488,
      508,  508,  546,  508,  511,  511,  545,  511,  508,  508,
      544,  508,  261,  261,  261,  511,  511,  543,  511,  552,
      552,  542,  552,  552,  552,  541,  552,  569,  569,  540,
      569,  576,  576,  539,  576,  569,  569,  538,  569,  590,
      590,  537,  590,  576,  576,  536,  576,  595,  595,  535,
      595,  597,  597,  534,  597,  599,  599,  533,  599,  605,
      605,  532,  605,  590,  590,  527,  590,  595,  595,  526,

      595,  597,  597,  525,  597,  524,  523,  599,  599,  522,
      599,  605,  605,  521,  605,  622,  622,  520,  622,  624,
      624,  519,  624,  628,  628,  518,  628,  632,  632,  517,
      632,  622,  622,  516,  622,  624,  624,  515,  624,  628,
      628,  514,  628,  632,  632,  513,  632,  637,  637,  512,
      637,  637,  637,  510,  637,  648,  648,  509,  648,  650,
      650,  651,  650,  653,  653,  507,  653,  648,  648,  506,
      648,  654,  654,  655,  654,  650,  650,  651,  650,  653,
      653,  505,  653,  654,  654,  655,  654,   57,   57,   57,
       57,   57,   57,   57,   57,   60,   60,   60,   60,   60,

       60,   60,   60,   61,   61,   61,   61,   61,   61,   61,
       61,   63,   63,   63,   63,   63,   63,   63,   63,   81,
       81,   81,   81,   81,   81,   81,   81,   83,   83,   83,
       83,   83,   83,   83,   83,   85,   85,   85,   85,   85,
       85,   85,   85,   87,   87,   87,   87,   87,   87,   87,
       87,   96,   96,  504,   96,  139,  139,  503,  139,  140,
      502,  501,  500,  140,  140,  140,  140,  176,  176,  176,
      499,  176,  176,  176,  176,  177,  177,  177,  498,  177,
      177,  177,  177,  178,  178,  178,  497,  178,  178,  178,
      178,  179,  179,  179,  496,  179,  179,  179,  179,  180,

      180,  180,  495,  180,  180,  180,  180,  201,  494,  493,
      201,  201,  262,  262,  262,  492,  262,  262,  262,  262,
      267,  267,  267,  261,  261,  261,  491,  261,  261,  261,
      261,  369,  369,  369,  490,  369,  369,  369,  369,  394,
      394,  394,  489,  394,  394,  394,  394,  402,  402,  402,
      487,  402,  402,  402,  402,  407,  407,  407,  486,  407,
      407,  407,  407,  409,  409,  409,  485,  409,  409,  409,
      409,  413,  413,  413,  484,  413,  413,  413,  413,  422,
      422,  422,  483,  422,  422,  422,  422,  433,  433,  433,
      482,  433,  433,  433,  433,  440,  440,  440,  481,  440,

      440,  440,  440,  445,  445,  445,  478,  445,  445,  445,
      445,  451,  451,  451,  477,  451,  451,  451,  451,  465,
      465,  465,  476,  465,  465,  465,  465,  551,  551,  551,
      475,  551,  551,  551,  551,  594,  594,  594,  474,  594,
      594,  594,  594,  596,  596,  596,  473,  596,  596,  596,
      596,  598,  598,  598,  472,  598,  598,  598,  598,  604,
      604,  604,  471,  604,  604,  604,  604,  621,  621,  621,
      470,  621,  621,  621,  621,  623,  623,  623,  469,  623,
      623,  623,  623,  627,  627,  627,  468,  627,  627,  627,
      627,  631,  631,  631,  467,  631,  631,  631,  631,  647,

      647,  647,  464,  647,  647,  647,  647,  652,  652,  652,
      463,  652,  652,  652,  652,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  450,  449,  448,  447,  444,
      443,  442,  439,  438,  437,  436,  435,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  421,  420,  419,  418,
      417,  416,  415,  412,  411,  406,  405,  404,  401,  400,
      399,  398,  397,  396,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  378,  377,
      376,  375,  374,  373,  372,  371,  368,  367,  366,  365,
      364,  363,  360,  359,  358,  356,  355,  354,  353,  352,

      351,  350,  349,  348,  347,  346,  345,  344,  343,  339,
      336,  335,  332,  331,  330,  303,  299,  327,  326,  325,
      129,  322,  266,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      302,  301,  300,  296,  295,  290,  289,  286,  285,  284,
      282,  235,  279,  278,  277,  276,  275,  269,  266,  242,
      241,  240,  239,  238,  237,  230,  229,  228,  222,  221,
      220,  213,  129,  207,  207,  194,  130,  168,  155,  130,
      120,   97,   95,  656,   86,   86,   84,   84,   82,   82,
       62,   62,   25,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656
    } ;

static yyconst flex_int16_t yy_chk[1573] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    3,    2,    4,    9,    2,   10,    9,   19,   10,
       20,   19,    3,   20,    4,   12,   12,   34,   12,   22,

       22,   12,   22,   36,   36,   22,   36,   37,   37,   49,
       21,   21,   41,  160,   34,   38,   36,   41,   22,   22,
      160,   37,   37,   89,   38,   41,   66,   38,    9,    2,
       10,   11,  231,   11,   45,   45,   11,  231,   21,   11,
       11,   46,   46,   11,   11,   12,   22,   51,   11,   22,
      641,   11,   50,   50,   11,   50,   11,  641,   11,   11,
       49,   11,   11,   21,   11,   21,   23,   66,   44,  644,
       44,   22,   11,   22,   24,   89,   11,   89,   11,   44,
       44,   11,   23,   11,   52,   11,   11,   23,   92,   92,
       24,   23,   11,   23,   23,   24,   23,   51,  239,   24,

       23,   24,   24,   90,   24,   39,   50,   50,   24,   35,
       35,  239,   39,   93,   93,   39,   39,   50,   95,  642,
       95,   35,   35,   52,   53,   53,   35,   53,   54,   54,
       35,   54,  280,   35,   35,   35,   69,  280,   68,   68,
      133,  133,   35,   69,   35,  640,   69,   69,   35,  138,
      138,   52,   68,   68,   35,  639,   90,   35,   90,  103,
      638,  103,   35,  158,   35,   35,   42,  158,   42,   42,
       42,   42,  107,  107,   53,  107,  636,  135,   54,  135,
      108,  108,   42,  108,   42,  107,  122,  122,  101,  122,
      101,  635,  108,  124,  124,  124,  124,  159,   42,  159,

       42,  174,  174,  634,   42,   42,  101,  101,  630,   42,
      174,   42,   42,  167,   42,  101,   42,  167,   42,   56,
       56,  629,   56,   67,   67,  171,   67,  243,  243,  105,
      105,  101,  101,  171,  105,  200,   67,  200,  105,  126,
      287,  126,   67,   67,  126,  126,  126,  126,  287,  171,
      105,   67,  105,  122,  143,  143,  105,  143,  224,  101,
      224,  101,  105,  198,  198,  198,  198,   67,  238,  626,
      238,   56,   56,   56,   56,   67,  625,  171,   56,  223,
       56,  172,   56,  223,   56,   56,   56,   56,   56,  102,
      172,  102,  330,  198,  330,   67,   88,   88,   88,  619,

      152,  152,   88,  152,  328,  235,  172,  102,  102,  102,
      102,  104,  328,  104,  235,   88,  102,  175,  175,  618,
       88,   88,   88,   88,   88,   88,   88,  476,  616,  104,
      104,  104,  102,  102,  172,  614,  204,  204,  104,  204,
      611,  476,  175,   88,   88,   88,   88,   88,  204,  227,
      152,  610,  609,  227,  104,  104,  205,  205,  234,  205,
      102,  234,  102,  608,  153,  153,  153,  153,  205,  607,
      175,  153,   88,   88,   88,  153,  606,  153,  153,  153,
      153,  153,  104,  603,  104,  154,  154,  154,  154,  195,
      281,  195,  154,  281,  154,  346,  154,  346,  154,  154,

      154,  154,  154,  173,  173,  290,  602,  195,  195,  290,
      601,  329,  173,  196,  196,  329,  195,  211,  211,  211,
      211,  329,  196,  212,  212,  212,  212,  197,  173,  197,
      600,  593,  195,  195,  208,  208,  592,  208,  196,  196,
      591,  337,  337,  196,  337,  197,  197,  197,  197,  265,
      265,  265,  265,  212,  197,  459,  173,  180,  180,  180,
      195,  589,  195,  180,  459,  362,  196,  362,  196,  459,
      197,  197,  202,  379,  202,  379,  180,  370,  370,  265,
      370,  180,  180,  180,  180,  180,  180,  180,  588,  586,
      202,  202,  202,  203,  203,  203,  585,  584,  197,  202,

      197,  208,  203,  583,  180,  180,  180,  180,  180,  274,
      274,  274,  274,  579,  578,  202,  202,  577,  203,  203,
      271,  574,  271,  203,  573,  271,  271,  271,  271,  323,
      323,  323,  323,  180,  180,  180,  181,  181,  181,  274,
      572,  571,  181,  202,  570,  202,  203,  568,  203,  264,
      264,  324,  324,  324,  324,  181,  371,  371,  264,  371,
      181,  181,  181,  181,  181,  181,  181,  268,  268,  268,
      357,  357,  357,  357,  264,  264,  268,  567,  292,  264,
      566,  324,  292,  181,  181,  181,  181,  181,  292,  395,
      565,  395,  268,  268,  292,  375,  375,  268,  375,  414,

      357,  414,  264,  564,  264,  376,  376,  563,  376,  562,
      561,  559,  181,  181,  181,  210,  210,  210,  210,  558,
      268,  557,  268,  387,  387,  556,  387,  399,  399,  210,
      399,  210,  403,  403,  555,  403,  408,  408,  554,  408,
      410,  410,  550,  410,  549,  210,  548,  210,  547,  514,
      546,  210,  210,  545,  411,  411,  210,  411,  210,  210,
      514,  210,  544,  210,  514,  210,  262,  262,  262,  514,
      417,  417,  262,  417,  423,  423,  543,  423,  424,  424,
      542,  424,  541,  434,  434,  262,  434,  540,  539,  538,
      262,  262,  262,  262,  262,  262,  262,  441,  441,  537,

      441,  442,  442,  536,  442,  446,  446,  535,  446,  452,
      452,  533,  452,  262,  262,  262,  262,  262,  466,  466,
      532,  466,  469,  469,  531,  469,  488,  488,  530,  488,
      492,  492,  529,  492,  496,  496,  528,  496,  508,  508,
      527,  508,  262,  262,  262,  511,  511,  526,  511,  534,
      534,  525,  534,  552,  552,  524,  552,  553,  553,  523,
      553,  560,  560,  522,  560,  569,  569,  521,  569,  575,
      575,  520,  575,  576,  576,  519,  576,  580,  580,  518,
      580,  581,  581,  517,  581,  582,  582,  516,  582,  587,
      587,  515,  587,  590,  590,  513,  590,  595,  595,  512,

      595,  597,  597,  510,  597,  509,  508,  599,  599,  507,
      599,  605,  605,  506,  605,  612,  612,  505,  612,  613,
      613,  504,  613,  617,  617,  503,  617,  620,  620,  502,
      620,  622,  622,  501,  622,  624,  624,  500,  624,  628,
      628,  499,  628,  632,  632,  498,  632,  633,  633,  497,
      633,  637,  637,  495,  637,  643,  643,  493,  643,  645,
      645,  645,  645,  646,  646,  491,  646,  648,  648,  489,
      648,  649,  649,  649,  649,  650,  650,  650,  650,  653,
      653,  487,  653,  654,  654,  654,  654,  657,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,

      658,  658,  658,  659,  659,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,
      663,  663,  663,  664,  664,  664,  664,  664,  664,  664,
      664,  665,  665,  486,  665,  666,  666,  485,  666,  667,
      484,  483,  482,  667,  667,  667,  667,  668,  668,  668,
      481,  668,  668,  668,  668,  669,  669,  669,  480,  669,
      669,  669,  669,  670,  670,  670,  479,  670,  670,  670,
      670,  671,  671,  671,  478,  671,  671,  671,  671,  672,

      672,  672,  477,  672,  672,  672,  672,  673,  475,  474,
      673,  673,  674,  674,  674,  473,  674,  674,  674,  674,
      675,  675,  675,  676,  676,  676,  472,  676,  676,  676,
      676,  677,  677,  677,  471,  677,  677,  677,  677,  678,
      678,  678,  470,  678,  678,  678,  678,  679,  679,  679,
      468,  679,  679,  679,  679,  680,  680,  680,  467,  680,
      680,  680,  680,  681,  681,  681,  464,  681,  681,  681,
      681,  682,  682,  682,  463,  682,  682,  682,  682,  683,
      683,  683,  462,  683,  683,  683,  683,  684,  684,  684,
      461,  684,  684,  684,  684,  685,  685,  685,  460,  685,

      685,  685,  685,  686,  686,  686,  458,  686,  686,  686,
      686,  687,  687,  687,  457,  687,  687,  687,  687,  688,
      688,  688,  456,  688,  688,  688,  688,  689,  689,  689,
      455,  689,  689,  689,  689,  690,  690,  690,  454,  690,
      690,  690,  690,  691,  691,  691,  453,  691,  691,  691,
      691,  692,  692,  692,  450,  692,  692,  692,  692,  693,
      693,  693,  449,  693,  693,  693,  693,  694,  694,  694,
      448,  694,  694,  694,  694,  695,  695,  695,  447,  695,
      695,  695,  695,  696,  696,  696,  444,  696,  696,  696,
      696,  697,  697,  697,  443,  697,  697,  697,  697,  698,

      698,  698,  439,  698,  698,  698,  698,  699,  699,  699,
      438,  699,  699,  699,  699,  437,  436,  435,  432,  431,
      430,  429,  427,  426,  425,  421,  420,  419,  418,  416,
      415,  412,  406,  405,  404,  401,  400,  398,  397,  396,
      393,  392,  391,  390,  389,  388,  386,  385,  384,  383,
      382,  381,  380,  378,  377,  374,  373,  372,  368,  367,
      366,  365,  364,  363,  361,  360,  359,  358,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  345,  344,
      343,  342,  341,  340,  339,  338,  336,  335,  334,  333,
      332,  331,  327,  326,  325,  322,  305,  304,  303,  302,

      301,  300,  299,  298,  297,  296,  295,  294,  293,  291,
      289,  288,  286,  285,  284,  283,  282,  279,  278,  277,
      273,  269,  266,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      242,  241,  240,  237,  236,  233,  232,  230,  229,  228,
      226,  225,  222,  221,  220,  219,  214,  209,  199,  166,
      165,  164,  163,  162,  161,  157,  156,  155,  146,  145,
      144,  132,  128,  118,  115,   98,   71,   59,   55,   43,
       40,   33,   29,   25,   18,   17,   16,   15,   14,   13,
        8,    7,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656
    } ;

extern int VL_flex_debug;
int VL_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up VLtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *VLtext;
#line 1 "lexor.lex"
#line 6 "lexor.lex"
/*
 * Copyright (c) 1998-2020 Stephen Williams (steve@icarus.com)
 *
 *    This source code is free software; you can redistribute it
 *    and/or modify it in source code form under the terms of the GNU
 *    General Public License as published by the Free Software
 *    Foundation; either version 2 of the License, or (at your option)
 *    any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

# include "config.h"

      //# define YYSTYPE lexval

# include  <iostream>
# include  "compiler.h"
# include  "parse_misc.h"
# include  "parse_api.h"
# include  "parse.h"
# include  <cctype>
# include  <cstring>
# include  "lexor_keyword.h"
# include  "discipline.h"
# include  <list>

# define YY_USER_INIT reset_lexor();
# define yylval VLlval

# define YY_NO_INPUT

/*
 * Lexical location information is passed in the yylloc variable to th
 * parser. The file names, strings, are kept in a list so that I can
 * re-use them. The set_file_name function will return a pointer to
 * the name as it exists in the list (and delete the passed string.)
 * If the name is new, it will be added to the list.
 */
extern YYLTYPE yylloc;

char* yytext_string_filter(const char*str, size_t str_len)
{
      if (str == 0) return 0;
      char*buf = new char[str_len+1];
      for (size_t idx = 0 ; idx < str_len ; idx += 1) {
	    if (str[idx] == 0) {
		  VLerror(yylloc, "error: Found nil (\\000) in string literal, replacing with space (\\015) character.");
		  buf[idx] = ' ';
	    } else {
		  buf[idx] = str[idx];
	    }
      }
      buf[str_len] = 0;
      return buf;
}

char* strdupnew(char const *str)
{
       return str ? strcpy(new char [strlen(str)+1], str) : 0;
}

static const char* set_file_name(char*text)
{
      perm_string path = filename_strings.make(text);
      delete[]text;

	/* Check this file name with the list of library file
	   names. If there is a match, then turn on the
	   pform_library_flag. This is how the parser knows that
	   modules declared in this file are library modules. */
      pform_library_flag = library_file_map[path];
      return path;
}

void reset_lexor();
static void line_directive();
static void line_directive2();
static void reset_all();

verinum*make_unsized_binary(const char*txt);
verinum*make_undef_highz_dec(const char*txt);
verinum*make_unsized_dec(const char*txt);
verinum*make_unsized_octal(const char*txt);
verinum*make_unsized_hex(const char*txt);

static int dec_buf_div2(char *buf);

static void process_timescale(const char*txt);
static void process_ucdrive(const char*txt);

static list<int> keyword_mask_stack;

static int comment_enter;
static bool in_module = false;
static bool in_UDP = false;
bool in_celldefine = false;
UCDriveType uc_drive = UCD_NONE;

/*
 * The parser sometimes needs to indicate to the lexor that the next
 * identifier needs to be understood in the context of a package. The
 * parser feeds back that left context with calls to the
 * lex_in_package_scope.
 */
static PPackage* in_package_scope = 0;
void lex_in_package_scope(PPackage*pkg)
{
      in_package_scope = pkg;
}












#line 1237 "<stdout>"

#define INITIAL 0
#define CCOMMENT 1
#define PCOMMENT 2
#define LCOMMENT 3
#define CSTRING 4
#define UDPTABLE 5
#define PPTIMESCALE 6
#define PPUCDRIVE 7
#define PPDEFAULT_NETTYPE 8
#define PPBEGIN_KEYWORDS 9
#define EDGES 10
#define REAL_SCALE 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int VLlex_destroy (void );

int VLget_debug (void );

void VLset_debug (int debug_flag  );

YY_EXTRA_TYPE VLget_extra (void );

void VLset_extra (YY_EXTRA_TYPE user_defined  );

FILE *VLget_in (void );

void VLset_in  (FILE * in_str  );

FILE *VLget_out (void );

void VLset_out  (FILE * out_str  );

yy_size_t VLget_leng (void );

char *VLget_text (void );

int VLget_lineno (void );

void VLset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int VLwrap (void );
#else
extern int VLwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( VLtext, VLleng, 1, VLout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( VLin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( VLin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, VLin))==0 && ferror(VLin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(VLin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int VLlex (void);

#define YY_DECL int VLlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after VLtext and VLleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( VLleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(VLtext[VLleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 144 "lexor.lex"


  /* Recognize the various line directives. */
#line 1435 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)VLalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in VLlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! VLin )
			VLin = stdin;

		if ( ! VLout )
			VLout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			VLensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				VL_create_buffer(VLin,YY_BUF_SIZE );
		}

		VL_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of VLtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 657 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 656 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 147 "lexor.lex"
{ line_directive(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 148 "lexor.lex"
{ line_directive2(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 150 "lexor.lex"
{ ; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 151 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
/* C++ style comments start with / / and run to the end of the
     current line. These are very easy to handle. The meta-comments
     format is a little more tricky to handle, but do what we can. */
/* The lexor detects "// synthesis translate_on/off" meta-comments,
     we handle them here by turning on/off a flag. The pform uses
     that flag to attach implicit attributes to "initial" and
     "always" statements. */
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 162 "lexor.lex"
{ pform_mc_translate_on(true); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 163 "lexor.lex"
{ pform_mc_translate_on(false); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 164 "lexor.lex"
{ comment_enter = YY_START; BEGIN(LCOMMENT); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 165 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 166 "lexor.lex"
{ yylloc.first_line += 1; BEGIN(comment_enter); }
	YY_BREAK
/* The contents of C-style comments are ignored, like white space. */
case 10:
YY_RULE_SETUP
#line 171 "lexor.lex"
{ comment_enter = YY_START; BEGIN(CCOMMENT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 172 "lexor.lex"
{ ; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 173 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 174 "lexor.lex"
{ BEGIN(comment_enter); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 177 "lexor.lex"
{ return K_PSTAR; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 178 "lexor.lex"
{ return K_STARP; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 179 "lexor.lex"
{ return K_DOTSTAR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 180 "lexor.lex"
{ return K_LS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 181 "lexor.lex"
{ return K_LS; /* Note: Functionally, <<< is the same as <<. */}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 182 "lexor.lex"
{ return K_RS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 183 "lexor.lex"
{ return K_RSS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 184 "lexor.lex"
{ return K_POW; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 185 "lexor.lex"
{ return K_LE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 186 "lexor.lex"
{ return K_GE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 187 "lexor.lex"
{ return K_EG; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 188 "lexor.lex"
{
			/*
			 * Resolve the ambiguity between the += assignment
			 * operator and +=> polarity edge path operator
			 *
			 * +=> should be treated as two separate tokens '+' and
			 * '=>' (K_EG), therefore we only consume the first
			 * character of the matched pattern i.e. either + or -
			 * and push back the rest of the matches text (=>) in
			 * the input stream.
			 */
			yyless(1);
			return VLtext[0];
		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 202 "lexor.lex"
{ return K_SG; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "lexor.lex"
{ return K_EQ; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "lexor.lex"
{ return K_NE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 205 "lexor.lex"
{ return K_CEQ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 206 "lexor.lex"
{ return K_CNE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 207 "lexor.lex"
{ return K_WEQ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 208 "lexor.lex"
{ return K_WNE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 209 "lexor.lex"
{ return K_LOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 210 "lexor.lex"
{ return K_LAND; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 211 "lexor.lex"
{ return K_LEQUIV; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 212 "lexor.lex"
{ return K_TAND; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 213 "lexor.lex"
{ return K_NOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 214 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 215 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 216 "lexor.lex"
{ return K_NAND; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 217 "lexor.lex"
{ return K_TRIGGER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 218 "lexor.lex"
{ return K_PO_POS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 219 "lexor.lex"
{ return K_PO_NEG; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 220 "lexor.lex"
{ return K_CONTRIBUTE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 221 "lexor.lex"
{ return K_PLUS_EQ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 222 "lexor.lex"
{ return K_MINUS_EQ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 223 "lexor.lex"
{ return K_MUL_EQ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 224 "lexor.lex"
{ return K_DIV_EQ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 225 "lexor.lex"
{ return K_MOD_EQ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 226 "lexor.lex"
{ return K_AND_EQ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 227 "lexor.lex"
{ return K_OR_EQ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 228 "lexor.lex"
{ return K_XOR_EQ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 229 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 230 "lexor.lex"
{ return K_RS_EQ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 231 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 232 "lexor.lex"
{ return K_RSS_EQ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 233 "lexor.lex"
{ return K_INCR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 234 "lexor.lex"
{return K_DECR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 235 "lexor.lex"
{ return K_LP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 236 "lexor.lex"
{ return K_SCOPE_RES; }
	YY_BREAK
/* Watch out for the tricky case of (*). Cannot parse this as "(*"
     and ")", but since I know that this is really ( * ), replace it
     with "*" and return that. */
case 61:
YY_RULE_SETUP
#line 241 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 243 "lexor.lex"
{ BEGIN(0); return VLtext[0]; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 244 "lexor.lex"
{ return VLtext[0]; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 246 "lexor.lex"
{ BEGIN(CSTRING); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 247 "lexor.lex"
{ yymore(); /* Catch \\, which is a \ escaping itself */ }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "lexor.lex"
{ yymore(); /* Catch \", which is an escaped quote */ }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 249 "lexor.lex"
{ BEGIN(0);
                yylval.text = yytext_string_filter(VLtext, VLleng);
		VLerror(yylloc, "Missing close quote of string.");
		yylloc.first_line += 1;
		return STRING; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 254 "lexor.lex"
{ BEGIN(0);
      yylval.text = yytext_string_filter(VLtext, VLleng);
		yylval.text[strlen(VLtext)-1] = 0;
		return STRING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 258 "lexor.lex"
{ yymore(); }
	YY_BREAK
/* The UDP Table is a unique lexical environment. These are most
     tokens that we can expect in a table. */
case 70:
YY_RULE_SETUP
#line 262 "lexor.lex"
{ return '_'; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "lexor.lex"
{ return '+'; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 264 "lexor.lex"
{ return '%'; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 265 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 266 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 267 "lexor.lex"
{ return 'Q'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 268 "lexor.lex"
{ return 'q'; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 269 "lexor.lex"
{ return 'f'; /* b0 is 10|00, but only 10 is meaningful */}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 270 "lexor.lex"
{ return 'r'; /* b1 is 11|01, but only 01 is meaningful */}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 271 "lexor.lex"
{ return 'P'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 272 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 273 "lexor.lex"
{ return 'M'; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 274 "lexor.lex"
{ return 'N'; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 275 "lexor.lex"
{ return 'F'; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 276 "lexor.lex"
{ return 'R'; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 277 "lexor.lex"
{ return 'B'; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 278 "lexor.lex"
{ return 'b'; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 279 "lexor.lex"
{ return 'l'; /* IVL extension */ }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 280 "lexor.lex"
{ return 'h'; /* IVL extension */ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 281 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 282 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 283 "lexor.lex"
{ return 'x'; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 284 "lexor.lex"
{ return 'n'; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 285 "lexor.lex"
{ return 'p'; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 286 "lexor.lex"
{ return VLtext[0]; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 288 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 289 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 290 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 291 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 292 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 293 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 294 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 295 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 296 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 297 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 299 "lexor.lex"
{
      int rc = lexor_keyword_code(VLtext, VLleng);
      switch (rc) {
	  case IDENTIFIER:
	    yylval.text = strdupnew(VLtext);
	    if (strncmp(yylval.text,"PATHPULSE$", 10) == 0)
		  rc = PATHPULSE_IDENTIFIER;
	    break;

	  case K_edge:
	    BEGIN(EDGES);
	    break;

	  case K_module:
	  case K_macromodule:
	    in_module = true;
	    break;

	  case K_endmodule:
	    in_module = false;
	    break;

	  case K_primitive:
	    in_UDP = true;
	    break;

	  case K_endprimitive:
	    in_UDP = false;
	    break;

	  case K_table:
	    BEGIN(UDPTABLE);
	    break;

	  default:
	    yylval.text = 0;
	    break;
      }

	/* Special case: If this is part of a scoped name, then check
	   the package for identifier details. For example, if the
	   source file is  foo::bar, the parse.y will note the
	   PACKAGE_IDENTIFIER and "::" token and mark the
	   "in_package_scope" variable. Then this lexor will see the
	   identifier here and interpret it in the package scope. */
      if (in_package_scope) {
	    if (rc == IDENTIFIER) {
		  if (data_type_t*type = pform_test_type_identifier(in_package_scope, yylval.text)) {
			yylval.type_identifier.text = yylval.text;
			yylval.type_identifier.type = type;
			rc = TYPE_IDENTIFIER;
		  }
	    }
	    in_package_scope = 0;
	    return rc;
      }

	/* If this identifier names a discipline, then return this as
	   a DISCIPLINE_IDENTIFIER and return the discipline as the
	   value instead. */
      if (rc == IDENTIFIER && gn_verilog_ams_flag) {
	    perm_string tmp = lex_strings.make(yylval.text);
	    map<perm_string,ivl_discipline_t>::iterator cur = disciplines.find(tmp);
	    if (cur != disciplines.end()) {
		  delete[]yylval.text;
		  yylval.discipline = (*cur).second;
		  rc = DISCIPLINE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared package, then
	   return this as a PACKAGE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  rc = PACKAGE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared type, then
	   return this as a TYPE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (data_type_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  rc = TYPE_IDENTIFIER;
	    }
      }

      return rc;
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 393 "lexor.lex"
{
      yylval.text = strdupnew(VLtext+1);
      if (gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  return PACKAGE_IDENTIFIER;
	    }
      }
      if (gn_system_verilog()) {
	    if (data_type_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  return TYPE_IDENTIFIER;
	    }
      }
      return IDENTIFIER;
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 412 "lexor.lex"
{
	/* The 1364-1995 timing checks. */
      if (strcmp(VLtext,"$hold") == 0)
	    return K_Shold;
      if (strcmp(VLtext,"$nochange") == 0)
	    return K_Snochange;
      if (strcmp(VLtext,"$period") == 0)
	    return K_Speriod;
      if (strcmp(VLtext,"$recovery") == 0)
	    return K_Srecovery;
      if (strcmp(VLtext,"$setup") == 0)
	    return K_Ssetup;
      if (strcmp(VLtext,"$setuphold") == 0)
	    return K_Ssetuphold;
      if (strcmp(VLtext,"$skew") == 0)
	    return K_Sskew;
      if (strcmp(VLtext,"$width") == 0)
	    return K_Swidth;
	/* The new 1364-2001 timing checks. */
      if (strcmp(VLtext,"$fullskew") == 0)
	    return K_Sfullskew;
      if (strcmp(VLtext,"$recrem") == 0)
	    return K_Srecrem;
      if (strcmp(VLtext,"$removal") == 0)
	    return K_Sremoval;
      if (strcmp(VLtext,"$timeskew") == 0)
	    return K_Stimeskew;

      if (strcmp(VLtext,"$attribute") == 0)
	    return KK_attribute;

      if (gn_system_verilog() && strcmp(VLtext,"$unit") == 0) {
	    yylval.package = pform_units.back();
	    return PACKAGE_IDENTIFIER;
      }

      yylval.text = strdupnew(VLtext);
      return SYSTEM_IDENTIFIER; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 452 "lexor.lex"
{
      yylval.number = make_unsized_dec(VLtext);
      return BASED_NUMBER;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 456 "lexor.lex"
{
      yylval.number = make_undef_highz_dec(VLtext);
      return BASED_NUMBER;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 460 "lexor.lex"
{
      yylval.number = make_unsized_binary(VLtext);
      return BASED_NUMBER;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 464 "lexor.lex"
{
      yylval.number = make_unsized_octal(VLtext);
      return BASED_NUMBER;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 468 "lexor.lex"
{
      yylval.number = make_unsized_hex(VLtext);
      return BASED_NUMBER;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 472 "lexor.lex"
{
      if (!gn_system_verilog()) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": warning: "
		 << "Using SystemVerilog 'N bit vector.  Use at least "
		 << "-g2005-sv to remove this warning." << endl;
      }
      generation_t generation_save = generation_flag;
      generation_flag = GN_VER2005_SV;
      yylval.number = make_unsized_binary(VLtext);
      generation_flag = generation_save;
      return UNBASED_NUMBER; }
	YY_BREAK
/* Decimal numbers are the usual. But watch out for the UDPTABLE
     mode, where there are no decimal numbers. Reject the match if we
     are in the UDPTABLE state. */
case 114:
YY_RULE_SETUP
#line 487 "lexor.lex"
{
      if (YY_START==UDPTABLE) {
	    REJECT;
      } else {
	    yylval.number = make_unsized_dec(VLtext);
	    based_size = yylval.number->as_ulong();
	    return DEC_NUMBER;
      }
}
	YY_BREAK
/* This rule handles scaled time values for SystemVerilog. */
case 115:
YY_RULE_SETUP
#line 498 "lexor.lex"
{
      if (gn_system_verilog()) {
	    yylval.text = strdupnew(VLtext);
	    return TIME_LITERAL;
      } else REJECT; }
	YY_BREAK
/* These rules handle the scaled real literals from Verilog-AMS. The
     value is a number with a single letter scale factor. If
     verilog-ams is not enabled, then reject this rule. If it is
     enabled, then collect the scale and use it to scale the value. */
case 116:
*yy_cp = (yy_hold_char); /* undo effects of setting up VLtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up VLtext again */
YY_RULE_SETUP
#line 508 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 117:
*yy_cp = (yy_hold_char); /* undo effects of setting up VLtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up VLtext again */
YY_RULE_SETUP
#line 513 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 518 "lexor.lex"
{
      size_t token_len = strlen(VLtext);
      char*tmp = new char[token_len + 5];
      int scale = 0;
      strcpy(tmp, VLtext);
      switch (tmp[token_len-1]) {
	  case 'a': scale = -18; break; /* atto- */
	  case 'f': scale = -15; break; /* femto- */
	  case 'p': scale = -12; break; /* pico- */
	  case 'n': scale = -9;  break; /* nano- */
	  case 'u': scale = -6;  break; /* micro- */
	  case 'm': scale = -3;  break; /* milli- */
	  case 'k': scale = 3;  break; /* kilo- */
	  case 'K': scale = 3;  break; /* kilo- */
	  case 'M': scale = 6;  break; /* mega- */
	  case 'G': scale = 9;  break; /* giga- */
	  case 'T': scale = 12; break; /* tera- */
	  default: assert(0); break;
      }
      snprintf(tmp+token_len-1, 5, "e%d", scale);
      yylval.realtime = new verireal(tmp);
      delete[]tmp;

      BEGIN(0);
      return REALTIME;  }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 544 "lexor.lex"
{
      yylval.realtime = new verireal(VLtext);
      return REALTIME; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 548 "lexor.lex"
{
      yylval.realtime = new verireal(VLtext);
      return REALTIME; }
	YY_BREAK
/* Notice and handle the `timescale directive. */
case 121:
YY_RULE_SETUP
#line 555 "lexor.lex"
{ BEGIN(PPTIMESCALE); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 556 "lexor.lex"
{ process_timescale(VLtext); }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 557 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`timescale directive can not be inside a module "
		    "definition." << endl;
	    error_count += 1;
      }
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
/* Notice and handle the `celldefine and `endcelldefine directives. */
case 124:
YY_RULE_SETUP
#line 569 "lexor.lex"
{ in_celldefine = true; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 570 "lexor.lex"
{ in_celldefine = false; }
	YY_BREAK
/* Notice and handle the resetall directive. */
case 126:
YY_RULE_SETUP
#line 574 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`resetall directive can not be inside a module "
		    "definition." << endl;
	    error_count += 1;
      } else if (in_UDP) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`resetall directive can not be inside a UDP "
		    "definition." << endl;
	    error_count += 1;
      } else {
	    reset_all();
      } }
	YY_BREAK
/* Notice and handle the `unconnected_drive directive. */
case 127:
YY_RULE_SETUP
#line 590 "lexor.lex"
{ BEGIN(PPUCDRIVE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 591 "lexor.lex"
{ process_ucdrive(VLtext); }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 592 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`unconnected_drive directive can not be inside a "
		    "module definition." << endl;
	    error_count += 1;
      }
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 602 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`nounconnected_drive directive can not be inside a "
		    "module definition." << endl;
	    error_count += 1;
      }
      uc_drive = UCD_NONE; }
	YY_BREAK
/* These are directives that I do not yet support. I think that IVL
     should handle these, not an external preprocessor. */
/* From 1364-2005 Chapter 19. */
case 131:
YY_RULE_SETUP
#line 614 "lexor.lex"
{  }
	YY_BREAK
/* From 1364-2005 Annex D. */
case 132:
YY_RULE_SETUP
#line 617 "lexor.lex"
{  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 618 "lexor.lex"
{  }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 619 "lexor.lex"
{  }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 620 "lexor.lex"
{  }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 621 "lexor.lex"
{  }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 622 "lexor.lex"
{  }
	YY_BREAK
/* From other places. */
case 138:
YY_RULE_SETUP
#line 625 "lexor.lex"
{  }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 626 "lexor.lex"
{  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 627 "lexor.lex"
{  }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 628 "lexor.lex"
{  }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 629 "lexor.lex"
{  }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 630 "lexor.lex"
{  }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 631 "lexor.lex"
{  }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 633 "lexor.lex"
{ BEGIN(PPBEGIN_KEYWORDS); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 635 "lexor.lex"
{
      keyword_mask_stack.push_front(lexor_keyword_mask);

      char*word = VLtext+1;
      char*tail = strchr(word, '"');
      tail[0] = 0;
      if (strcmp(word,"1364-1995") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995;
      } else if (strcmp(word,"1364-2001") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG;
      } else if (strcmp(word,"1364-2001-noconfig") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001;
      } else if (strcmp(word,"1364-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005;
      } else if (strcmp(word,"1800-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005;
      } else if (strcmp(word,"1800-2009") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009;
      } else if (strcmp(word,"1800-2012") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009
		                |GN_KEYWORDS_1800_2012;
      } else if (strcmp(word,"VAMS-2.3") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_VAMS_2_3;
      } else {
	    fprintf(stderr, "%s:%d: Ignoring unknown keywords string: %s\n",
		    yylloc.text, yylloc.first_line, word);
      }
      BEGIN(0);
 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 689 "lexor.lex"
{
      fprintf(stderr, "%s:%d: Malformed keywords specification: %s\n",
	      yylloc.text, yylloc.first_line, VLtext);
      BEGIN(0);
 }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 695 "lexor.lex"
{
      if (!keyword_mask_stack.empty()) {
	    lexor_keyword_mask = keyword_mask_stack.front();
	    keyword_mask_stack.pop_front();
      } else {
	    fprintf(stderr, "%s:%d: Mismatched end_keywords directive\n",
		    yylloc.text, yylloc.first_line);
      }
 }
	YY_BREAK
/* Notice and handle the default_nettype directive. The lexor
     detects the default_nettype keyword, and the second part of the
     rule collects the rest of the line and processes it. We only need
     to look for the first work, and interpret it. */
case 149:
YY_RULE_SETUP
#line 710 "lexor.lex"
{ BEGIN(PPDEFAULT_NETTYPE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 711 "lexor.lex"
{
      NetNet::Type net_type;
      size_t wordlen = strcspn(VLtext, " \t\f\r\n");
      VLtext[wordlen] = 0;
  /* Add support for other wire types and better error detection. */
      if (strcmp(VLtext,"wire") == 0) {
	    net_type = NetNet::WIRE;

      } else if (strcmp(VLtext,"tri") == 0) {
	    net_type = NetNet::TRI;

      } else if (strcmp(VLtext,"tri0") == 0) {
	    net_type = NetNet::TRI0;

      } else if (strcmp(VLtext,"tri1") == 0) {
	    net_type = NetNet::TRI1;

      } else if (strcmp(VLtext,"wand") == 0) {
	    net_type = NetNet::WAND;

      } else if (strcmp(VLtext,"triand") == 0) {
	    net_type = NetNet::TRIAND;

      } else if (strcmp(VLtext,"wor") == 0) {
	    net_type = NetNet::WOR;

      } else if (strcmp(VLtext,"trior") == 0) {
	    net_type = NetNet::TRIOR;

      } else if (strcmp(VLtext,"none") == 0) {
	    net_type = NetNet::NONE;

      } else {
	    cerr << yylloc.text << ":" << yylloc.first_line
		 << ": error: Net type " << VLtext
		 << " is not a valid (or supported)"
		 << " default net type." << endl;
	    net_type = NetNet::WIRE;
	    error_count += 1;
      }
      pform_set_default_nettype(net_type, yylloc.text, yylloc.first_line);
  }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 753 "lexor.lex"
{
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
/* These are directives that are not supported by me and should have
     been handled by an external preprocessor such as ivlpp. */
case 152:
YY_RULE_SETUP
#line 761 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `define not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 767 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `else not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 773 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `elsif not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 779 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `endif not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 785 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `ifdef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 791 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `ifndef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 797 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `include not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 803 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `undef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 810 "lexor.lex"
{ cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
	    << "Stray tic (`) here. Perhaps you put white space" << endl;
       cerr << yylloc.text << ":" << yylloc.first_line << ":      : "
	    << "between the tic and preprocessor directive?"
	    << endl;
       error_count += 1; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 817 "lexor.lex"
{ return VLtext[0]; }
	YY_BREAK
/* Final catchall. something got lost or mishandled. */
/* XXX Should we tell the user something about the lexical state? */
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 822 "lexor.lex"
{   cerr << yylloc.text << ":" << yylloc.first_line
	   << ": error: unmatched character (";
      if (isprint(VLtext[0]))
	    cerr << VLtext[0];
      else
	    cerr << "hex " << hex << ((unsigned char) VLtext[0]);

      cerr << ")" << endl;
      error_count += 1; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 832 "lexor.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2828 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CCOMMENT):
			case YY_STATE_EOF(PCOMMENT):
			case YY_STATE_EOF(LCOMMENT):
			case YY_STATE_EOF(CSTRING):
			case YY_STATE_EOF(UDPTABLE):
			case YY_STATE_EOF(PPTIMESCALE):
			case YY_STATE_EOF(PPUCDRIVE):
			case YY_STATE_EOF(PPDEFAULT_NETTYPE):
			case YY_STATE_EOF(PPBEGIN_KEYWORDS):
			case YY_STATE_EOF(EDGES):
			case YY_STATE_EOF(REAL_SCALE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed VLin at a new source and called
			 * VLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = VLin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( VLwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * VLtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of VLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			VLrestart(VLin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) VLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 657 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 657 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 656);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					VLrestart(VLin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( VLwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve VLtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void VLrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        VLensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            VL_create_buffer(VLin,YY_BUF_SIZE );
	}

	VL_init_buffer(YY_CURRENT_BUFFER,input_file );
	VL_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void VL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		VLpop_buffer_state();
	 *		VLpush_buffer_state(new_buffer);
     */
	VLensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	VL_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (VLwrap()) processing, but the only time this flag
	 * is looked at is after VLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void VL_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	VLin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE VL_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) VLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) VLalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in VL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	VL_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with VL_create_buffer()
 * 
 */
    void VL_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		VLfree((void *) b->yy_ch_buf  );

	VLfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a VLrestart() or at EOF.
 */
    static void VL_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	VL_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then VL_init_buffer was _probably_
     * called from VLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void VL_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		VL_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void VLpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	VLensure_buffer_stack();

	/* This block is copied from VL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from VL_switch_to_buffer. */
	VL_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void VLpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	VL_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		VL_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void VLensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)VLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VLensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)VLrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE VL_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) VLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	VL_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to VLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       VL_scan_bytes() instead.
 */
YY_BUFFER_STATE VL_scan_string (yyconst char * yystr )
{
    
	return VL_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to VLlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE VL_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) VLalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in VL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = VL_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in VL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VLtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		VLtext[VLleng] = (yy_hold_char); \
		(yy_c_buf_p) = VLtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		VLleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int VLget_lineno  (void)
{
        
    return VLlineno;
}

/** Get the input stream.
 * 
 */
FILE *VLget_in  (void)
{
        return VLin;
}

/** Get the output stream.
 * 
 */
FILE *VLget_out  (void)
{
        return VLout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t VLget_leng  (void)
{
        return VLleng;
}

/** Get the current token.
 * 
 */

char *VLget_text  (void)
{
        return VLtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void VLset_lineno (int  line_number )
{
    
    VLlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see VL_switch_to_buffer
 */
void VLset_in (FILE *  in_str )
{
        VLin = in_str ;
}

void VLset_out (FILE *  out_str )
{
        VLout = out_str ;
}

int VLget_debug  (void)
{
        return VL_flex_debug;
}

void VLset_debug (int  bdebug )
{
        VL_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from VLlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    VLin = stdin;
    VLout = stdout;
#else
    VLin = (FILE *) 0;
    VLout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * VLlex_init()
     */
    return 0;
}

/* VLlex_destroy is for both reentrant and non-reentrant scanners. */
int VLlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		VL_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		VLpop_buffer_state();
	}

	/* Destroy the stack itself. */
	VLfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    VLfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * VLlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *VLalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *VLrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void VLfree (void * ptr )
{
	free( (char *) ptr );	/* see VLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 832 "lexor.lex"



/*
 * The UDP state table needs some slightly different treatment by the
 * lexor. The level characters are normally accepted as other things,
 * so the parser needs to switch my mode when it believes in needs to.
 */
void lex_end_table()
{
      BEGIN(INITIAL);
}

static unsigned truncate_to_integer_width(verinum::V*bits, unsigned size)
{
      if (size <= integer_width) return size;

      verinum::V pad = bits[size-1];
      if (pad == verinum::V1) pad = verinum::V0;

      for (unsigned idx = integer_width; idx < size; idx += 1) {
	    if (bits[idx] != pad) {
		  yywarn(yylloc, "Unsized numeric constant truncated to integer width.");
		  break;
	    }
      }
      return integer_width;
}

verinum*make_unsized_binary(const char*txt)
{
      bool sign_flag = false;
      bool single_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert((tolower(*ptr) == 'b') || gn_system_verilog());
      if (tolower(*ptr) == 'b') {
	    ptr += 1;
      } else {
	    assert(sign_flag == false);
	    single_flag = true;
      }

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 1;

      if (size == 0) {
	    VLerror(yylloc, "Numeric literal has no digits in it.");
	    verinum*out = new verinum();
	    out->has_sign(sign_flag);
	    out->is_single(single_flag);
	    return out;
      }

      if ((based_size > 0) && (size > based_size)) yywarn(yylloc,
          "extra digits given for sized binary constant.");

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    switch (ptr[0]) {
		case '0':
		  bits[--idx] = verinum::V0;
		  break;
		case '1':
		  bits[--idx] = verinum::V1;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  break;
		  case '_':
		  break;
		default:
		  fprintf(stderr, "%c\n", ptr[0]);
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      out->is_single(single_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_octal(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert(tolower(*ptr) == 'o');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 3;

      if (based_size > 0) {
            int rem = based_size % 3;
	    if (rem != 0) based_size += 3 - rem;
	    if (size > based_size) yywarn(yylloc,
	        "extra digits given for sized octal constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3':
		case '4': case '5': case '6': case '7':
		  val = *ptr - '0';
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_hex(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }
      assert(tolower(*ptr) == 'h');

      ptr += 1;
      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 4;

      if (based_size > 0) {
            int rem = based_size % 4;
	    if (rem != 0) based_size += 4 - rem;
	    if (size > based_size) yywarn(yylloc,
	        "extra digits given for sized hex constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		  val = *ptr - '0';
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
		  val = tolower(*ptr) - 'a' + 10;
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


/* Divide the integer given by the string by 2. Return the remainder bit. */
static int dec_buf_div2(char *buf)
{
    int partial;
    int len = strlen(buf);
    char *dst_ptr;
    int pos;

    partial = 0;
    pos = 0;

    /* dst_ptr overwrites buf, but all characters that are overwritten
       were already used by the reader. */
    dst_ptr = buf;

    while(buf[pos] == '0')
	++pos;

    for(; pos<len; ++pos){
	if (buf[pos]=='_')
	    continue;

	assert(isdigit(buf[pos]));

	partial= partial*10 + (buf[pos]-'0');

	if (partial >= 2){
	    *dst_ptr = partial/2 + '0';
	    partial = partial & 1;

	    ++dst_ptr;
	}
	else{
	    *dst_ptr = '0';
	    ++dst_ptr;
	}
    }

    // If result of division was zero string, it should remain that way.
    // Don't eat the last zero...
    if (dst_ptr == buf){
	*dst_ptr = '0';
	++dst_ptr;
    }
    *dst_ptr = 0;

    return partial;
}

/* Support a single x, z or ? as a decimal constant (from 1364-2005). */
verinum* make_undef_highz_dec(const char* ptr)
{
      bool signed_flag = false;

      assert(*ptr == '\'');
      /* The number may have decorations of the form 'sd<code>,
         possibly with space between the d and the <code>.
         Also, the 's' is optional, and marks the number as signed. */
      ptr += 1;

      if (tolower(*ptr) == 's') {
	  signed_flag = true;
	  ptr += 1;
      }

      assert(tolower(*ptr) == 'd');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	  ptr += 1;

	/* Process the code. */
      verinum::V* bits = new verinum::V[1];
      switch (*ptr) {
	  case 'x':
	  case 'X':
	    bits[0] = verinum::Vx;
	    break;
	  case 'z':
	  case 'Z':
	  case '?':
	    bits[0] = verinum::Vz;
	    break;
	  default:
	    assert(0);
      }
      ptr += 1;
      while (*ptr == '_') ptr += 1;
      assert(*ptr == 0);

      verinum*out = new verinum(bits, 1, false);
      out->has_sign(signed_flag);
      delete[]bits;
      return out;
}

/*
 * Making a decimal number is much easier than the other base numbers
 * because there are no z or x values to worry about. It is much
 * harder than other base numbers because the width needed in bits is
 * hard to calculate.
 */

verinum*make_unsized_dec(const char*ptr)
{
      char buf[4096];
      bool signed_flag = false;
      unsigned idx;

      if (ptr[0] == '\'') {
	      /* The number has decorations of the form 'sd<digits>,
		 possibly with space between the d and the <digits>.
		 Also, the 's' is optional, and marks the number as
		 signed. */
	    ptr += 1;

	    if (tolower(*ptr) == 's') {
		  signed_flag = true;
		  ptr += 1;
	    }

	    assert(tolower(*ptr) == 'd');
	    ptr += 1;

	    while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
		  ptr += 1;

      } else {
	      /* ... or an undecorated decimal number is passed
		 it. These numbers are treated as signed decimal. */
	    assert(isdigit(*ptr));
	    signed_flag = true;
      }


	/* Copy the digits into a buffer that I can use to do in-place
	   decimal divides. */
      idx = 0;
      while ((idx < sizeof buf) && (*ptr != 0)) {
	    if (*ptr == '_') {
		  ptr += 1;
		  continue;
	    }

	    buf[idx++] = *ptr++;
      }

      if (idx == sizeof buf) {
	    fprintf(stderr, "Ridiculously long"
		    " decimal constant will be truncated!\n");
	    idx -= 1;
      }

      buf[idx] = 0;
      unsigned tmp_size = idx * 4 + 1;
      verinum::V *bits = new verinum::V[tmp_size];

      idx = 0;
      while (idx < tmp_size) {
	    int rem = dec_buf_div2(buf);
	    bits[idx++] = (rem == 1) ? verinum::V1 : verinum::V0;
      }

      assert(strcmp(buf, "0") == 0);

	/* Now calculate the minimum number of bits needed to
	   represent this unsigned number. */
      unsigned size = tmp_size;
      while ((size > 1) && (bits[size-1] == verinum::V0))
	    size -= 1;

	/* Now account for the signedness. Don't leave a 1 in the high
	   bit if this is a signed number. */
      if (signed_flag && (bits[size-1] == verinum::V1)) {
	    size += 1;
	    assert(size <= tmp_size);
      }

        /* Since we never have the real number of bits that a decimal
           number represents we do not check for extra bits. */
//      if (based_size > 0) { }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*res = new verinum(bits, size, false);
      res->has_sign(signed_flag);

      delete[]bits;
      return res;
}

/*
 * Convert the string to a time unit or precision.
 * Returns true on failure.
 */
static bool get_timescale_const(const char *&cp, int &res, bool is_unit)
{
	/* Check for the 1 digit. */
      if (*cp != '1') {
	    if (is_unit) {
		  VLerror(yylloc, "Invalid `timescale unit constant "
		                  "(1st digit)");
	    } else {
		  VLerror(yylloc, "Invalid `timescale precision constant "
		                  "(1st digit)");
	    }
	    return true;
      }
      cp += 1;

	/* Check the number of zeros after the 1. */
      res = strspn(cp, "0");
      if (res > 2) {
	    if (is_unit) {
		  VLerror(yylloc, "Invalid `timescale unit constant "
		                  "(number of zeros)");
	    } else {
		  VLerror(yylloc, "Invalid `timescale precision constant "
		                  "(number of zeros)");
	    }
	    return true;
      }
      cp += res;

	/* Skip any space between the digits and the scaling string. */
      cp += strspn(cp, " \t");

	/* Now process the scaling string. */
      if (strncmp("s", cp, 1) == 0) {
	    res -= 0;
	    cp += 1;
	    return false;

      } else if (strncmp("ms", cp, 2) == 0) {
	    res -= 3;
	    cp += 2;
	    return false;

      } else if (strncmp("us", cp, 2) == 0) {
	    res -= 6;
	    cp += 2;
	    return false;

      } else if (strncmp("ns", cp, 2) == 0) {
	    res -= 9;
	    cp += 2;
	    return false;

      } else if (strncmp("ps", cp, 2) == 0) {
	    res -= 12;
	    cp += 2;
	    return false;

      } else if (strncmp("fs", cp, 2) == 0) {
	    res -= 15;
	    cp += 2;
	    return false;

      }

      if (is_unit) {
	    VLerror(yylloc, "Invalid `timescale unit scale");
      } else {
	    VLerror(yylloc, "Invalid `timescale precision scale");
      }
      return true;
}


/*
 * process either a pull0 or a pull1.
 */
static void process_ucdrive(const char*txt)
{
      UCDriveType ucd = UCD_NONE;
      const char*cp = txt + strspn(txt, " \t");

	/* Skip the space after the `unconnected_drive directive. */
      if (cp == txt) {
	    VLerror(yylloc, "Space required after `unconnected_drive "
	                    "directive.");
	    return;
      }

	/* Check for the pull keyword. */
      if (strncmp("pull", cp, 4) != 0) {
	    VLerror(yylloc, "pull required for `unconnected_drive "
	                    "directive.");
	    return;
      }
      cp += 4;
      if (*cp == '0') ucd = UCD_PULL0;
      else if (*cp == '1') ucd = UCD_PULL1;
      else {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`unconnected_drive does not support 'pull" << *cp
	         << "'." << endl;
	    error_count += 1;
	    return;
      }
      cp += 1;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-VLtext) != strlen(VLtext)) {
	    VLerror(yylloc, "Invalid `unconnected_drive directive (extra "
	                    "garbage after precision).");
	    return;
      }

      uc_drive = ucd;
}

/*
 * The timescale parameter has the form:
 *      " <num> xs / <num> xs"
 */
static void process_timescale(const char*txt)
{
      const char*cp = txt + strspn(txt, " \t");

	/* Skip the space after the `timescale directive. */
      if (cp == txt) {
	    VLerror(yylloc, "Space required after `timescale directive.");
	    return;
      }

      int unit = 0;
      int prec = 0;

	/* Get the time units. */
      if (get_timescale_const(cp, unit, true)) return;

	/* Skip any space after the time units, the '/' and any
	 * space after the '/'. */
      cp += strspn(cp, " \t");
      if (*cp != '/') {
	    VLerror(yylloc, "`timescale separator '/' appears to be missing.");
	    return;
      }
      cp += 1;
      cp += strspn(cp, " \t");

	/* Get the time precision. */
      if (get_timescale_const(cp, prec, false)) return;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-VLtext) != strlen(VLtext)) {
	    VLerror(yylloc, "Invalid `timescale directive (extra garbage "
	                    "after precision).");
	    return;
      }

	/* The time unit must be greater than or equal to the precision. */
      if (unit < prec) {
	    VLerror(yylloc, "error: `timescale unit must not be less than "
	                    "the precision.");
	    return;
      }

      pform_set_timescale(unit, prec, yylloc.text, yylloc.first_line);
}

int VLwrap()
{
      return 1;
}

/*
 * The line directive matches lines of the form #line "foo" N and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite.
 */
static void line_directive()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(VLtext, '#');
	/* Skip the #line directive. */
      assert(strncmp(cp, "#line", 5) == 0);
      cp += 5;
	/* Skip the space after the #line directive. */
      cp += strspn(cp, " \t");

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "Invalid #line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "Invalid #line directive (file name end).");
	    return;
      }

	/* Copy the file name and assign it to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

	/* Skip the space after the file name. */
      cp = fn_end;
      cp += 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid #line directive (missing space after "
	                    "file name).");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Get the line number and verify that it is correct. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid line number for #line directive.");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Verify that only space is left. */
      cpr += strspn(cp, " \t");
      if ((size_t)(cpr-VLtext) != strlen(VLtext)) {
	    VLerror(yylloc, "Invalid #line directive (extra garbage after "
	                    "line number).");
	    delete[] buf;
	    return;
      }

	/* Now we can assign the new values to yyloc. */
      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * The line directive matches lines of the form `line N "foo" M and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite. M is ignored.
 */
static void line_directive2()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(VLtext, '`');
	/* Skip the `line directive. */
      assert(strncmp(cp, "`line", 5) == 0);
      cp += 5;

	/* strtoul skips leading space. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid line number for `line directive.");
	    return;
      }
      lineno -= 1;
      cp = cpr;

	/* Skip the space between the line number and the file name. */
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid `line directive (missing space after "
	                    "line number).");
	    return;
      }
      cp = cpr;

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "Invalid `line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "Invalid `line directive (file name end).");
	    return;
      }

	/* Skip the space after the file name. */
      cp = fn_end + 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid `line directive (missing space after "
	                    "file name).");
	    return;
      }
      cp = cpr;

	/* Check that the level is correct, we do not need the level. */
      if (strspn(cp, "012") != 1) {
	    VLerror(yylloc, "Invalid level for `line directive.");
	    return;
      }
      cp += 1;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-VLtext) != strlen(VLtext)) {
	    VLerror(yylloc, "Invalid `line directive (extra garbage after "
	                    "level).");
	    return;
      }

	/* Copy the file name and assign it and the line number to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * Reset all compiler directives. This will be called when a `resetall
 * directive is encountered or when a new compilation unit is started.
 */
static void reset_all()
{
      pform_set_default_nettype(NetNet::WIRE, yylloc.text, yylloc.first_line);
      in_celldefine = false;
      uc_drive = UCD_NONE;
      pform_set_timescale(def_ts_units, def_ts_prec, 0, 0);
}

extern FILE*vl_input;
void reset_lexor()
{
      VLrestart(vl_input);
      yylloc.first_line = 1;

	/* Announce the first file name. */
      yylloc.text = set_file_name(strdupnew(vl_file.c_str()));

      if (separate_compilation) {
	    reset_all();
	    if (!keyword_mask_stack.empty()) {
		  lexor_keyword_mask = keyword_mask_stack.back();
		  keyword_mask_stack.clear();
	    }
      }
}

/*
 * Modern version of flex (>=2.5.9) can clean up the scanner data.
 */
void destroy_lexor()
{
# ifdef FLEX_SCANNER
#   if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5
#     if YY_FLEX_MINOR_VERSION > 5 || defined(YY_FLEX_SUBMINOR_VERSION) && YY_FLEX_SUBMINOR_VERSION >= 9
    VLlex_destroy();
#     endif
#   endif
# endif
}

