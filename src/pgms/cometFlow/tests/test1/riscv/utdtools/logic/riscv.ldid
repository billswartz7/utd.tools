
# #################################################
# cometFlow 1.0 executed on Tue Oct 22 13:59:40 2019
# TCL Directory=/Users/bill/version1/utdtools/utdtools.1.0/tcl/utdtools
#!/bin/sh
# This comment make this script an executable.  Do *NOT* delete \
eval exec ${UTDTOOLS}/bin/${UTDTOOLSOS}/cometFlow -s l -dir logic -n -v -f -do ${UTDTOOLS}/scripts/flow/logic ${1+"$@"}
set routine logic
global env
global argv
# The defaults settings.
if {!([info exists env(UTDTOOLS)])} {
  puts stderr "ERROR:cannot get OpenRoad environment variable:UTDTOOLS"
  exit 1
}
# Get the design name
set args $argv
set num_args [llength $args]
for {set i 0} {$i < $num_args} {incr i} {
  set arg_el [lindex $args $i]
  utdmsg imsg null "argv\[$i]: $arg_el\n"
}
# argv[0]: -s
# argv[1]: l
# argv[2]: -dir
# argv[3]: logic
# argv[4]: -n
# argv[5]: -v
# argv[6]: -f
# argv[7]: -do
# argv[8]: /Users/bill/version1/utdtools/utdtools.1.0/scripts/flow/logic
# argv[9]: riscv
incr i -1
set dsn [lindex $args $i]
utdmsg imsg null "Welcome to the Run_YOSYS Program...\n"
# Welcome to the Run_YOSYS Program...
# Now do some functionality
# We should be in the logic directory as we created a directory here.
set dirname [pwd]
set folder [file tail $dirname]
if {$folder != "logic"} {
  utdmsg errmg $routine "we are not in the proper directory:$folder\n"
  utdwait
  exit 1
}
# Now source any necessary do files.
::utdtools::source_flow_do_files $dsn l
# [::utdtools::check_do_file]:No user do file. Using default: riscv.ldo...
# ######################## Verilog  ############################
set input_rtl $::utdtools::rtl_allS
foreach input_name $input_rtl {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../ ../../] true]
  if {$fpath == ""} {
    utdmsg errmsg $routine "No input file named $input_name found. Aborting\n"
    utdwait
    exit 1
  }
}
# [::utdtools::search_input]:input file:rv32_CPU.v does not exist.  Looking in . ...
# [::utdtools::search_input]:input file:rv32_CPU.v does not exist.  Looking in ../ ...
# [::utdtools::search_input]:input file:rv32_CPU.v does not exist.  Looking in ../../ ...
# [::utdtools::search_input]:found... creating link to ../../rv32_CPU.v...link:rv32_CPU.v
# ######################## SDC ############################
set input_name $::utdtools::sdc_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../ ../../] true]
  if {$fpath == ""} {
    utdmsg errmsg $routine "No input file named $input_name found. Aborting\n"
    utdwait
    exit 1
  }
}
# [::utdtools::search_input]:input file:riscv.sdc does not exist.  Looking in . ...
# [::utdtools::search_input]:input file:riscv.sdc does not exist.  Looking in ../ ...
# [::utdtools::search_input]:input file:riscv.sdc does not exist.  Looking in ../../ ...
# [::utdtools::search_input]:found... creating link to ../../riscv.sdc...link:riscv.sdc
utdmsg imsg $routine "reading SDC file:$fpath\n"
# [logic]:reading SDC file:../../riscv.sdc
# ######################## LIBERTY ############################
set input_name $::utdtools::timing_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../ ../../] true]
  if {$fpath == ""} {
    utdmsg errmsg $routine "No input file named $input_name found. Aborting\n"
    utdwait
    exit 1
  }
}
# [::utdtools::search_input]:input file:osu035.lib does not exist.  Looking in . ...
# [::utdtools::search_input]:input file:osu035.lib does not exist.  Looking in ../ ...
# [::utdtools::search_input]:input file:osu035.lib does not exist.  Looking in ../../ ...
# [::utdtools::search_input]:found... creating link to ../../osu035.lib...link:osu035.lib
utdmsg imsg $routine "reading Synopsys Library file:$fpath\n"
# [logic]:reading Synopsys Library file:../../osu035.lib
# ######################## YOSYS_SCRIPT.TCL ############################
set yosys_script [file join $env(UTDTOOLS) tcl logic yosys_script.tcl]
::utdtools::backup_directory output
::utdtools::backup_directory rpt
utdmsg imsg $routine "Calling YOSYS.\n"
# [logic]:Calling YOSYS.
global statusG
global outputG
set program_cmd "yosys -c $yosys_script"
if {[catch {eval bgexec statusG -output outputG -keepnewline false -onoutput [list {puts stderr}] $program_cmd} msg]} {
  set fp [open "problem" w]
  puts $fp "we got the following msg:$msg"
 close $fp
}
utdmsg imsg null "Logic Synthesis Completed.\n"
# Logic Synthesis Completed.
exit 0
