#!/bin/sh
# This comment makes this script an executable. Do *NOT* delete \
eval exec ${ICDIR}/bin/icos itranslate -v -do $0 ${1+"$@"}

set routine metalfill
set previous assemble

global env
global argv
global icdirG
if {[info exists env(ICDIR)]} {
  set icdirG $env(ICDIR)
} {
  puts stderr "ERROR:cannot get iTools environment variable:ICDIR"
  exit 1
}
lappend auto_path $icdirG/tcl/common

set args $argv
set num_args [llength $args]
for {set i 0} {$i < $num_args} {incr i} {
  set arg_el [lindex $args $i]
  icmessage imsg null "argv\[$i]: $arg_el\n"
}
incr i -1
set dsn [lindex $args $i]

icbackup_directory metalfill
cd metalfill

# Now source any necessary do files.
::utdtools::source_flow_do_files $dsn m

set dsn $::utdtools::designNameS
icmessage imsg null "Welcome to the Sim MetalFill Program...\n"

# Now do some functionality
# We should be in the floorplan directory as we created a directory here.
# eval exec ${OPENROAD}/bin/Darwin/flow -s p -dir cut .... 
set dirname [pwd]
set folder [file tail $dirname]
if {$folder != "metalfill"} {
  icmessage errmg $routine "we are not in the proper directory:$folder\n"
  icwait
  exit 1
}

# ######################## LEF ############################
set input_name $::utdtools::lef_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$fpath == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading LEF file:$fpath\n"
iccheck_ports off
icread_lef $fpath -scale -model_obs keepout

# We need to do this for TimberWolf
if {([info exists ::utdtools::feednameS]) && ($::utdtools::feednameS != "")} {
  icmake_default_feedthru -exists $::utdtools::feednameS
}

# ######################## TIMING ############################
set input_name $::utdtools::timing_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$fpath == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading Synopsys Library file:$fpath\n"
icread_synopsys -new $fpath

# ######################## DEF ############################
set input_name $::utdtools::def_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set def_path [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$def_path == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading DEF file:$def_path\n"
icread_def $def_path -convert_to_exact_pads

# Now output the TimberWolf files
icbackup_directory output

###################################################################
# For now just copy def file to the output directory
###################################################################
set outfile [file join [pwd] output ${dsn}.def]
if {[file type $def_path] == "link"} {
  if {[catch {set real_file_path [file readlink $def_path]} msg]} {
    icwait
  }
  set full_path [file join ../ assemble output $real_file_path]
} else {
  set full_path $def_path
}
file copy $full_path $outfile
exit 0
