#!/bin/sh
# This comment makes this script an executable. Do *NOT* delete \
eval exec ${ICDIR}/bin/icos itranslate -v -do $0 ${1+"$@"}

set routine grouter
set previous cts

global env
global argv
global icdirG
if {[info exists env(ICDIR)]} {
  set icdirG $env(ICDIR)
} {
  puts stderr "ERROR:cannot get iTools environment variable:ICDIR"
  exit 1
}
lappend auto_path $icdirG/tcl/common

set args $argv
set num_args [llength $args]
for {set i 0} {$i < $num_args} {incr i} {
  set arg_el [lindex $args $i]
  icmessage imsg null "argv\[$i]: $arg_el\n"
}
incr i -1
set dsn [lindex $args $i]

icbackup_directory groute
cd groute

# Now source any necessary do files.
::utdtools::source_flow_do_files $dsn g

set num_parts $::utdtools::numPartitionS
set dsn $::utdtools::designNameS
icmessage imsg null "Welcome to the TimberWolf Global Routing Program...\n"
icmessage imsg null "We are going to process $num_parts...\n"

# Now do some functionality
# We should be in the groute directory as we created a directory here.
set dirname [pwd]
set folder [file tail $dirname]
if {$folder != "groute"} {
  icmessage errmg $routine "we are not in the proper directory:$folder\n"
  icwait
  exit 1
}

# ######################## LEF ############################
set input_name $::utdtools::lef_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$fpath == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading LEF file:$fpath\n"
iccheck_ports off
icread_lef $fpath -scale -model_obs keepout

# We need to do this for TimberWolf
if {([info exists ::utdtools::feednameS]) && ($::utdtools::feednameS != "")} {
  icmake_default_feedthru -exists $::utdtools::feednameS
}

# ######################## TIMING ############################
set input_name $::utdtools::timing_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$fpath == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading Synopsys Library file:$fpath\n"
icread_synopsys -new $fpath

# ######################## DEF ############################
set input_name $::utdtools::def_fileS
if {$input_name != ""} {
  # change this to multiple files if needed
  set fpath [::utdtools::search_input $input_name [list . ../${previous}/output ../ ../../] true]
  if {$fpath == ""} {
    icmessage errmsg $routine "No input file named $input_name found. Aborting\n"
    icwait
    exit 1
  }
}
icmessage imsg $routine "reading DEF file:$fpath\n"
icread_def $fpath -convert_to_exact_pads


# Now output the TimberWolf files
icbackup_directory timberwolf
icbackup_directory output
cd timberwolf

# For TimberWolf global router abstract ports
set models [twinstance used -include_required]
icabstract $models

# Don't want to confuse things use TimberWolf default script.
icpar_option TWGR autodetect_script off
icpar_option TWGR iterations 1
icpar_option TWGR reassign_iterations 1
icpar_option TWGR create_gcells on
icwrite_ic -placed -writerows
icwrite_placement ${dsn}.pl1

set icos [file join $icdirG bin icos]

###################################################################
# Now call the syntax check and the placer.
###################################################################
if {([info exists ::utdtools::nographicsS]) && ($::utdtools::nographicS)} {
  append opts " -n -v"
} else {
  append opts " -v"
}
if {[catch {eval bgexec statusG -output outputG $icos icdir $icdirG syntax -v ${dsn}} msg]} {
  set fp [open "problem" w]
  puts $fp "we got the following msg:$msg"
  close $fp
}
if {[catch {eval bgexec statusG -output outputG $icos icdir $icdirG grouter ${opts} ${dsn}} msg]} {
  set fp [open "problem" w]
  puts $fp "we got the following msg:$msg"
  close $fp
}

# Create the ${dsn}_final.tdo script.
set f [open ${dsn}_final.tdo w]
puts $f "icread_itools::state groute"
puts $f "icwrite_def \[file join ../ output ${dsn}.def] -placed \
-sections {rows nocoresites vias components pins nets}"
puts $f "# Copy over the .guide file"
puts $f "set guide_path \[file join groute output ${dsn}.guide]"
puts $f "if {\[file exists \$guide_path]} {"
puts $f "  set output_guide \[file join ../output ${dsn}.guide]"
puts $f "  file copy \$guide_path \$output_guide"
puts $f "}"
puts $f "exit"
close $f

# Next call translator to create output files.
if {[catch {bgexec statusTG -output outputG $icos icdir $icdirG itranslate -v -do ${dsn}_final.tdo ${dsn}} msg]} {  
  set fp [open "problem" w]
  puts $fp "we got the following msg:$msg"
  close $fp
}

icmessage imsg twplace "global routing completed.\n"
exit 0
