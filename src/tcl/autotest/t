PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE problems ( `Index` INTEGER , type TEXT, output TEXT, definition TEXT, variables TEXT);
INSERT INTO problems VALUES(1,'data_processing','ANSWER: %.2lf\n',replace('FILECHECK:{C code} problem1.c problem1.cpp problem1.cxx\012PROBLEM:\012In this question, you will need to create a simple  program\012that will process data. You are given the following data:\012 \012   UTDx{D1},\012   UTDx{D2},\012   UTDx{D3},\012   UTDx{D4},\012   UTDx{D5},\012   UTDx{D6}\012 \012Write a programs that adds them together and then process \012the sum by then doing UTDx{Doperation}\012 \012To identify the program instance, add the following line to the\012top of your program:\012\012fprintf( stderr, "PROGRAMID: UTDx{UTDID}\n" ) ;\012 \012You should initially put the values in an array.  You are  to output the\012answer on a single line followed by a new line.  The output should be\012printed to the screen using two digits of  precision after the decimal place.\012You should output to stderr  rather than stdout, that is, use\012 \012 fprintf ( stderr, format_string, ... )  \012 \012as a mechanism to output the answer.  You should use the following\012template for your answer:\012\012"ANSWER: %.2lf\n"\012 \012If your answer is an integer, cast it to a double.\012All floating point operations should be done in double precision.\012\012Put all of your code in a single file called ''problem1.c'' or\012''problem1.cpp'' if you wish to write using C++.   The name \012of the program must be called problem1.\012 \012Build a makefile for your program.  The name of the file should be\012''Makefile'' and exist in the current working directory.\012\012','\012',char(10)),'D1 D2 D3 D4 D5 D6 Doperation UTDID');
INSERT INTO problems VALUES(2,'library','ANSWER: %.2lf\n',replace('FILECHECK:{main C/C++ code} problem2.c problem2.cpp problem2.cxx\012FILECHECK:{include file} utdfib.h\012FILECHECK:{library C/C++ code} utdfib.c\012LIBCHECK:libfib UTDfibronacci\012PROBLEM:\012In this question, you will need to create a simple  program\012that will use a library to compute the Fibonacci series of\012the following number \012\012   UTDx{Fibonacci},\012\012and then perform the following operation\012 \012   UTDx{Fibop}.\012 \012The name of the library function should called:\012\012   UTDfibronacci and should have the following prototype\012\012extern double UTDfibronacci( int number ) ;\012\012which should reside in the header file: utdfib.h.\012\012To identify the program instance, add the following line \012to the top of your program:\012\012fprintf( stderr, "PROGRAMID: UTDx{UTDID}\n" ) ;\012You are  to output the answer on a single line followed by \012a new line.  The output should be printed to the screen \012using two digits of precision after the decimal place.\012You should output to stderr rather than stdout, that is, \012use\012 \012 fprintf ( stderr, format_string, ... )  \012 \012as a mechanism to output the answer.  You should use the following\012template for your answer:\012\012"ANSWER: %.2lf\n"\012 \012If your answer is an integer, cast it to a double.\012All floating point operations should be done in double precision.\012\012Put your library function in a file called utdfib.c or utdfib.cpp \012containing you library function.   This file should include a\012include to the file utdfib.h.\012\012Put your main or calling program in a file called ''problem2.c'' or\012''problem2.cpp'' if you wish to write using C++.   The name of the\012program must be called problem2.\012 \012Build a makefile for your program.  The name of the file should be\012''Makefile'' and exist in the current working directory.   It should\012create a UTDx{libtype} library named \012UTDx{libname} with the proper suffix.\012\012','\012',char(10)),'Fibonacci Fibop UTDID libtype libname');
CREATE TABLE instances ( `Index` INTEGER DEFAULT -1 , problem INTEGER, definition TEXT, D1 TEXT, D2 TEXT, D3 TEXT, D4 TEXT, D5 TEXT, D6 TEXT, Doperation TEXT, UTDID TEXT, Fibonacci TEXT, Fibop TEXT, libtype TEXT, libname TEXT);
INSERT INTO instances VALUES(1,1,replace('FILECHECK:{C code} problem1.c problem1.cpp problem1.cxx\012PROBLEM:\012In this question, you will need to create a simple  program\012that will process data. You are given the following data:\012 \012   2.0,\012   39.0,\012   6.0,\012   7.0,\012   4.2,\012   1.0 \012Write a programs that adds them together and then process \012the sum by then doing an $x^3$ on it \012To identify the program instance, add the following line to the\012top of your program:\012\012\012fprintf( stderr, "PROGRAMID: 1\n" ) ;\012 \012You should initially put the values in an array.  You are  to output the\012answer on a single line followed by a new line.  The output should be\012printed to the screen using two digits of  precision after the decimal place.\012You should output to stderr  rather than stdout, that is, use\012 \012 fprintf ( stderr, format_string, ... )  \012 \012as a mechanism to output the answer.  You should use the following\012template for your answer:\012\012\012"ANSWER: %.2lf\n"\012 \012If your answer is an integer, cast it to a double.\012All floating point operations should be done in double precision.\012\012\012Put all of your code in a single file called ''problem1.c'' or\012''problem1.cpp'' if you wish to write using C++.   The name \012of the program must be called problem1.\012 \012Build a makefile for your program.  The name of the file should be\012''Makefile'' and exist in the current working directory.\012\012\012\012\012','\012',char(10)),'2.0','39.0','6.0','7.0','4.2','1.0','an $x^3$ on it',NULL,NULL,NULL,NULL,NULL);
INSERT INTO instances VALUES(2,2,replace('FILECHECK:{main C/C++ code} problem2.c problem2.cpp problem2.cxx\012FILECHECK:{include file} utdfib.h\012FILECHECK:{library C/C++ code} utdfib.c\012LIBCHECK:libfib UTDfibronacci\012PROBLEM:\012In this question, you will need to create a simple  program\012that will use a library to compute the Fibonacci series of\012the following number \012\012\012   10,\012\012\012and then perform the following operation\012 \012   an $x^3$ on it.\012 \012The name of the library function should called:\012\012\012   UTDfibronacci and should have the following prototype\012\012\012extern double UTDfibronacci( int number ) ;\012\012\012which should reside in the header file: utdfib.h.\012\012\012To identify the program instance, add the following line \012to the top of your program:\012\012\012fprintf( stderr, "PROGRAMID: 2\n" ) ;\012You are  to output the answer on a single line followed by \012a new line.  The output should be printed to the screen \012using two digits of precision after the decimal place.\012You should output to stderr rather than stdout, that is, \012use\012 \012 fprintf ( stderr, format_string, ... )  \012 \012as a mechanism to output the answer.  You should use the following\012template for your answer:\012\012\012"ANSWER: %.2lf\n"\012 \012If your answer is an integer, cast it to a double.\012All floating point operations should be done in double precision.\012\012\012Put your library function in a file called utdfib.c or utdfib.cpp \012containing you library function.   This file should include a\012include to the file utdfib.h.\012\012\012Put your main or calling program in a file called ''problem2.c'' or\012''problem2.cpp'' if you wish to write using C++.   The name of the\012program must be called problem2.\012 \012Build a makefile for your program.  The name of the file should be\012''Makefile'' and exist in the current working directory.   It should\012create a dynamic library named \012libfib with the proper suffix.\012\012\012\012\012','\012',char(10)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'10','an $x^3$ on it','dynamic','libfib');
CREATE TABLE variables ( `Index` INTEGER , var TEXT, type TEXT, definition TEXT);
INSERT INTO variables VALUES(1,'Count','bounds','Count {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}');
INSERT INTO variables VALUES(2,'Count2','bounds','Count2 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}');
INSERT INTO variables VALUES(3,'Count3','bounds','Count3 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}');
INSERT INTO variables VALUES(4,'Count4','bounds','Count4 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}');
INSERT INTO variables VALUES(5,'Count5','bounds','Count5 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}');
INSERT INTO variables VALUES(6,'Reference Voltage','list','{Reference Voltage} {2.5 3 3.5 4 5 6 7 8 9 10 10.5 11 12 13 14 15}');
INSERT INTO variables VALUES(7,'D1','list','D1 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(8,'D2','list','D2 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(9,'D3','list','D3 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(10,'D4','list','D4 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(11,'D5','list','D5 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(12,'D6','list','D6 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}');
INSERT INTO variables VALUES(13,'Doperation','list','Doperation {{an $x^2$ on it} {rounding up using the ceil function} {a sqrt} {an $x^3$ on it} {rounding down using the floor function}}');
INSERT INTO variables VALUES(14,'source','UTDsource','UTDsource tests.tcl');
INSERT INTO variables VALUES(15,'Password','UTDexpr','UTDexpr Password {set passwd "pw[::utd::rand_range 1 2000000]"}');
INSERT INTO variables VALUES(16,'Membanks','list','Membanks {2 4 8}');
INSERT INTO variables VALUES(17,'Latency','bounds','Latency 3 6');
INSERT INTO variables VALUES(18,'Wide','UTDexpr','UTDexpr Wide {global wide; set wide [::utd::rand_list_choice [list 4 8]]}');
INSERT INTO variables VALUES(19,'Addresses','UTDexpr','UTDexpr Addresses {build_address}');
INSERT INTO variables VALUES(20,'Reg1','list','Reg1 {1 20}');
INSERT INTO variables VALUES(21,'Reg2','list','Reg2 {5 10}');
INSERT INTO variables VALUES(22,'Reg1Format','UTDexpr','UTDexpr Reg1Format {format %X [expr 4 * $Reg1]}');
INSERT INTO variables VALUES(23,'Reg2Format','UTDexpr','UTDexpr Reg2Format {format %X [expr 4 * $Reg2]}');
INSERT INTO variables VALUES(24,'Reg3Format','UTDexpr','UTDexpr Reg3Format {format %X [expr 4 * ($Reg1 + $Reg2)]}');
INSERT INTO variables VALUES(25,'Reg10','list','Reg10 {0x100 0x102 0x104 0x106 0x108 0x1A0}');
INSERT INTO variables VALUES(26,'MachineSize','list','MachineSize {2 4 8}');
INSERT INTO variables VALUES(27,'IcacheLines','list','IcacheLines {8 16 32}');
INSERT INTO variables VALUES(28,'IcacheLineSize','list','IcacheLineSize {16 32 64}');
INSERT INTO variables VALUES(29,'DCacheWays','list','DCacheWays {2 4 8}');
INSERT INTO variables VALUES(30,'DCacheLines','list','DCacheLines {16 32}');
INSERT INTO variables VALUES(31,'DCacheLineSize','list','DCacheLineSize {16 32 64}');
INSERT INTO variables VALUES(32,'Fibonacci','list','Fibonacci  {10 20}');
INSERT INTO variables VALUES(33,'Fibop','list','Fibop {{an $x^2$ on it} {a sqrt} {an $x^3$ on it} {cos(x)} {sin(x)}}');
INSERT INTO variables VALUES(34,'libtype','list','libtype {static dynamic}');
INSERT INTO variables VALUES(35,'libname','UTDexpr','UTDexpr libname {output_lib_name}');
COMMIT;
