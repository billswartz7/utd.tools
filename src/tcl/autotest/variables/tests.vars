# Variable,Low Value,High Value or a List, or Tcl Expression
Count {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}
Count2 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}
Count3 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}
Count4 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}
Count5 {expr pow(2,$Bits)/2} {expr pow(2,$Bits)-1}
{Reference Voltage} {2.5 3 3.5 4 5 6 7 8 9 10 10.5 11 12 13 14 15}
D1 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
D2 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
D3 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
D4 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
D5 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
D6 {1.0 2.0 3.0 4.2 4.5 5.0 6.0 7.0 11.0 25.0 31.0 39.0 55.0 3.14 2.717}
# Doperation {sqrt ceil floor square cube}
Doperation {{an $x^2$ on it} {rounding up using the ceil function} {a sqrt} {an $x^3$ on it} {rounding down using the floor function}}
# For testing purposes
#
# Variable,Low Value,High Value or a List, or Tcl Expression
UTDsource tests.tcl
UTDexpr Password {set passwd "pw[::utd::rand_range 1 2000000]"}
Membanks {2 4 8}
Latency 3 6
UTDexpr Wide {global wide; set wide [::utd::rand_list_choice [list 4 8]]}
UTDexpr Addresses {build_address}
Reg1 {1 20}
Reg2 {5 10}
UTDexpr Reg1Format {format %X [expr 4 * $Reg1]}
UTDexpr Reg2Format {format %X [expr 4 * $Reg2]}
UTDexpr Reg3Format {format %X [expr 4 * ($Reg1 + $Reg2)]}
Reg10 {0x100 0x102 0x104 0x106 0x108 0x1A0}
# Here are the variable for the cache practice tool
MachineSize {2 4 8}
IcacheLines {8 16 32}
IcacheLineSize {16 32 64}
DCacheWays {2 4 8}
DCacheLines {16 32}
DCacheLineSize {16 32 64}
Fibonacci  {10 20}
Fibop {{an $x^2$ on it} {a sqrt} {an $x^3$ on it} {cos(x)} {sin(x)}}
libtype {static dynamic}
UTDexpr libname {output_lib_name}
